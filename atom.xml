<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Firehacker</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-09-03T14:46:10.250Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Firehacker</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>NSE脚本浅析</title>
    <link href="http://yoursite.com/2018/09/03/NSE%E8%84%9A%E6%9C%AC%E6%B5%85%E6%9E%90/"/>
    <id>http://yoursite.com/2018/09/03/NSE脚本浅析/</id>
    <published>2018-09-03T13:32:04.000Z</published>
    <updated>2018-09-03T14:46:10.250Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://nmap.org/book/nse.html" target="_blank" rel="noopener">NSE</a>(Nmap 脚本引擎)是Nmap最强大最灵活的特性之一，可以用于增强主机发现、端口扫描、版本侦测和操作系统侦测等功能，还可以用来扩展高级的功能如web扫描、漏洞发现和漏洞利用等。本文对NSE技术及Lua语言进行分析与总结</p></blockquote><a id="more"></a><hr><h2 id="0x01-NSE-基础"><a href="#0x01-NSE-基础" class="headerlink" title="0x01 NSE 基础"></a>0x01 NSE 基础</h2><h3 id="1-NSE-脚本运行"><a href="#1-NSE-脚本运行" class="headerlink" title="1. NSE 脚本运行"></a>1. NSE 脚本运行</h3><pre><code>Namp -sV -sC scanme.Nmap.org</code></pre><p>-sV：对目标系统上的服务进行检测</p><p>-sC：使用默认(default)分类中所有脚本对目标进行检测</p><p><strong>Default 分类中的脚本</strong></p><table><thead><tr><th>脚本</th><th>描述</th></tr></thead><tbody><tr><td>banner.NSE</td><td>收集目标banner信息，会连接到目标开放TCP端口，输出任何5s内收到的数据</td></tr><tr><td>broadcast-ping.NSE</td><td>使用广播ping来发现网络中的主机</td></tr><tr><td>dns-recursion.NSE</td><td>检测一个DNS服务器是否允许第三方的查询，允许此查询可导致服务器受到DNS放大攻击</td></tr><tr><td>upnp-info.NSE</td><td>尝试通过UPnP服务来提取系统信息</td></tr><tr><td>Firewalk.NSE</td><td>使用IP协议中的TTL过期机制来发现防火墙设备</td></tr></tbody></table><h3 id="2-NSE-脚本分类"><a href="#2-NSE-脚本分类" class="headerlink" title="2. NSE 脚本分类"></a>2. NSE 脚本分类</h3><table><thead><tr><th>分类</th><th>描述</th></tr></thead><tbody><tr><td>auth</td><td>负责处理鉴权证书的脚本</td></tr><tr><td>broadcast</td><td>在局域网内探查更多服务开启状况，如CHCP,DNS，SQL Server等服务</td></tr><tr><td>brute</td><td>暴力破解密码脚本</td></tr><tr><td>default</td><td>使用-sC或-A参数扫描时默认脚本，提供基本脚本扫描能力</td></tr><tr><td>discovery</td><td>网络信息收集脚本，如SMB枚举，SNMP查询</td></tr><tr><td>dos</td><td>用于发起拒绝服务攻击</td></tr><tr><td>exploit</td><td>用来完成对目标系统安全漏洞渗透</td></tr><tr><td>external</td><td>针对第三方服务的脚本</td></tr><tr><td>fuzzer</td><td>进行模糊测试的脚本，发送异常包到目标机，探测出潜在漏洞</td></tr><tr><td>instrusive</td><td>可能引起目标系统崩溃或对目标网络造成极大负担的脚本</td></tr><tr><td>malware</td><td>用于检测恶意软件</td></tr><tr><td>safe</td><td>任何情况下安全无害的脚本</td></tr><tr><td>version</td><td>负责增强服务和版本扫描</td></tr><tr><td>vuln</td><td>检查目标主机是否有常见漏洞</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://nmap.org/book/nse.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;NSE&lt;/a&gt;(Nmap 脚本引擎)是Nmap最强大最灵活的特性之一，可以用于增强主机发现、端口扫描、版本侦测和操作系统侦测等功能，还可以用来扩展高级的功能如web扫描、漏洞发现和漏洞利用等。本文对NSE技术及Lua语言进行分析与总结&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="0x02 安全技术" scheme="http://yoursite.com/categories/0x02-%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/"/>
    
      <category term="安全工具" scheme="http://yoursite.com/categories/0x02-%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/%E5%AE%89%E5%85%A8%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="SecTools" scheme="http://yoursite.com/tags/SecTools/"/>
    
      <category term="Nmap" scheme="http://yoursite.com/tags/Nmap/"/>
    
      <category term="NSE" scheme="http://yoursite.com/tags/NSE/"/>
    
  </entry>
  
  <entry>
    <title>Nmap扫描详解</title>
    <link href="http://yoursite.com/2018/09/02/Nmap%E6%8A%80%E6%9C%AF%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2018/09/02/Nmap技术详解/</id>
    <published>2018-09-02T06:55:31.000Z</published>
    <updated>2018-09-03T14:50:26.385Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文参考<a href="http://www.tup.tsinghua.edu.cn/bookscenter/book_07230301.html" target="_blank" rel="noopener">诸神之眼</a>，由浅入深剖析Nmap进行网络安全审计技术，涉及活跃主机发现，端口扫描，远程操作系统和服务检测等技术</p></blockquote><a id="more"></a><hr><h2 id="0x01-Nmap-扫描范围"><a href="#0x01-Nmap-扫描范围" class="headerlink" title="0x01 Nmap 扫描范围"></a>0x01 Nmap 扫描范围</h2><h3 id="1-对连续范围内主机进行扫描"><a href="#1-对连续范围内主机进行扫描" class="headerlink" title="1. 对连续范围内主机进行扫描"></a>1. 对连续范围内主机进行扫描</h3><p><em>命令语法：Nmap [IP地址范围]</em></p><p>扫描范围为192.168.0.1~192.168.0.255 的主机</p><pre><code>Nmap -sn 192.168.0.1-255</code></pre><h3 id="2-对整个子网进行扫描"><a href="#2-对整个子网进行扫描" class="headerlink" title="2. 对整个子网进行扫描"></a>2. 对整个子网进行扫描</h3><p>Nmap 使用 <strong>CIDR</strong> (Classless Inter-Domain Routing，无类别域间路由)方式扫描整个子网</p><p><em>命令语法：Nmap [IP地址/掩码位数]</em></p><p>扫描范围为192.168.0.1~192.168.0.255子网范围内的主机</p><pre><code>Nmap -sn 192.168.0.1/24</code></pre><h3 id="3-对多个不连续的主机进行扫描"><a href="#3-对多个不连续的主机进行扫描" class="headerlink" title="3. 对多个不连续的主机进行扫描"></a>3. 对多个不连续的主机进行扫描</h3><p>将目标地址用空格分隔开来同时扫描选定主机</p><p><em>语法命令：Nmap [扫描目标1 扫描目标2 … 扫描目标n]</em></p><p>对192.168.0.1，192.168.2.1，192.168.128.1进行扫描</p><pre><code>Nmap -sn 192.168.0.1 192.168.2.1 192.168.128.1</code></pre><h3 id="4-排除指定目标扫描主机"><a href="#4-排除指定目标扫描主机" class="headerlink" title="4. 排除指定目标扫描主机"></a>4. 排除指定目标扫描主机</h3><p><em>命令语法：Nmap [目标] –exclude [目标]</em></p><p>扫描192.168.0.0/24 子网时，不对192.168.0.2进行扫描</p><pre><code>Nmap -sn 192.168.0.0/24 --exclude 192.168.0.2</code></pre><h3 id="5-对文本文件中的地址进行扫描"><a href="#5-对文本文件中的地址进行扫描" class="headerlink" title="5. 对文本文件中的地址进行扫描"></a>5. 对文本文件中的地址进行扫描</h3><p><em>命令语法：Nmap -iL [文本文件]</em></p><p>使用命令对 list.txt 中的地址进行扫描</p><pre><code>Nmap -sn -iL list.txt</code></pre><p><em>-sn 选项：快速扫描，仅确定目标是否是存活主机</em></p><h3 id="6-随机确定扫描目标"><a href="#6-随机确定扫描目标" class="headerlink" title="6. 随机确定扫描目标"></a>6. 随机确定扫描目标</h3><p><em>命令语法：Nmap -iR [目标数量]</em></p><p>随机在互联网上对80个IP地址进行扫描</p><pre><code>Nmap -sn -iR 80</code></pre><hr><h2 id="0x02-活跃主机发现"><a href="#0x02-活跃主机发现" class="headerlink" title="0x02 活跃主机发现"></a>0x02 活跃主机发现</h2><h3 id="1-基于APR协议"><a href="#1-基于APR协议" class="headerlink" title="1. 基于APR协议"></a>1. 基于APR协议</h3><p><strong>(1) 原理</strong></p><p>若想知道处在<strong>同一网段</strong>中IP地址为#.#.#.#的主机是否为活跃主机，先构造一个ARP请求数据包，并广播出去，如果得到回应，则说明该主机为活跃主机</p><p><strong>(2) Nmap 选项</strong></p><p><em>命令语法：Nmap -PR [目标]</em></p><p><strong>工作原理</strong></p><p>A. 将一个内容为 ‘<em>who has IP_2 tell IP_1</em>‘ 的 ARP 请求发送给目标 （Type：ARP(0x0806)；Opcode：request(1)）</p><p>B. 如果目标主机发出相应ARP回应’<em>ARP reply IP_2 is at MAC_2</em>‘ （Type：ARP(0x0806)；Opcode：reply(2)）</p><p>C. 如果迟迟得不到ARP响应数据包，可认为该IP地址所在设备不是活跃主机</p><h3 id="2-基于ICMP协议"><a href="#2-基于ICMP协议" class="headerlink" title="2. 基于ICMP协议"></a>2. 基于ICMP协议</h3><p><strong>(1) ICMP协议解析</strong></p><p>ICMP协议目的是在IP主机，路由器之间传递控制消息，发现和处理互联网的各种错误；ICMP报文可分为差错和查询两类，查询报文是用一对请求和应答定义的，可分为如下3类</p><p>A. <strong>响应请求和应答</strong></p><p>用于测试发送和接收两端链路及目标主机TCP/IP协议是否正常，只要收到就是正常，例如ping命令</p><p>B. <strong>时间戳请求和应答</strong></p><p>ICMP时间戳请求允许系统向另一个系统查询当前的时间，根据应答判断主机是否在线</p><p>C. <strong>地址掩码请求和应答</strong></p><p>ICMP地址掩码请求由源主机发送，用于无盘系统在引导过程中获取自己的子网掩码</p><p><strong>(2) 主机发现</strong></p><p>A. <strong>通过ICMP响应请求和应答进行主机发现</strong></p><p>由于ping工具的滥用，多数用于防护主机的防火墙设备都隔绝ICMP数据包通过，使用Nmap的选项-PE可实现ICMP协议的主机发现</p><p><em>命令语法：Nmap -PE [选项]</em></p><pre><code>Nmap -sn -PE 192.168.0.1</code></pre><p>主机向目标发送一个ICMP echo请求包，结果中的 <em>Type：8 (Echo (ping) request)</em>；若对方主机在线，而且没有防火墙隔离通信，将会收到目标主机但会的ICMP echo 响应数据包，<br><em>Type: 0 (Echo (ping) reply)</em></p><p>B. <strong>通过ICMP时间戳请求和应答进行主机发现</strong></p><p><em>命令语法：Nmap -PP [选项]</em></p><pre><code>Nmap -sn -PP 192.168.0.1</code></pre><p>发送的数据包Type字段为 <em>Type：13 (Timestamp request)</em>；目标主机在获得这个数据包之后，返回 <em>Type：14 (Timestamp reply)</em> 的响应数据包</p><p>C. 通过ICMP地址掩码请求和应答进行主机发现</p><p><em>命令语法：Nmap -PM [目标]</em></p><p>发送的数据包 Type 字段为 <em>Type：17(Address mask request)</em> ，实际中多用于无盘系统</p><h3 id="3-基于TCP协议"><a href="#3-基于TCP协议" class="headerlink" title="3. 基于TCP协议"></a>3. 基于TCP协议</h3><p><strong>(1)TCP协议解析</strong></p><p>TCP 是一种面向连接，可靠的，基于字节流的传输控制协议，使用三次握手协议建立连接。当主动方发出 SYN 连接请求后，等待对方回答TCP的三次握手 SYN+ACK ，并最终对对方的SYN执行ACK确认</p><p><strong>TCP三次握手过程</strong></p><pre><code>1. 客户端发送SYN(SEQ=x)报文给服务端，进入SYN_SEND状态2. 服务端接收SYN报文，回应一个SYN(SEQ=y) ACK(ACK=x+1) 报文，进入SYN_RECV状态3. 客户端收到服务器端的SYN报文，回应一个ACK(ACK=y+1)报文，进入Established状态</code></pre><p><strong>(2) 主机发现</strong></p><p>A. <strong>TCP SYN扫描</strong></p><p><em>命令语法：Nmap -PS [端口1，端口2，…] [目标]</em></p><p>使用-PS选项想目标主机发送一个设置了SYN标志的数据包，内容部分为空。默认目标端口为80端口</p><p>目标主机收到Nmap发送的SYN数据包之后，认为其要和自己的一个端口建立连接，如果端口开放，目标主机会按照三次握手规定，返回一个SYN/ACK数据包，表示同意连接</p><p>如果端口关闭，目标主机会拒绝此次连接，向Nmap所在主机发送一个RST数据包</p><p>主机发现阶段，只要收到数据包，无论是SYN/ACK数据包还是RST数据包，意味目标主机活跃</p><p>B. <strong>TCP ACK扫描</strong></p><p>Nmap发送的数据包中使用TCP/ACK标志位，不是SYN标志位</p><p><em>命令语法：Nmap -PA [目标]</em></p><h3 id="4-基于UDP协议"><a href="#4-基于UDP协议" class="headerlink" title="4. 基于UDP协议"></a>4. 基于UDP协议</h3><p><strong>(1) UDP 协议解析</strong></p><p>UDP协议面向非连接，端口扫描可靠性不高；当一个UDP端口收到一个UDP数据包时，如果它是<strong>关闭</strong>的，会给源端返回一个<strong>ICMP端口不可达数据包</strong>；如果它是开放的，就会忽略此数据包，将其丢弃不反悔任何信息(可能是传输过程中数据包丢失，扫描时间超过限制)</p><p><strong>(2) 主机发现</strong></p><p><em>命令语法：Nmap -PU [目标]</em></p><p>UDP需要扫描的是目标主机关闭的端口，扫描过程需要避开常用UDP协议端口，选用比较大的端口</p><h3 id="5-基于SCTP协议"><a href="#5-基于SCTP协议" class="headerlink" title="5. 基于SCTP协议"></a>5. 基于SCTP协议</h3><p><strong>(1) SCTP协议解析</strong></p><p>SCTP与TCP同为传输层上的协议，完成任务相同，差别对别如下</p><p>A. TCP协议一般用于单地址连接，SCTP可用于多地址连接</p><p>B. TCP协议基于字节流，支持一个流；SCTP协议基于消息流，可支持多个流</p><p>C. TCP连接的建立通过三次握手实现，SCTP连接建立通过四次握手机制实现，可有效避免攻击</p><p>在STCP中，客户端使用一个<code>INIT</code>报文发起连接，服务器端使用<code>INIT-ACK</code>报文进行应答，其中包括<code>cookie</code>(连接的唯一标识)。然后客户端使用一个<code>COOKIE-ECHO</code>报文进行响应，其中包含服务气短所发送的cookie。服务器端要为这个链接分配资源，并通过向客户端发送一个<code>COOKIE-ACK</code>报文对其进行响应</p><p><strong>(2) 主机发现</strong></p><p><em>命令语法：Nmap -PY [端口1，端口2，…] [目标]</em></p><p>多数目标主机不支持SCTP协议，此方法作为备用手段</p><h3 id="6-基于IP协议"><a href="#6-基于IP协议" class="headerlink" title="6. 基于IP协议"></a>6. 基于IP协议</h3><p>Nmap中允许想目标主机发送IP数据包来检测目标主机是否活跃，可用<code>-PO</code>选项制定协议编号进行扫描，默认为ICMP-1，IGMP-2，IP-in-IP-4，TCP-6，UDP-17，GRE-47，ESP-50</p><p><em>命令语法：Nmap -sP -PO 协议编号 [目标]</em></p><p>此情形数据包内容为空，容易被检测，可使用–data-length参数来发送添加了随机数据的数据包</p><pre><code>Nmap --data-length 25 192.168.0.1</code></pre><h3 id="7-基于DNS协议"><a href="#7-基于DNS协议" class="headerlink" title="7. 基于DNS协议"></a>7. 基于DNS协议</h3><p>将所有目标IP(无论是否活跃)对应的域名列出</p><p><em>命令语法：Nmap -R [目标IP]</em></p><p>取消域名转换，适用于大规模网络扫描</p><p><em>命令语法：Nmap -n [目标IP]</em></p><hr><h2 id="0x03-端口扫描技术"><a href="#0x03-端口扫描技术" class="headerlink" title="0x03 端口扫描技术"></a>0x03 端口扫描技术</h2><h3 id="1-SYN-扫描"><a href="#1-SYN-扫描" class="headerlink" title="1. SYN 扫描"></a>1. SYN 扫描</h3><p>Nmap 默认扫描方式，扫描速度快，不易被网络安全设备发现</p><pre><code>1. Nmap想目标主机的一个端口发送请求连接的SYN数据包2. 目标计算机在接收这个SYN数据包之后会以SYN/ACK进行应答3. Nmap在收到SYN/ACK后发送RST包请求断开连接而不是ACK应答</code></pre><p>三四握手没有完成，无法建立正常的TCP连接，扫描不会被记录到系统日志中</p><p><em>扫描语法：nmap -sS [target]</em></p><h3 id="2-Connect扫描"><a href="#2-Connect扫描" class="headerlink" title="2. Connect扫描"></a>2. Connect扫描</h3><p><em>语法：nmap -sT [target]</em></p><p>这种扫描方式完成了TCP三次握手，无需rooy/administrator 权限</p><h3 id="3-UDP-扫描"><a href="#3-UDP-扫描" class="headerlink" title="3. UDP 扫描"></a>3. UDP 扫描</h3><p><em>语法：nmap -sU [target]</em></p><p>UDP 扫描速度较慢，UDP程序不会对Nmap所发送的空数据包做出回应</p><h3 id="4-TCP-FIN-扫描"><a href="#4-TCP-FIN-扫描" class="headerlink" title="4. TCP FIN 扫描"></a>4. TCP FIN 扫描</h3><p><em>语法：nmap -sF [target]</em></p><p>TCP FIN 扫描方法向目标端口发送一个FIN数据包，对于关闭的端口，目标系统返回RST标志</p><h3 id="5-NULL-扫描"><a href="#5-NULL-扫描" class="headerlink" title="5. NULL 扫描"></a>5. NULL 扫描</h3><p><em>语法：nmap -sN [target]</em></p><p>TCP NULL 扫描方法向目标端口发送一个不包含任何标志的数据包，对于关闭的端口，目标系统返回RST标志</p><h3 id="6-Xmas-Tree-扫描"><a href="#6-Xmas-Tree-扫描" class="headerlink" title="6. Xmas Tree 扫描"></a>6. Xmas Tree 扫描</h3><p><em>语法：nmap -sX [target]</em></p><p>TCP Xmas Tree 扫描方法是向目标端口发送一个含有FIN,URG,PUSH 标志的数据包，对于关闭的端口，目标系统返回RST标志</p><h3 id="7-idle-扫描"><a href="#7-idle-扫描" class="headerlink" title="7. idle 扫描"></a>7. idle 扫描</h3><p>伪造一个源地址为第三方的数据包，可以帮助使用者隐藏自己的身份，目标主机日志中记录下来的是第三方地址</p><p>可以绕开网络中的一些安全机制，如路由器中的访问控制列表(ACL)</p><p><strong>扫描原理</strong></p><pre><code>1. 检测第三方的IP ID 值并记录下来2. 在本机上伪造一个源地址为第三方主机的数据包，将其发送给目标主机端口，根据端口状态的不同，目标主机可能会导致第三方主机IP ID值增加3. 再回来检查第三方主机的IP ID值，比较两次值</code></pre><p>如果第三方IP ID值增加了1，说明在此期间没有向外发送数据包，则目标主机端口关闭；如果增加了2，说明再次期间第三方主机向外发送了数据包，则目标主机端口开放</p><pre><code>Nmap -Pn -p- -sI A B</code></pre><p>使用sI参数指定A作为第三方主机，然后对B进行扫描</p><h3 id="8-指定扫描端口"><a href="#8-指定扫描端口" class="headerlink" title="8. 指定扫描端口"></a>8. 指定扫描端口</h3><pre><code>1. 扫描常见的100个端口    nmap -F [target]2. 指定某一个端口    nmap -p [port] [target]3. 使用名字来指定扫描端口    nmap -p [port name(s)] [target]4. 使用协议指定扫描端口    nmap -p U:[UDP ports]，T:[TCP ports] [target]5. 扫描所有端口    nmap -p * [target]6. 扫描常用端口    nmap --top-ports [number] [target]</code></pre><hr><h2 id="0x04-系统与服务检测"><a href="#0x04-系统与服务检测" class="headerlink" title="0x04 系统与服务检测"></a>0x04 系统与服务检测</h2><h3 id="1-操作系统判断"><a href="#1-操作系统判断" class="headerlink" title="1. 操作系统判断"></a>1. 操作系统判断</h3><p>通过向目标发送探针，然后根据目标的回应来猜测系统，进行识别的探针和响应对应的关系保存在Nmap-os-db文件中</p><p><em>nmap -O [target]</em></p><p>猜测最接近目标的匹配操作系统类型</p><pre><code>nmap -sV -F --fuzzy --oscan-guess 目标IP</code></pre><h3 id="2-服务及版本发现"><a href="#2-服务及版本发现" class="headerlink" title="2. 服务及版本发现"></a>2. 服务及版本发现</h3><p>版本检测程序会将探测结果与<code>Nmap-service-probes</code>数据库中的内容进行比较，如果匹配成功，就可以确认目标端口运行的具体服务</p><pre><code>-sV(版本探测)--allports(不为版本探测排除任何端口)--version-intensity &lt;intensity&gt; (设置版本扫描强度)--version-light(打开轻量级模式，扫描速度加快)--version-all(尝试每个探测)--version-trace(跟踪版本扫描活动)-sR(RPC扫描)</code></pre><hr><h2 id="0x05-高级技术及防御"><a href="#0x05-高级技术及防御" class="headerlink" title="0x05 高级技术及防御"></a>0x05 高级技术及防御</h2><h3 id="1-Nmap-伪装技术"><a href="#1-Nmap-伪装技术" class="headerlink" title="1. Nmap 伪装技术"></a>1. Nmap 伪装技术</h3><p><strong>(1) Nmap -f 目标</strong></p><p>对 Nmap 发送的探测数据包进行<strong>分段</strong>(数据包含有 <code>Fragmentedd IP protocol</code>标识)，使目标网络防御机制例如包过滤，防火墙等在对数据包进行检测时更加困难</p><p><strong>(2) -mtu (使用制定的MTU)</strong></p><pre><code>Nmap --mtu 目标</code></pre><p><strong>(3) -D (decoy1[,decoy2][,ME],…)</strong></p><p>使用诱饵主机隐蔽扫描，逗号分隔每个诱饵IP地址，自己的IP地址可以用ME选项</p><p><strong>(4) –source-port (portnumber)；-g (portnumber) </strong></p><p>源端口欺骗，Nmap可以利用被目标检测机制遗忘的端口发送数据</p><p><strong>(5) –data-length [number]</strong></p><p>发送报文时附加随机数据，避免内容为空的报文被目标网络检测机制发现</p><p><strong>(6) –ttl [value]</strong></p><p>设置IP time-to-live域，指定特定的ttl</p><p><strong>(7) –spoof-mac [mac address，prefix，or vendor name]</strong></p><p>人为指定Nmap在扫描时发送以太网帧的MAC地址</p><h3 id="2-系统扫描防范"><a href="#2-系统扫描防范" class="headerlink" title="2. 系统扫描防范"></a>2. 系统扫描防范</h3><p>补丁，安装更新，防火墙，蜜罐技术等网络安全防护</p><p><strong>(1) Morph</strong></p><p>可将操作系统模拟为其他类型的操作系统，改变原来操作系统对TCP,UDP,ICMP数据包的响应</p><p><strong>(2) IP Personality</strong></p><p>利用iptables来处理TCP和UDP的请求，隐藏操作系统</p><h3 id="3-格式化输出"><a href="#3-格式化输出" class="headerlink" title="3. 格式化输出"></a>3. 格式化输出</h3><p><strong>(1) 文本文件</strong></p><p><em>语法：nmap -oN [#.txt] [target]</em></p><p><strong>(2) xml 格式</strong></p><p><em>语法：nmap -oX [#.xml] [target]</em></p><p><strong>(3) grep 文件</strong></p><p><em>语法：nmap -oX [#.grep] [target]</em></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文参考&lt;a href=&quot;http://www.tup.tsinghua.edu.cn/bookscenter/book_07230301.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;诸神之眼&lt;/a&gt;，由浅入深剖析Nmap进行网络安全审计技术，涉及活跃主机发现，端口扫描，远程操作系统和服务检测等技术&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="0x02 安全技术" scheme="http://yoursite.com/categories/0x02-%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/"/>
    
      <category term="安全工具" scheme="http://yoursite.com/categories/0x02-%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/%E5%AE%89%E5%85%A8%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="SecTools" scheme="http://yoursite.com/tags/SecTools/"/>
    
      <category term="Nmap" scheme="http://yoursite.com/tags/Nmap/"/>
    
  </entry>
  
  <entry>
    <title>Metasploit渗透笔记</title>
    <link href="http://yoursite.com/2018/08/29/Metasploit%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/08/29/Metasploit渗透笔记/</id>
    <published>2018-08-29T03:46:11.000Z</published>
    <updated>2018-09-03T13:28:29.347Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://www.metasploit.com/" target="_blank" rel="noopener">Metasploit</a>—世界上最新流行的渗透测试框架之一，本文参考<a href="https://www.offensive-security.com/metasploit-unleashed/" target="_blank" rel="noopener">Offensive-Security-metasploit</a> 及 <a href="https://github.com/Urinx/Books/blob/master/metasploit/Metasploit%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%8C%87%E5%8D%97.pdf" target="_blank" rel="noopener">The Penetration Tester’s Guide</a>对Metasploit框架相关技术及渗透测试流程进行分析总结，然后通过实践体验Metasploit的魅力</p></blockquote><a id="more"></a><hr><h2 id="0x01-Metasploit基础"><a href="#0x01-Metasploit基础" class="headerlink" title="0x01 Metasploit基础"></a>0x01 Metasploit基础</h2><h3 id="1-专业术语"><a href="#1-专业术语" class="headerlink" title="1. 专业术语"></a>1. 专业术语</h3><p><strong>(1) 渗透攻击(Exploit)</strong></p><p>由攻击者或渗透测试者利用一个系统，应用或服务中的安全漏洞，所进行的攻击行为</p><p><strong>(2) 攻击载荷(Payload)</strong></p><p>目标系统被渗透攻击之后期望去执行的代码，在MSF中可以自由选择，传送和植入</p><p><strong>(3) Shellcode</strong></p><p>在渗透攻击时作为攻击载荷运行的一组机器指令，常用汇编语言编写</p><p><strong>(4) 模块(Moudle)</strong></p><p>指Metasploit框架中所使用的一段软件代码组件</p><p><strong>(5) 监听器(Listener)</strong></p><p>Metasploit中用来等待连入网络连接的组件</p><h3 id="2-用户接口"><a href="#2-用户接口" class="headerlink" title="2. 用户接口"></a>2. 用户接口</h3><p><strong>(1) MSF终端</strong></p><p>一种用户友好的模式提供交互方式，用于访问软件所有的功能特性</p><pre><code>msfconsole</code></pre><p><strong>(2) MSF命令行 </strong></p><p><code>msfcli</code>考虑用脚本处理和玉其他命令行工具的互操作性，新版本不再支持，使用<code>msfconsole -x</code>代替</p><p><strong>(3) Armitage</strong></p><p><code>armitage</code>组件是一个完全交互式的图形化用户接口</p><pre><code>armitage</code></pre><h3 id="3-功能程序"><a href="#3-功能程序" class="headerlink" title="3. 功能程序"></a>3. 功能程序</h3><p><strong>(1) MSF攻击载荷生成器</strong></p><p>能够生成<code>shellcode</code>，可执行代码，可以在框架软件之外的渗透代码中进行使用，<code>msfpayload</code>已弃用，由<code>msfvenom</code>工具代替</p><p><strong>(2) MSF编码器</strong></p><p>通过对原始攻击载荷进行编码，来避免坏字符，以及逃避杀毒软件和IDS的检测，<code>msfencode</code>由<code>msfvenom</code>取代</p><p><strong>(3) Nasm Shell</strong></p><p><code>nasm_shell.rb</code>功能程序可对给定的汇编命令找出其opcode操作码</p><hr><h2 id="0x02-情报收集"><a href="#0x02-情报收集" class="headerlink" title="0x02 情报收集"></a>0x02 情报收集</h2><h3 id="1-被动信息收集"><a href="#1-被动信息收集" class="headerlink" title="1. 被动信息收集"></a>1. 被动信息收集</h3><p>在不接触目标系统的情况下挖掘目标信息，<strong>公开情报渠道(OSINT)</strong>是一类对公开和已知信息来检索和筛选就可以获取到的目标情报集合</p><p><strong>(1) whois 查询</strong></p><pre><code>msf &gt; whois 域名</code></pre><p><strong>(2) Netcraft</strong></p><p><a href="https://searchdns.netcraft.com/" target="_blank" rel="noopener">Netcraft</a>一个网页界面的工具，可以发现承载某个特定网站的服务器IP地址</p><pre><code>msf &gt; whois IP</code></pre><p><strong>(3) NSLookup</strong></p><p>可以用于获取关于服务器的附加信息</p><pre><code>root@kali:~# nslookup&gt; 域名</code></pre><h3 id="2-主动信息收集"><a href="#2-主动信息收集" class="headerlink" title="2. 主动信息收集"></a>2. 主动信息收集</h3><p>与目标系统直接交互，从而对其进行更深入的了解；注意可能被IDS或IPS发现</p><p><strong>(1) Nmap 端口扫描</strong></p><pre><code>root@kali:~# nmap -sS -Pn IP</code></pre><p><code>-sS</code>选项用于执行一次隐秘的TCP扫描，以确定某个特定的TCP端口是否开放；</p><p><code>-Pn</code>选项告诉nmap不使用ping命令预先判断主机是否存活，默认所有主机处于存活状态，大多数网络不允许ping命令的ICMP通行，避免漏掉许多实际存活的主机</p><p><strong>(2) 在Metasploit中使用数据库</strong></p><p>Metasploit 支持 MySQL，PostgreSQL 和 SQLite3 数据库</p><p>使用init.d脚本启动数据库子系统</p><pre><code>root@kali~# /etc/init.d/postgresql start</code></pre><p>Metasploit 框架连接数据库实例</p><pre><code>msf &gt; db_connect postgres:toor@127.0.0.1/msfbook</code></pre><p>PostgreSQL默认用户名为postgres，口令为toor，使用msfbook作为数据库名</p><p>数据库连接状态查看</p><pre><code>msf &gt; db_status</code></pre><p>A. <strong> 将Nmap输出的结果导入Metasploit</strong></p><p>使用<code>-oX</code>选项进行扫描，生成名为<code>subnet.xml</code>的文件</p><pre><code>nmap -Pn -sS -A -oX submet 192.168.1.0/24</code></pre><p>使用<code>db_import</code>命令将文件导入到数据库中；完毕后，可使用<code>db_hosts</code>命令合适导入的结果(显示数据库中所有已保存的主机信息)</p><pre><code>msf &gt; db_connect postgres:passwd@127.0.0.1/msf3msf &gt; db_import sbumet.xmlmsf &gt; hosts -c address</code></pre><p>B. <strong>高级 Nmap 技巧: TCP 空闲扫描</strong></p><p>TCP 空闲扫描：冒充网络上另一台主机的IP地址，对目标进行隐秘的扫描；可使用Meatsploit框架中的<em>scanner/ip/ipidseq</em>模块，寻找满足TCP空闲扫描要求的空闲主机</p><pre><code>msf &gt; use auxiliary/scanner/ip/ipidseqmsf auxiliary(ipidseq) &gt; show options</code></pre><p>列表显示了执行<em>ipidseq</em>扫描所需的所有参数；<code>RHOST</code>-此参数可使用IP地址段，CIDR地址快，逗号分隔的多个CIDR地址块；<code>THREAD</code>-此参数设定扫描线程数，默认为1，增加参数值可提高扫描速度，降低参数值可减少网络上的数据流量</p><p>设定好参数并执行扫描模块</p><pre><code>msf auxiliary(ipidseq) &gt; set RHOSTS 192.168.1.0/24RHOSTS =&gt; 192.168.1.0/24msf auxiliary(ipidseq) &gt; set THREADS 50THREADS =&gt; 50msf auxiliary(ipidseq) &gt; run</code></pre><p>尝试在nmap中使用-sI选项指定特定IP作为空闲主机(<code>Incremental</code>)对目标主机进行扫描</p><pre><code>msf auxiliary(ipidseq) &gt; nmap -PN -sI 空闲IP 目标IP</code></pre><p>C. <strong> 在 MSF 终端中运行 Nmap</strong></p><p>连接到数据库</p><pre><code>msf &gt; db_connect postgres:passwd@127.0.0.1/msf3</code></pre><p>输入<code>db_nmap</code>命令，在MSF终端中运行nmap，并自动将nmap结果存储在数据库中</p><pre><code>msf &gt; db_nmap -sS -A 192.168.1.0/24</code></pre><p>执行 <code>db_services</code> 命令查看数据库中的关于系统上运行服务的扫描结果</p><pre><code>msf &gt; services</code></pre><p><strong>(3) 使用Metasploit进行端口扫描</strong></p><p>查看Metasploit框架中提供的端口扫描工具</p><pre><code>msf &gt; search portscan</code></pre><p>使用Metasploit的SYN端口扫描器对单个主机进行一次简单扫描</p><pre><code>msf &gt; use scanner/portscan/synmsf auxiliary(syn) &gt; set RHOSTS IPRHOSTS =&gt; IPmsf auxiliary(syn) &gt; set THREADS 50THREADS =&gt; 50</code></pre><h3 id="3-针对性扫描"><a href="#3-针对性扫描" class="headerlink" title="3. 针对性扫描"></a>3. 针对性扫描</h3><p><strong>(1) 服务器消息块协议扫描</strong></p><p>利用<code>smb_version</code>模块遍历一个网络，获取Windows系统的版本号</p><pre><code>msf &gt; use scanner/smb/smb_versionmsf auxiliary(scanner/smb/smb_version) &gt; show optionsModule options (auxiliary/scanner/smb/smb_version):   Name       Current Setting  Required  Description   -----------------------------------------------------------------------------------   RHOSTS                      yes       The target address range or CIDR identifier   SMBDomain  .                no        The Windows domain to use for authentication   SMBPass                     no        The password for the specified username   SMBUser                     no        The username to authenticate as   THREADS    1                yes       The number of concurrent threadsmsf auxiliary(scanner/smb/smb_version) &gt; set RHOSTS IPRHOSTS =&gt; IPmsf auxiliary(scanner/smb/smb_version) &gt; run</code></pre><p>可使用 <code>hosts</code> 命令查看数据库中保存的结果</p><pre><code>msf auxiliary(scanner/smb/smb_version) &gt; hosts</code></pre><p><strong>(2) 搜寻配置不当的Microsoft SQL Server</strong></p><p>配置不当的MS SQL通常为进入目标系统的第一个后门，容易被忽略；使用<code>mssql_ping</code>对UDP端口1434进行查询，获取随机的TCP端口(1433)</p><pre><code>msf &gt; use scanner/mssql/mssql_pingmsf auxiliary(scanner/mssql/mssql_ping) &gt; show optionsModule options (auxiliary/scanner/mssql/mssql_ping):   Name                 Current Setting  Required  Description   ----                 ---------------  --------  -----------   PASSWORD                              no        The password for the specified username   RHOSTS                                yes       The target address range or CIDR identifier   TDSENCRYPTION        false            yes       Use TLS/SSL for TDS data &quot;Force Encryption&quot;   THREADS              1                yes       The number of concurrent threads   USERNAME             sa               no        The username to authenticate as   USE_WINDOWS_AUTHENT  false            yes       Use windows authentification (requires DOMAIN option set)msf auxiliary(scanner/mssql/mssql_ping) &gt; set RHOSTS 192.168.1.0/24RHOSTS =&gt; 192.168.1.0/24msf auxiliary(scanner/mssql/mssql_ping) &gt; set THREADS 255THREADS =&gt; 255msf auxiliary(scanner/mssql/mssql_ping) &gt; run</code></pre><p><strong>(3) SSH 服务器扫描</strong></p><p>许多SSH实现版本中均被发现了安全漏洞，使用Metasploit框架的 <code>ssh_version</code> 模块来识别目标服务器上运行的SSH版本</p><pre><code>msf &gt; use scanner/ssh/ssh_versionmsf auxiliary(scanner/ssh/ssh_version) &gt; set THREADS 50THREADS =&gt; 50msf auxiliary(scanner/ssh/ssh_version) &gt; run </code></pre><p><strong>(4) FTP 扫描</strong></p><p>FTP服务器是进入一个目标网络最便捷的途径，使用Metasploit框架中<code>ftp_version</code>模块可以对 windows 虚拟机FTP服务器进行扫描</p><pre><code>msf &gt; use scanner/ftp/ftp_versionmsf auxiliary(scanner/ftp/ftp_version) &gt; show optionsModule options (auxiliary/scanner/ftp/ftp_version):   Name     Current Setting      Required  Description   ----     ---------------      --------  -----------   FTPPASS  mozilla@example.com  no        The password for the specified username   FTPUSER  anonymous            no        The username to authenticate as   RHOSTS                        yes       The target address range or CIDR identifier   RPORT    21                   yes       The target port (TCP)   THREADS  1                    yes       The number of concurrent threadsmsf auxiliary(scanner/ftp/ftp_version) &gt; set RHOSTS ipRHOSTS =&gt; ipmsf auxiliary(scanner/ftp/ftp_version) &gt; set THREADS 50THREADS =&gt; 50msf auxiliary(scanner/ftp/ftp_version) &gt; run</code></pre><p>若成功识别出FTP服务器，可用scanner/ftp/anonymous模块检查FTP服务器是否允许匿名登录</p><pre><code>msf &gt; use auxiliary/scanner/ftp/anonymousmsf auxiliary(scanner/ftp/anonymous) &gt; set RHOSTS 192.168.1.0/24RHOSTS =&gt; 192.168.1.0/24msf auxiliary(scanner/ftp/anonymous) &gt; set THREADS 50THREADS =&gt; 50msf auxiliary(scanner/ftp/anonymous) &gt; run</code></pre><p><strong>(5) SNMP 扫描</strong></p><p>SNMP通常用于网络设备中，用来报告带宽利用率，冲突率等，也可包含在OS中，用来提供类似CPU利用率，空闲内存以及系统状态信息等</p><p>Metasploit 框架中包含内置辅助模块<code>scanner/snmp/snmp_enum</code>，为SNMP扫描专门设计；利用<code>scanner/snmp/snmp_login</code>模块可尝试对一个IP或一组IP使用字典猜解SNMP团体字符串</p><pre><code>msf &gt; use scanner/snmp/snmp_loginmsf auxiliary(scanner/snmp/snmp_login) &gt; set RHOSTS 192.168.1.0/24RHOSTS =&gt; 192.168.139.0/24msf auxiliary(scanner/snmp/snmp_login) &gt; set THREADS 50THREADS =&gt; 50msf auxiliary(scanner/snmp/snmp_login) &gt; run</code></pre><hr><h2 id="0x03-漏洞扫描"><a href="#0x03-漏洞扫描" class="headerlink" title="0x03 漏洞扫描"></a>0x03 漏洞扫描</h2><h3 id="1-基本漏洞扫描"><a href="#1-基本漏洞扫描" class="headerlink" title="1. 基本漏洞扫描"></a>1. 基本漏洞扫描</h3><p><strong>旗标攫取：</strong>连接到一个远程网络服务，并读取该服务独特的标识</p><p>使用<code>netcat</code>获取目标IP的旗标</p><pre><code>root@kali:~# nc IP port</code></pre><h3 id="2-使用-NeXpose-进行扫描"><a href="#2-使用-NeXpose-进行扫描" class="headerlink" title="2. 使用 NeXpose 进行扫描"></a>2. 使用 NeXpose 进行扫描</h3><p>通过对网络进行扫描，查找出网络上正在运行的设备，最终识别出操作系统和应用程序上的安全漏洞</p><h3 id="3-使用-Nessus-进行扫描"><a href="#3-使用-Nessus-进行扫描" class="headerlink" title="3. 使用 Nessus 进行扫描"></a>3. 使用 Nessus 进行扫描</h3><p>Nessus 漏洞扫描器是世界上使用最广泛的漏洞扫描器之一</p><h3 id="4-专用漏洞扫描器"><a href="#4-专用漏洞扫描器" class="headerlink" title="4. 专用漏洞扫描器"></a>4. 专用漏洞扫描器</h3><p><strong>(1) 验证 SMB 登录</strong></p><p><strong>(2) 扫描开放的 VNC 空口令</strong></p><p><strong>(3) 扫描开放的 X11 服务器</strong></p><h3 id="5-自动化攻击"><a href="#5-自动化攻击" class="headerlink" title="5. 自动化攻击"></a>5. 自动化攻击</h3><hr><h2 id="0x04-渗透攻击"><a href="#0x04-渗透攻击" class="headerlink" title="0x04 渗透攻击"></a>0x04 渗透攻击</h2><h3 id="1-渗透攻击基础"><a href="#1-渗透攻击基础" class="headerlink" title="1. 渗透攻击基础"></a>1. 渗透攻击基础</h3><p><strong>(1) msf &gt; show exploits</strong></p><p>显示 Metasploit 框架中所有可用的<strong>渗透攻击模块</strong>，在 MSF终端中，针对渗透测试中发现的安全漏洞来实施相应的渗透攻击</p><p><strong>(2) msf &gt; show auxiliary</strong></p><p>显示所有的<strong>辅助模块</strong>及其用途，可以是扫描器，拒绝服务攻击工具，Fuzz测试器，以及其他类型工具</p><p><strong>(3) msf &gt; show options</strong></p><p>列出模块所需的各种参数，未选择模块时，显示所有的全局参数</p><p><strong>back 命令：</strong>返回 Metasploit 的上一个状态 </p><p><strong>search 命令：</strong>查找某个特定的渗透攻击，辅助或者攻击在和模块</p><p><strong>use 命令：</strong>加载模块，此时终端中输入的命令在此攻击模块环境中运行</p><p><strong>show options：</strong>在已选择模块的命令下，显示模块所需的参数</p><p><strong>(4) msf &gt; show payloads</strong></p><p>将与当前模块兼容的攻击载荷显示出来</p><p><strong>serach 模块 —&gt; use 模块 —&gt; show payloads —&gt; set payload 攻击载荷 —&gt; show options —&gt; payload 利用</strong></p><p><strong>(5) msf &gt; show targets</strong></p><p>渗透攻击模块可列出受到漏洞影响目标系统的类型</p><p><strong>use exploit —&gt; show targets</strong></p><p><strong>(6) info</strong></p><p><strong>exploit &gt; info / info exploit：</strong>显示模块的详细信息，参数说明以及所有可用的目标操作系统</p><p><strong>(7) set 和 unset</strong></p><p>参数状态：设置(<strong>set</strong>)或未设置(<strong>unset</strong>)，有些参数被标记为必填项(required)，使用时需经过手工设置并处于启用状态</p><p><strong>set</strong> 命令：对某个参数进行设置(同时启用该参数)；<strong>unset</strong> 命令：禁用相关参数</p><p><strong>(8) setg 和 unsetg</strong></p><p>对全局参数进行设置或清楚，对常用且很少改变的参数设置方便</p><p><strong>(9) save</strong></p><p>使用setg命令对全局参数进行设置胡，可使用save命令将当前设置值保存下来，下次启用依然使用</p><p>设置值保存在<code>/root/.msf4/config</code>，将此文件删除或移动，可恢复原始设置</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.metasploit.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Metasploit&lt;/a&gt;—世界上最新流行的渗透测试框架之一，本文参考&lt;a href=&quot;https://www.offensive-security.com/metasploit-unleashed/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Offensive-Security-metasploit&lt;/a&gt; 及 &lt;a href=&quot;https://github.com/Urinx/Books/blob/master/metasploit/Metasploit%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%8C%87%E5%8D%97.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;The Penetration Tester’s Guide&lt;/a&gt;对Metasploit框架相关技术及渗透测试流程进行分析总结，然后通过实践体验Metasploit的魅力&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="0x02 安全技术" scheme="http://yoursite.com/categories/0x02-%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/"/>
    
      <category term="渗透测试" scheme="http://yoursite.com/categories/0x02-%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="Pentest" scheme="http://yoursite.com/tags/Pentest/"/>
    
      <category term="Metasploit" scheme="http://yoursite.com/tags/Metasploit/"/>
    
  </entry>
  
  <entry>
    <title>安全与计算机工具导航</title>
    <link href="http://yoursite.com/2018/08/24/%E5%AE%89%E5%85%A8%E4%B8%8E%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%B7%A5%E5%85%B7%E5%AF%BC%E8%88%AA/"/>
    <id>http://yoursite.com/2018/08/24/安全与计算机工具导航/</id>
    <published>2018-08-24T03:16:55.000Z</published>
    <updated>2018-08-24T14:46:13.549Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>参考网络上的资源，整理的一些安全与计算机类<a href="https://firehacker.top/tools/" target="_blank" rel="noopener">Tools</a>，SecTools 涉及渗透平台及框架，漏洞扫描与利用，信息收集，网络分析，密码攻击，逆向工程，安全防御等；计算机类工具包括主流代码编辑器/编译器，问答社区，开源社区，博客平台，分布式系统，深度学习框架等</p></blockquote><a id="more"></a><hr><h2 id="SecTools"><a href="#SecTools" class="headerlink" title="SecTools"></a>SecTools</h2><h3 id="系统平台"><a href="#系统平台" class="headerlink" title="系统平台"></a>系统平台</h3><ul><li><p><a href="https://www.kali.org/" target="_blank" rel="noopener">Kali</a> <em>基于Debian的Linux发行版，专业的数字取证与渗透测试平台</em></p></li><li><p><a href="https://backbox.org/linux" target="_blank" rel="noopener">BackBox</a> <em>基于Ubuntu的Linux发行版的渗透测试和安全评估平台</em></p></li><li><p><a href="https://www.pentoo.ch/" target="_blank" rel="noopener">Pentoo</a> <em>一个为Live CD与Live USB设计的进行渗透测试与安全评估的Linux发行版</em></p></li><li><p><a href="https://archstrike.org/" target="_blank" rel="noopener">ArchStrike</a> <em>适用于安全专业人员和爱好者的Arch Linux存储库</em></p></li><li><p><a href="https://blackarch.org/" target="_blank" rel="noopener">BlackArch</a> <em>一款基于Arch的Linux发行版，用于系统渗透测试及安全研究的平台</em></p></li><li><p><a href="https://pentestbox.org/zh/" target="_blank" rel="noopener">PentestBox</a> <em>一款Windows平台下预配置的便携式开源渗透测试环境</em></p></li></ul><h3 id="漏洞扫描"><a href="#漏洞扫描" class="headerlink" title="漏洞扫描"></a>漏洞扫描</h3><ul><li><p><a href="https://www.tenable.com/products/nessus/nessus-professional" target="_blank" rel="noopener">Nessus</a> <em>世界上最流行的漏洞扫描程序之一</em></p></li><li><p><a href="http://www.openvas.org/" target="_blank" rel="noopener">OpenVAS</a> <em>一个提供漏洞扫描和漏洞管理的多种服务和工具的软件框架</em></p></li><li><p><a href="https://www.rapid7.com/products/nexpose/" target="_blank" rel="noopener">Nexpose</a> <em>一款漏洞扫描程序，支持漏洞发现，检测，验证，风险分类，影响分析，报告和缓解</em></p></li></ul><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><ul><li><p><a href="https://www.metasploit.com/" target="_blank" rel="noopener">Metasploit</a> <em>世界上最常用的渗透测试框架之一</em></p></li><li><p><a href="http://exploitpack.com/" target="_blank" rel="noopener">ExploitPack</a> <em>一个用于执行专业渗透测试的集成环境</em></p></li><li><p><a href="https://www.offensive-security.com/metasploit-unleashed/armitage/" target="_blank" rel="noopener">Armitage</a> <em>Metasploit Project的图形网络攻击管理工具，可以对目标进行可视化并推荐漏洞利用</em></p></li><li><p><a href="https://beefproject.com/" target="_blank" rel="noopener">BeEF</a> <em>The Browser Exploitation Framework，一种专注于Web浏览器的渗透测试工具</em></p></li><li><p><a href="https://github.com/byt3bl33d3r/CrackMapExec/wiki" target="_blank" rel="noopener">CME</a> <em>CrackMapExe是一种漏洞利用工具，可帮助自动评估大型Active Directory网络的安全性</em></p></li></ul><h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><ul><li><p><a href="https://nmap.org/" target="_blank" rel="noopener">Nmap</a> <em>一个免费开源的用于网络发现和安全审计的网络映射实用程序</em></p></li><li><p><a href="https://nmap.org/zenmap/" target="_blank" rel="noopener">Zenmap</a> <em>官方的Nmap Security Scanner GUI，一个多平台免费和开源应用程序</em></p></li><li><p><a href="https://www.paterva.com/web7/buy/maltego-clients/maltego-ce.php" target="_blank" rel="noopener">Maltego</a> <em>一种交互式数据挖掘工具，可以为链接分析提供有向图，用于在线调查</em></p></li><li><p><a href="http://lcamtuf.coredump.cx/p0f3/#" target="_blank" rel="noopener">P0f</a> <em>一个多功能工具，用于被动式获取操作系统指纹，以识别远程主机操作系统</em></p></li><li><p><a href="https://tools.kali.org/information-gathering/dmitry" target="_blank" rel="noopener">DMitry</a> <em>Deepmagic，一款是用C编写的UNIX /（GNU）Linux命令行信息收集工具</em></p></li><li><p><a href="https://www.shodan.io/" target="_blank" rel="noopener">Shodan</a> <em>强大的搜索引擎，可使用各种过滤器连接到互联网的特定类型的互联网设备</em></p></li><li><p><a href="https://www.zoomeye.org/" target="_blank" rel="noopener">ZoomEye</a> <em>钟馗之眼，知道创宇开发的一款强大的检索网络空间节点的搜索引擎</em></p></li><li><p><a href="https://censys.io/" target="_blank" rel="noopener">Censys</a> <em>一个平台，可帮助信息安全从业者发现，监控和分析可从Internet访问的设备</em></p></li><li><p><a href="https://www.torproject.org/index.html.en" target="_blank" rel="noopener">Tor Browser</a> <em>Tor(The Onion Router)项目的旗舰产品，一款可实现匿名通信的浏览器，慎用</em></p></li></ul><h3 id="网络分析"><a href="#网络分析" class="headerlink" title="网络分析"></a>网络分析</h3><ul><li><p><a href="https://www.wireshark.org/" target="_blank" rel="noopener">Wireshark</a> <em>一款世界上最广泛使用的免费开源的网络数据包分析工具</em></p></li><li><p><a href="https://www.tcpdump.org/" target="_blank" rel="noopener">Tcpdump</a> <em>一个功能强大的命令行数据包分析器</em></p></li><li><p><a href="https://tools.kali.org/information-gathering/dnsenum" target="_blank" rel="noopener">DNSenum </a> <em>一款强大的域名信息收集工具</em></p></li><li><p><a href="https://network-tools.com/" target="_blank" rel="noopener">Net Tools</a> <em>网络工具集，包括Expres，Ping，Trace，Whois等多种工具</em></p></li><li><p><a href="https://github.com/hatRiot/zarp" target="_blank" rel="noopener">Zarp</a> <em>一种以利用本地网络为中心的网络攻击工具</em></p></li><li><p><a href="https://www.monkey.org/~dugsong/dsniff/" target="_blank" rel="noopener">Dsniff</a> <em>一系列用于网络审计和渗透测试的工具</em></p></li><li><p><a href="https://scapy.net/" target="_blank" rel="noopener">Scapy</a> <em>一个功能强大的交互式数据包操作程序</em></p></li><li><p><a href="http://netcat.sourceforge.net/" target="_blank" rel="noopener">Netcat</a> <em>一款网络实用程序，使用TCP/IP协议跨网络连接读取和写入数据</em></p></li><li><p><a href="https://github.com/nabla-c0d3/sslyze" target="_blank" rel="noopener">SSLyze</a> <em>一个Python库和一个CLI工具，可以通过连接来分析服务器的SSL配置</em></p></li><li><p><a href="https://github.com/cisco/joy" target="_blank" rel="noopener">Cisco Joy</a> <em>一款用于用于从实时网络流量或数据包捕获（pcap）文件中提取数据特征的工具</em></p></li></ul><h3 id="密码攻击"><a href="#密码攻击" class="headerlink" title="密码攻击"></a>密码攻击</h3><ul><li><p><a href="http://www.openwall.com/john/" target="_blank" rel="noopener">John the Ripper</a> <em>一款跨平台快速密码破解程序</em></p></li><li><p><a href="https://github.com/vanhauser-thc/thc-hydra" target="_blank" rel="noopener">Hydra</a> <em>一款可以支持多种协议和并行连接的密码破解工具</em></p></li><li><p><a href="https://github.com/gentilkiwi/mimikatz" target="_blank" rel="noopener">Mimikatz</a> <em>一款windows平台下密码破解与抓取的工具</em></p></li><li><p><a href="https://digi.ninja/projects/cewl.php" target="_blank" rel="noopener">Cewl</a> <em>一个ruby应用程序开发的自定义字典列表生成器</em></p></li><li><p><a href="https://sourceforge.net/projects/crunch-wordlist/" target="_blank" rel="noopener">Crunch</a> <em>一个wordlist生成器，可以在其中指定标准字符集</em></p></li><li><p><a href="https://hashcat.net/hashcat/" target="_blank" rel="noopener">Hashcat</a> <em>高级密码恢复工具，支持多种哈希算法破解</em></p></li></ul><h3 id="无线网络"><a href="#无线网络" class="headerlink" title="无线网络"></a>无线网络</h3><ul><li><p><a href="https://www.aircrack-ng.org/" target="_blank" rel="noopener">Aircrack-ng</a> <em>一款评估WiFi网络安全性的一整套工具集</em></p></li><li><p><a href="https://www.kismetwireless.net/" target="_blank" rel="noopener">Kismet</a> <em>一款无线网络探测器和入侵检测系统</em></p></li><li><p><a href="https://github.com/derv82/wifite2" target="_blank" rel="noopener">Wifite</a> <em>一种自动化无线攻击与审计工具</em></p></li><li><p><a href="https://github.com/t6x/reaver-wps-fork-t6x" target="_blank" rel="noopener">Reaver</a> <em>一款针对WPS的强大而实用的攻击工具</em></p></li><li><p><a href="https://github.com/nfc-tools/mfoc" target="_blank" rel="noopener">Mfoc</a> <em>Nthemba的“离线嵌套”攻击的开源程序</em></p></li><li><p><a href="https://wifiphisher.org/" target="_blank" rel="noopener">Wifiphisher</a> <em>一款针对WiFi的自动化钓鱼攻击工具</em></p></li></ul><h3 id="逆向工程"><a href="#逆向工程" class="headerlink" title="逆向工程"></a>逆向工程</h3><ul><li><p><a href="https://www.hex-rays.com/products/ida/" target="_blank" rel="noopener">IDA Pro</a> <em>一个支持多平台的反汇编工具和调试器</em></p></li><li><p><a href="http://www.ollydbg.de/" target="_blank" rel="noopener">OllyDbg</a> <em>一个二进制代码分析的x86调试器</em></p></li><li><p><a href="https://ibotpeaches.github.io/Apktool/" target="_blank" rel="noopener">Apktool</a> <em>一款用于逆向Android apk文件的工具</em></p></li><li><p><a href="https://www.radare.org/r/index.html" target="_blank" rel="noopener">Radare2</a> <em>开源跨平台逆向工程框架</em></p></li><li><p><a href="https://github.com/joelpx/plasma" target="_blank" rel="noopener">Plasma</a><em>针对x86/ARM/MIPS的开源交互式反汇编工具</em></p></li><li><p><a href="http://www.windbg.org/" target="_blank" rel="noopener">WinDbg</a> <em>一款Microsoft Windows上的多用途调试器</em></p></li></ul><h3 id="Web-安全"><a href="#Web-安全" class="headerlink" title="Web 安全"></a>Web 安全</h3><ul><li><p><a href="https://portswigger.net/burp/" target="_blank" rel="noopener">Burpsuite</a> <em> 用于Web应用程序安全测试的集成平台</em></p></li><li><p><a href="https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project" target="_blank" rel="noopener">OWASP ZAP</a> <em>专为Web应用程序设计的渗透测试工具集</em></p></li><li><p><a href="https://wpscan.org/" target="_blank" rel="noopener">WPscan</a> <em>WordPress的黑盒漏洞扫描器</em></p></li><li><p><a href="https://cirt.net/nikto2" target="_blank" rel="noopener">Nikto</a> <em>一款Web应用程序安全扫描器</em></p></li><li><p><a href="https://github.com/andresriancho/w3af" target="_blank" rel="noopener">W3af</a> <em>Web应用程序攻击和评估框架</em></p></li><li><p><a href="http://sqlmap.org/" target="_blank" rel="noopener">SQLmap </a><em>一个开源的自动化SQL注入工具</em></p></li><li><p><a href="https://sourceforge.net/projects/paros/" target="_blank" rel="noopener">Paros</a> <em>基于Java的HTTP / HTTPS代理，用于评估Web应用程序漏洞</em></p></li><li><p><a href="https://www.getpostman.com/" target="_blank" rel="noopener">Postman</a> <em>一款功能超级强大的用于发送HTTP请求的Chrome插件</em></p></li></ul><h3 id="权限维持"><a href="#权限维持" class="headerlink" title="权限维持"></a>权限维持</h3><ul><li><p><a href="https://github.com/epinna/weevely3" target="_blank" rel="noopener">Weevely</a> <em>一个专为后期漏洞利用而设计的Web shell</em></p></li><li><p><a href="https://deadbits.github.io/Intersect-2.5/" target="_blank" rel="noopener">Intersec</a><em>一个用Python编写的后期权限利用的框架</em></p></li></ul><h3 id="防御工具"><a href="#防御工具" class="headerlink" title="防御工具"></a>防御工具</h3><ul><li><p><a href="https://www.bro.org/" target="_blank" rel="noopener">Bro</a> <em>一个免费的开源软件网络分析框</em></p></li><li><p><a href="http://dtag-dev-sec.github.io/mediator/feature/2015/03/17/concept.html" target="_blank" rel="noopener">T-Pot</a> <em>一个功能强大的开源多蜜罐平台</em></p></li><li><p><a href="https://www.snort.org/" target="_blank" rel="noopener">Snort</a> <em>一套开源的网络入侵预防与检测软件</em></p></li><li><p><a href="https://www.ossec.net/" target="_blank" rel="noopener">OSSEC</a>  <em>一款开源的多平台的入侵检测系统</em></p></li><li><p><a href="http://www.selinuxproject.org/page/Main_Page" target="_blank" rel="noopener">SELinux</a> <em>Linux内核的安全模组，提供了访问控制安全策略机制</em></p></li><li><p><a href="https://www.netfilter.org/" target="_blank" rel="noopener">Netfilter</a> <em>Linux内核中的一个软件框架，具有NAT及防火墙功能</em></p></li><li><p><a href="https://cuckoosandbox.org/" target="_blank" rel="noopener">Cuckoo</a> <em>一款流行的开源自动恶意软件分析系统</em></p></li><li><p><a href="https://github.com/mozilla/MozDef" target="_blank" rel="noopener">MozDef</a> <em>Mozilla防御平台（MozDef），可实现安全事件处理流程的自动化</em></p></li><li><p><a href="https://www.modsecurity.org/" target="_blank" rel="noopener">ModSecurity</a> <em>一种流行的开源Web应用程序防火墙</em></p></li></ul><h3 id="工具导航"><a href="#工具导航" class="headerlink" title="工具导航"></a>工具导航</h3><ul><li><p><a href="http://sectools.org/" target="_blank" rel="noopener">SecTools</a></p></li><li><p><a href="https://tools.kali.org/" target="_blank" rel="noopener">Kali Tools</a></p></li><li><p><a href="http://seclist.us/" target="_blank" rel="noopener">SecList</a></p></li><li><p><a href="https://tools.pentestbox.org/" target="_blank" rel="noopener">Pentest Box Tools</a></p></li><li><p><a href="https://www.kitploit.com/" target="_blank" rel="noopener">KitPloit</a></p></li><li><p><a href="http://www.toolswatch.org/" target="_blank" rel="noopener">ToolsWatch</a></p></li><li><p><a href="https://blackarch.org/tools.html" target="_blank" rel="noopener">Blackarch Tools</a></p></li><li><p><a href="https://www.t00ls.net/pytools.html" target="_blank" rel="noopener">T00ls Pytools</a></p></li><li><p><a href="https://tools.pediy.com/win/cryptography.htm" target="_blank" rel="noopener">看雪工具集</a></p></li><li><p><a href="https://www.shentoushi.top/network" target="_blank" rel="noopener">渗透师在线工具集</a></p></li><li><p><a href="http://wiki.beysec.com/" target="_blank" rel="noopener">BeySec 开源工具</a></p></li><li><p><a href="https://www.anquanquan.info/#tools" target="_blank" rel="noopener">安全圈 info Tools</a></p></li></ul><hr><h2 id="计算机类"><a href="#计算机类" class="headerlink" title="计算机类"></a>计算机类</h2><h3 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h3><ul><li><p><a href="https://www.vim.org/" target="_blank" rel="noopener">Vim</a> <em>编辑器之神，多模式编辑，强大的组合功能</em></p></li><li><p><a href="https://www.gnu.org/software/emacs/" target="_blank" rel="noopener">Emacs</a> <em>神之编辑器，高度可定制，强大的可扩展性</em></p></li><li><p><a href="https://notepad-plus-plus.org/" target="_blank" rel="noopener">Notepad++</a> <em>免费而优秀，支持超过50种编程，脚本，语言等</em></p></li><li><p><a href="https://atom.io/" title="Atom" target="_blank" rel="noopener">Atom</a> <em>21世纪先进的的开源免费跨平台代码编辑器</em></p></li><li><p><a href="https://code.visualstudio.com/" target="_blank" rel="noopener">VS Code</a> <em>一款免费开源的现代化轻量级多平台代码编辑器</em></p></li><li><p><a href="http://www.sublimetext.com/" target="_blank" rel="noopener">Sublime Text</a> <em>性能强大，特性炫酷，跨平台文本代码编辑器</em></p></li><li><p><a href="https://dillinger.io/" target="_blank" rel="noopener">DILLINGER</a> <em>m一款漂亮强大，支持云端，离线存储Markdown在线编辑器</em></p></li><li><p><a href="https://www.farbox.com/" target="_blank" rel="noopener">FarBox</a> <em>一个支持Markdown写作语法的博客平台，免费，支持多平台</em></p></li><li><p><a href="http://www.markdownpad.com/" target="_blank" rel="noopener">MarkdownPad</a> <em>一款全功能编辑器，windows 平台最好用的markdown编辑器之一</em></p></li></ul><h3 id="编译器"><a href="#编译器" class="headerlink" title="编译器"></a>编译器</h3><ul><li><p><a href="https://gcc.gnu.org/" target="_blank" rel="noopener">GCC</a> <em>Linux平台下最流行最好用的C语言开发工具，没有之一</em></p></li><li><p><a href="https://sourceforge.net/projects/orwelldevcpp/" target="_blank" rel="noopener">Dev-C++</a> <em>一款全功能的C和C++集成开发环境，基本可满足编程需求</em></p></li><li><p><a href="http://www.programarts.com/cfree_ch/" target="_blank" rel="noopener">C-Free</a> <em>一款轻量级支持多种编译器的专业化C/C++集成开发环境（IDE）</em></p></li><li><p><a href="https://code.visualstudio.com/" target="_blank" rel="noopener">VisualStudio</a> <em>一套完整的开发工具集，调试功能强大，但比较占用空间</em></p></li><li><p><a href="http://www.codeblocks.org/" target="_blank" rel="noopener">Code::Blocks</a> <em>开源，跨平台，免费的C，C ++和Fortran IDE</em></p></li><li><p><a href="https://www.eclipse.org/" target="_blank" rel="noopener">Eclipse</a> <em>著名的跨平台开源集成开发环境（IDE）,插件丰富，支持多种语言</em></p></li><li><p><a href="https://ipython.org/" target="_blank" rel="noopener">IPython</a> <em>一款基于Python的交互式解释器，提供更为强大的编辑和交互功能</em></p></li><li><p><a href="http://www.pydev.org/" target="_blank" rel="noopener">Pydev</a> <em>一个运行于eclipse上的开源插件，功能强大，性能高效</em></p></li><li><p><a href="https://www.jetbrains.com/pycharm/" target="_blank" rel="noopener">Pycharm</a> <em>专业的python集成开发环境，支持众多第三方web开发框架</em></p></li><li><p><a href="https://wingware.com/" target="_blank" rel="noopener">WingIDE</a> <em>高效跨平台python集成开发环境，调试功能强大，代码管理灵活(推荐)</em></p></li></ul><h3 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h3><ul><li><p><a href="http://www.sioe.cn/yingyong/yanse-rgb-16/" target="_blank" rel="noopener">颜色转换</a> <em>RGB颜色值与十六进制颜色码转换工具</em></p></li><li><p><a href="https://c.runoob.com/front-end/58" target="_blank" rel="noopener">Front-end</a> <em>在线进制转换器，支持2~36任意进制转换</em></p></li><li><p><a href="https://www.processon.com/" target="_blank" rel="noopener">ProcessOn</a>  <em>免费在线作图，支持流程图，思维导图，UML，网络拓扑图等</em></p></li><li><p><a href="https://smallpdf.com/" target="_blank" rel="noopener">Smallpdf</a> <em>解决PDF转换问题的免费在线工具(PDF，Word,JPG,PPT免费相互转换)</em></p></li><li><p><a href="https://www.onlinedoctranslator.com/zh-CN/translationform" target="_blank" rel="noopener">DocTranslator</a> <em>免费的在线文档翻译器，一键翻译，支持格式转换</em></p></li><li><p><a href="http://www.iconfont.cn/" target="_blank" rel="noopener">Iconfont</a> <em>阿里巴巴矢量图标库，功能强大，图标内容丰富</em></p></li><li><p><a href="http://fontawesome.dashgame.com/" target="_blank" rel="noopener">Font Awesome</a> <em>一套绝佳的图标字体库和CSS框架，Next默认矢量图标</em></p></li></ul><h3 id="问答社区"><a href="#问答社区" class="headerlink" title="问答社区"></a>问答社区</h3><ul><li><p><a href="https://stackexchange.com/" target="_blank" rel="noopener">StackExchange.com/</a> <em>一系列问答网站，每一个网站包含不同领域的问题</em></p></li><li><p><a href="https://www.quora.com/" target="_blank" rel="noopener">Quora</a> <em>一个在线知识市场，集合许多问题和答案，容许用户协同编辑问题和答案</em></p></li><li><p><a href="https://stackoverflow.com/" target="_blank" rel="noopener">Stackoverflow</a> <em>StackExchange最活跃的一个子站，专专注于程序设计领域的问答网站</em></p></li><li><p><a href="https://segmentfault.com/" target="_blank" rel="noopener">Segmentfault</a> <em>国内领先的开发者技术社区，为编程爱好者提供一个纯粹、高质的技术交流的平台</em></p></li></ul><h3 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h3><ul><li><p><a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a> <em>一个开源的分布式版本控制系统，善于保存文本文档，可在本地提交与管理(git版本库)</em></p></li><li><p><a href="https://subversion.apache.org/" target="_blank" rel="noopener">SVN</a> <em>一种集中式文件版本管理系统，采用分支管理系统，所有的版本信息都放在服务器上</em></p></li><li><p><a href="https://www.astro.princeton.edu/~rhl/cvs/cvs.html" target="_blank" rel="noopener">CVS</a> <em>开发源码的并发版本系统，代码统一管理，跨平台，完善的冲突解决方案</em></p></li></ul><h3 id="博客平台"><a href="#博客平台" class="headerlink" title="博客平台"></a>博客平台</h3><ul><li><p><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a> <em>快速、简洁且高效的静态博客框架，支持Markdown语法，个人推荐</em></p></li><li><p><a href="https://jekyllrb.com/" target="_blank" rel="noopener">Jekyll</a> <em>流行的静态页面生成器，简约高效，专注于内容，Github Pages默认使用</em></p></li><li><p><a href="http://gohugo.io/" target="_blank" rel="noopener">Hugo</a> <em>世界上最快的开源静态站点生成器之一，速度惊人，灵活性强，中文资料匮乏</em></p></li><li><p><a href="https://ghost.org/" target="_blank" rel="noopener">Ghost</a> <em>精简版动态博客平台，拥有admin页面，速度一般，MD支持不是很完善</em></p></li><li><p><a href="https://cn.wordpress.org/" target="_blank" rel="noopener">Wordpress</a> <em>使用最广泛的动态博客平台，功能强大，插件丰富，可定制性强，适合大型网站</em></p></li><li><p><a href="http://typecho.org/" target="_blank" rel="noopener">typecho</a> <em>一款国产轻量级博客，轻量高效，先进稳定，专注内容，追求简洁</em></p></li><li><p><a href="https://www.emlog.net/" target="_blank" rel="noopener">emlog</a> <em>国内一款基于PHP和MySQL的功能强大的博客及CMS建站系统，小巧灵活，追求细节</em></p></li><li><p><a href="https://www.leavesongs.com/THINK/about-talkbook.html" target="_blank" rel="noopener">Talkbook</a> <em>一款来自某牛的轻量级静态博客，功能完善，性能强大，部署简易，未开源，有待研究</em></p></li></ul><h3 id="托管平台"><a href="#托管平台" class="headerlink" title="托管平台"></a>托管平台</h3><ul><li><p><a href="https://github.com/" target="_blank" rel="noopener">Github</a> <em>Git + Hub，开源项目的聚集地，程序员的另类简历，私有仓库收费</em></p></li><li><p><a href="https://link.jianshu.com/?t=https://gitlab.com" target="_blank" rel="noopener">Gitlab</a> <em>开源的版本管理系，比较适合企业使用，个人可创建免费的私有仓库</em></p></li><li><p><a href="https://sourceforge.net/" target="_blank" rel="noopener">SourceForge</a> <em>曾经辉煌的开源软件平台，为全球超过3300万用户创建，协作和分发</em></p></li><li><p><a href="https://opensource.google.com/" target="_blank" rel="noopener">Opensource</a> <em>Google 的新开源网站，汇集了 2000 多个开源项目，几千万行代码</em></p></li><li><p><a href="https://bitbucket.org/" target="_blank" rel="noopener">BitBucket</a> <em>支持Mercurial和Git的代码托管网站,提供免费帐户</em></p></li><li><p><a href="http://www.springloops.io" target="_blank" rel="noopener">Springloops</a> <em>一个带有Git和SVN的版本控制软件，支持个人与团队商业使用</em></p></li><li><p><a href="https://gitee.com/" target="_blank" rel="noopener">码云</a> <em>国内最大的开源社区 OSChina 的代码托管平台，提供团队协作开发</em></p></li><li><p><a href="https://coding.net/" target="_blank" rel="noopener">Coding</a> <em>码市,国内首个一站式云端软件服务平台，云端软件开发协作平台</em></p></li><li><p><a href="https://code.aliyun.com/explore" target="_blank" rel="noopener">阿里云 Code</a> <em>依托于阿里云，注册阿里云账号可免费托管代码，精品平台</em></p></li></ul><h3 id="语言-框架"><a href="#语言-框架" class="headerlink" title="语言/框架"></a>语言/框架</h3><ul><li><p><a href="https://golang.org/" target="_blank" rel="noopener">Go</a> <em>云时代的C语言，静态强类型、编译型、并发型，具有垃圾回收功能</em></p></li><li><p><a href="https://www.r-project.org/" target="_blank" rel="noopener">R</a> <em>一种用于统计分析、绘图、数据挖掘的自由软件编程语言与操作环境</em></p></li><li><p><a href="https://www.lua.org/" target="_blank" rel="noopener">Lua</a> <em>一种嵌入式动态语言，简洁、轻量、可扩展，配置性、可扩展性强</em></p></li><li><p><a href="https://julialang.org/" target="_blank" rel="noopener">Julia</a> <em>一个面向科学计算的高性能动态高级程序设计语言，交互式，轻量级，性能综合</em></p></li><li><p><a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">Node.js</a> <em>一个能够在服务器端运行JavaScript的开放源代码、跨平台JavaScript 运行环境</em></p></li><li><p><a href="https://www.djangoproject.com/" target="_blank" rel="noopener">Django</a> <em>最有代表性的Python框架，遵循MMVC架构模式，内置模板引擎，安装简易，社区支持良好</em></p></li><li><p><a href="http://flask.pocoo.org/" target="_blank" rel="noopener">Flask</a> <em>基于WerkzeugWSGI工具箱和jinja模板，使用BSD许可证，适合开发轻量级的Web应用</em></p></li><li><p><a href="http://www.web2py.com/" target="_blank" rel="noopener">Web2py</a> <em>开源框架，允许开发者快速创建动态交互式的网站，容易使用，安全性较好</em></p></li><li><p><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html" target="_blank" rel="noopener">Spring MVC</a> <em>Java主流开发框架，提供一个用于 Web 应用程序开发的强大工具集</em></p></li><li><p><a href="https://struts.apache.org/" target="_blank" rel="noopener">Struts 2</a> <em>作为控制器(Controller)来建立模型与视图的数据交互，采用拦截器机制处理用户请求</em></p></li><li><p><a href="http://www.oracle.com/technetwork/java/javaee/javaserverfaces-139869.html" target="_blank" rel="noopener">JSF</a> <em>一种用于构建 Web 应用程序的新标准Java框架，提供以组件为中心的开发方法，简单强大</em></p></li></ul><h3 id="虚拟化-云"><a href="#虚拟化-云" class="headerlink" title="虚拟化/云"></a>虚拟化/云</h3><ul><li><p><a href="https://www.linux-kvm.org/page/Main_Page" target="_blank" rel="noopener">KVM </a> <em>集成到Linux内核的Hypervisor，Linux全虚拟化解决方案</em></p></li><li><p><a href="https://xenserver.org/" target="_blank" rel="noopener">Xen</a> <em>运行在裸机上的虚拟化管理程序(Hypervisor)，支持全虚拟化和准虚拟化</em></p></li><li><p><a href="https://www.docker.com/" target="_blank" rel="noopener">Docker</a> <em>一种容器技术，属于一种轻量级虚拟化技术</em></p></li><li><p><a href="https://www.veeam.com/blog/what-is-hyper-v-technology.html" target="_blank" rel="noopener">Hyper-V</a> <em>微软提出的一种系统管理程序虚拟化技术，能够实现桌面虚拟化</em></p></li><li><p><a href="https://www.vmware.com/" target="_blank" rel="noopener">WMware</a> <em>第一个商业化的成功的虚拟化的x86架构</em></p></li><li><p><a href="https://www.openstack.org/" target="_blank" rel="noopener">Openstack </a><em>基于linux的IaaS层解决方案(支持多种虚拟化技术）</em></p></li><li><p><a href="https://cloudstack.apache.org/" target="_blank" rel="noopener">CloudStack</a> <em>使用java开发的基于linux的IaaS层解决方案</em></p></li></ul><h3 id="类Unix系统"><a href="#类Unix系统" class="headerlink" title="类Unix系统"></a>类Unix系统</h3><ul><li><p><a href="https://www.freebsd.org/where.html" target="_blank" rel="noopener">FreeBSD</a> <em>一个自由和开放源码的类Unix操作系统，性能稳定，适合科学研究</em></p></li><li><p><a href="https://getfedora.org/zh_CN/" target="_blank" rel="noopener">Fedora</a> <em>基于Red Hat,一款由社区支持的新颖、多功能，开源自由的操作系统</em></p></li><li><p><a href="https://www.centos.org/" target="_blank" rel="noopener">CentOS</a> <em>基于Red Hat的免费Linux发行版，性能稳定高效，适合服务器</em></p></li><li><p><a href="https://www.ubuntu.com/" target="_blank" rel="noopener">Ubuntu</a> <em>一款基于Debian派生的操作系统，适合做桌面系统的Linux发行版本</em></p></li></ul><h3 id="Web服务器"><a href="#Web服务器" class="headerlink" title="Web服务器"></a>Web服务器</h3><ul><li><p><a href="http://www.apache.org/" target="_blank" rel="noopener">Apache</a> <em>源代码开放，跨平台，可移植，模块支持丰富，重量级主流Web服务器</em></p></li><li><p><a href="https://www.nginx.com/" target="_blank" rel="noopener">Nginx</a> <em>一款轻量级的Web 服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器，并发能力强</em></p></li><li><p><a href="http://tomcat.apache.org/" target="_blank" rel="noopener">Tomcat</a> <em>一个开放源代码、运行servlet和JSP Web应用软件的基于Java的W eb应用软件容器</em></p></li><li><p><a href="https://www.iis.net/" target="_blank" rel="noopener">Microsoft IIS</a> <em>一种允许在公共Intranet或Internet上发布信息的Web服务器，又称为Internet服务管理器</em></p></li><li><p><a href="https://www.lighttpd.net/" target="_blank" rel="noopener">Lighttpd</a> <em>提供一个专门针对高性能网站，安全、快速、兼容性好并且灵活的Web  Server环境，轻量级</em></p></li></ul><h3 id="分布式系统"><a href="#分布式系统" class="headerlink" title="分布式系统"></a>分布式系统</h3><ul><li><p><a href="http://hadoop.apache.org/" target="_blank" rel="noopener">Hadoop</a> <em>三大主流分布式计算系统之一，使用硬盘存储数据，适用于离线的复杂的大数据处理</em></p></li><li><p><a href="https://spark.apache.org/" target="_blank" rel="noopener">Spark</a> <em>三大主流分布式计算系统之一，使用内存来存储数据，适用于离线的快速的大数据处理</em></p></li><li><p><a href="http://storm.apache.org/" target="_blank" rel="noopener">Storm</a> <em>三大主流分布式计算系统之一，提供实时运算的特性，适用于在线实时大数据处理</em></p></li></ul><h3 id="深度学习框架"><a href="#深度学习框架" class="headerlink" title="深度学习框架"></a>深度学习框架</h3><ul><li><p><a href="https://www.tensorflow.org/" target="_blank" rel="noopener">TensorFlow</a> <em>一个使用数据流图，流行的开放源代码机器学习框架，偏重底层，代码开发要求高</em></p></li><li><p><a href="https://keras.io/" target="_blank" rel="noopener">Keras</a> <em>一个用Python编写的深度学习库，句法明晰，文档新颖，简单高效，能够快速实现实验</em></p></li><li><p><a href="http://caffe.berkeleyvision.org/" target="_blank" rel="noopener">Caffe</a> <em>老牌中的老牌，具有非常好的通用性，快速稳健，但不够灵活，可定制性差，安装依赖性强</em></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;参考网络上的资源，整理的一些安全与计算机类&lt;a href=&quot;https://firehacker.top/tools/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Tools&lt;/a&gt;，SecTools 涉及渗透平台及框架，漏洞扫描与利用，信息收集，网络分析，密码攻击，逆向工程，安全防御等；计算机类工具包括主流代码编辑器/编译器，问答社区，开源社区，博客平台，分布式系统，深度学习框架等&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="0x04 拓展梳理" scheme="http://yoursite.com/categories/0x04-%E6%8B%93%E5%B1%95%E6%A2%B3%E7%90%86/"/>
    
      <category term="资源导航" scheme="http://yoursite.com/categories/0x04-%E6%8B%93%E5%B1%95%E6%A2%B3%E7%90%86/%E8%B5%84%E6%BA%90%E5%AF%BC%E8%88%AA/"/>
    
    
  </entry>
  
  <entry>
    <title>安全站点导航</title>
    <link href="http://yoursite.com/2018/08/24/%E5%AE%89%E5%85%A8%E7%AB%99%E7%82%B9%E5%AF%BC%E8%88%AA/"/>
    <id>http://yoursite.com/2018/08/24/安全站点导航/</id>
    <published>2018-08-24T03:15:44.000Z</published>
    <updated>2018-08-24T04:16:24.579Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>参考网络上的资源，整理的一些安全<a href="https://firehacker.top/community/" target="_blank" rel="noopener">社区</a>站点，涉及常见漏洞发布平台，白帽黑客社区，安全资讯网站，以及部分新兴安全企业<br><a id="more"></a></p></blockquote><hr><h3 id="漏洞平台"><a href="#漏洞平台" class="headerlink" title="漏洞平台"></a>漏洞平台</h3><ul><li><p><a href="http://cve.mitre.org/" target="_blank" rel="noopener">CVE</a> <em>通用漏洞披露，全球漏洞列表</em></p></li><li><p><a href="http://cwe.mitre.org/" target="_blank" rel="noopener">CWE</a> <em>常见软件安全弱点列表</em></p></li><li><p><a href="https://nvd.nist.gov/" target="_blank" rel="noopener">NVD</a> <em>美国国家漏洞数据库</em></p></li></ul><ul><li><p><a href="http://www.cnnvd.org.cn/" target="_blank" rel="noopener">CNNVD</a> <em>国家信息安漏洞库</em></p></li><li><p><a href="http://www.cnvd.org.cn/" target="_blank" rel="noopener">CNVD</a> <em>国家信息安全漏洞共享平台</em></p></li><li><p><a href="https://www.exploit-db.com/" target="_blank" rel="noopener">Exploit-db</a>  <em>攻击性安全漏洞数据库</em></p></li><li><p><a href="http://www.expku.com/" target="_blank" rel="noopener">Expku</a> <em>中文漏洞利用数据库</em></p></li><li><p><a href="https://www.securityfocus.com/" target="_blank" rel="noopener">SecurityFocus</a> <em>专注安全焦点与漏洞</em></p></li><li><p><a href="https://seebug.org" target="_blank" rel="noopener">Seebug</a>  <em>洞悉漏洞，知道创宇漏洞平台</em></p></li><li><p><a href="http://www.0daybank.org/" target="_blank" rel="noopener">0dayBank</a> <em>全球互联网漏洞公开发布网站</em></p></li><li><p><a href="http://wooyun.shentoushi.top/index.php" target="_blank" rel="noopener">WooYun</a> <em>前乌云历史漏洞列表</em></p></li><li><p><a href="https://butian.360.cn/" target="_blank" rel="noopener">补天漏洞</a> <em>漏洞检测与响应平台</em></p></li><li><p><a href="https://www.vulbox.com/" target="_blank" rel="noopener">漏洞盒子</a> <em>互联网安全测试众测平台</em></p></li></ul><h3 id="白帽社区"><a href="#白帽社区" class="headerlink" title="白帽社区"></a>白帽社区</h3><ul><li><p><a href="http://www.blackhat.com/" target="_blank" rel="noopener">Blackhat</a> <em>黑帽大会，汇集全球顶级黑客</em></p></li><li><p><a href="https://www.defcon.org/" target="_blank" rel="noopener">Defcon</a> <em>全球最大计算机安全会议之一</em></p></li><li><p><a href="https://xz.aliyun.com/" target="_blank" rel="noopener">先知社区</a> <em>全球互联网前沿安全技术社区</em></p></li><li><p><a href="https://wiki.ioin.in/" target="_blank" rel="noopener">Sec-News</a><em>分享安全文章，共同成长的白帽平台</em></p></li><li><p><a href="https://www.t00ls.net/" title="低调专业的安全技术交流平台" target="_blank" rel="noopener">Tools</a> <em>低调专业的安全技术交流平台</em></p></li><li><p><a href="https://bbs.pediy.com/" target="_blank" rel="noopener">看雪论坛</a> <em>致力于安全研究的开发者社区</em></p></li><li><p><a href="http://zone.secbug.net/" target="_blank" rel="noopener">乌云社区</a> <em>白帽技术社区，内测版</em></p></li></ul><h3 id="安全资讯"><a href="#安全资讯" class="headerlink" title="安全资讯"></a>安全资讯</h3><ul><li><p><a href="https://securityintelligence.com/" target="_blank" rel="noopener">SecInte</a> <em>信息安全的分析与洞察</em></p></li><li><p><a href="https://securelist.com/" target="_blank" rel="noopener">Securelist</a> <em>网络威胁研究与报告</em></p></li><li><p><a href="http://www.freebuf.com/" title="Freebuf" target="_blank" rel="noopener">Freebuf</a>  <em>互联网安全新媒体</em></p></li><li><p><a href="https://www.secpulse.com/" target="_blank" rel="noopener">安全脉搏</a> <em>分享技术，悦享品质</em></p></li><li><p><a href="https://www.anquanke.com/" target="_blank" rel="noopener">安全客</a> <em>有思想的安全资讯平台</em></p></li><li><p><a href="https://www.aqniu.com/" target="_blank" rel="noopener">安全牛</a> <em>全面的安全信息网</em></p></li><li><p><a href="https://www.secrss.com/" target="_blank" rel="noopener">安全内参</a> <em>网络安全首席知识官</em></p></li><li><p><a href="https://www.sec-wiki.com/index.php" target="_blank" rel="noopener">SecWiki</a> <em>国内外安全资讯及技术汇聚地</em></p></li></ul><h3 id="安全博客"><a href="#安全博客" class="headerlink" title="安全博客"></a>安全博客</h3><ul><li><p><a href="http://blog.nsfocus.net/" target="_blank" rel="noopener">Nsfocus</a> <em>绿盟科技博客，巨人背后的安全专家</em></p></li><li><p><a href="http://blogs.360.cn/" title="360技术博客" target="_blank" rel="noopener">360-Blogs</a> <em>分享360技术，与安全的互联网共同成长</em></p></li><li><p><a href="http://blog.knownsec.com/" target="_blank" rel="noopener">KnownSec</a> <em>知道创宇博客，做更好更安全的互联网</em></p></li><li><p><a href="https://blog.chaitin.cn/" target="_blank" rel="noopener">CHAITIN</a> <em>长亭科技博客，专注于下一代应用安全</em></p></li><li><p><a href="http://blog.topsec.com.cn/" target="_blank" rel="noopener">Topsec</a> <em>天融信阿尔法实验室，可信网络安全世界</em></p></li><li><p><a href="http://www.polaris-lab.com/" target="_blank" rel="noopener">Polaris-lab</a> <em>勾陈之象 实名麒麟 位居中央 权司戊日</em></p></li><li><p><a href="https://paper.seebug.org/" target="_blank" rel="noopener">Paper</a> <em>汇聚黑客智慧，包罗安全技术精粹</em></p></li><li><p><a href="http://liehu.tass.com.cn/" target="_blank" rel="noopener">猎户攻防</a> <em>猎户攻防实验室，专注于安全攻防技术研究</em></p></li><li><p><a href="https://ipot.sec-wiki.com/" target="_blank" rel="noopener">蜜罐小组</a> <em>一个专注于蜜罐技术研究与交流的小站</em></p></li></ul><h3 id="新兴企业"><a href="#新兴企业" class="headerlink" title="新兴企业"></a>新兴企业</h3><ul><li><p><a href="https://qingteng.cn/" target="_blank" rel="noopener">青藤云</a> <em>以不变应万变，专注自适应安全架构(ASA)</em></p></li><li><p><a href="http://www.hansight.com/" target="_blank" rel="noopener">瀚思科技</a> <em>专注于大数据安全分析，引领”AI+安全”</em></p></li><li><p><a href="http://www.lanysec.com/" target="_blank" rel="noopener">兰云科技</a> <em>主推SOAPA架构，专注于大数据安全</em></p></li><li><p><a href="https://www.geetest.com/" target="_blank" rel="noopener">极验验证</a> <em>专注于智能人机验证的初创公司</em></p></li><li><p><a href="http://www.dynarose.com/" target="_blank" rel="noopener">蔷薇灵动</a> <em>专注于微隔离技术的初创公司</em></p></li><li><p><a href="http://www.trusfort.com/" target="_blank" rel="noopener">芯盾时代</a> <em>专注于生物识别与行为认证技术</em></p></li><li><p><a href="https://www.moresec.cn/index.html" target="_blank" rel="noopener">默安科技</a> <em>专注于云安全，首推欺骗防御理念</em></p></li><li><p><a href="http://www.peersafe.com/" target="_blank" rel="noopener">众享比特</a> <em>专注于分布式网络与区块链安全</em></p></li><li><p><a href="http://shuziguanxing.com/" target="_blank" rel="noopener">数字观星</a> <em>基于威胁情报的SaaS化安全运营平台</em></p></li><li><p><a href="https://www.bangcle.com/" target="_blank" rel="noopener">梆梆安全</a> <em>专注于移动安全，保护智能生活</em></p></li><li><p><a href="https://www.hillstonenet.com.cn/" target="_blank" rel="noopener">山石网科</a> <em>专注下一代网络边界安全防御</em></p></li></ul><h3 id="站点导航"><a href="#站点导航" class="headerlink" title="站点导航"></a>站点导航</h3><ul><li><p><a href="https://www.anquanquan.info/" target="_blank" rel="noopener">安全圈</a> <em>做接地气的信息安全导航</em></p></li><li><p><a href="https://www.t00ls.net/navi.html" target="_blank" rel="noopener">T00ls</a> <em>比较全面的安全站点导航</em></p></li><li><p><a href="https://www.shentoushi.top/" target="_blank" rel="noopener">渗透师</a> <em>网络安全从业者安全导航</em></p></li><li><p><a href="https://navisec.it/" target="_blank" rel="noopener">NaviSec</a> <em>纳威，网络安全上网导航</em></p></li><li><p><a href="http://www.hackjie.com/" target="_blank" rel="noopener">黑客街</a> <em>网络安全爱好者的安全导航</em></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;参考网络上的资源，整理的一些安全&lt;a href=&quot;https://firehacker.top/community/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;社区&lt;/a&gt;站点，涉及常见漏洞发布平台，白帽黑客社区，安全资讯网站，以及部分新兴安全企业&lt;br&gt;
    
    </summary>
    
      <category term="0x04 拓展梳理" scheme="http://yoursite.com/categories/0x04-%E6%8B%93%E5%B1%95%E6%A2%B3%E7%90%86/"/>
    
      <category term="资源导航" scheme="http://yoursite.com/categories/0x04-%E6%8B%93%E5%B1%95%E6%A2%B3%E7%90%86/%E8%B5%84%E6%BA%90%E5%AF%BC%E8%88%AA/"/>
    
    
  </entry>
  
  <entry>
    <title>大数据+AI+云+IOT技术浅析</title>
    <link href="http://yoursite.com/2018/08/18/%E5%A4%A7%E6%95%B0%E6%8D%AE-AI-%E4%BA%91-IOT%E5%85%B3%E7%B3%BB%E6%B5%85%E6%9E%90/"/>
    <id>http://yoursite.com/2018/08/18/大数据-AI-云-IOT关系浅析/</id>
    <published>2018-08-18T04:50:04.000Z</published>
    <updated>2018-08-18T09:22:15.043Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>近几年，随着互联网技术的发展与计算能力的提升，大数据，云计算，物联网，人工智能等概念越来与火热，那么这概念的诞生，发展，技术背景，以及这些“新技术”之间的关系又怎样？本文对网络上的相关资料(国内的版权意识及环境较差，部分文章出处难以考证)梳理一二，便于查阅与理解<br><a id="more"></a></p></blockquote><hr><h2 id="0x01-物联网-IOT"><a href="#0x01-物联网-IOT" class="headerlink" title="0x01 物联网 (IOT)"></a>0x01 物联网 (IOT)</h2><h3 id="1-IOT概念"><a href="#1-IOT概念" class="headerlink" title="1. IOT概念"></a>1. IOT概念</h3><p><strong>(1) 早期</strong></p><p>通过射频识别（RFID）、红外线感应器、全球定位系统、激光扫描器、气体感应器等信息传感设备按约定的协议把任何物品与互联网连接起来进行信息交换，以实现智能化识别、定位、跟踪、监控和管理的一种网络，简言之物联网就是“<strong>物物相连</strong>的互联网”</p><p><strong>（2）现今</strong></p><p>当下几乎所有技术与计算机、互联网技术的结合，实现物体与物体之间：环境以及状态信息实时的实时共享以及智能化的收集、传递、处理、执行。广义上说，当下涉及的信息技术的应用，都可以纳入物联网的范畴，所谓的“<strong>万物智联</strong>”- Internet of things</p><h3 id="2-关键技术"><a href="#2-关键技术" class="headerlink" title="2. 关键技术"></a>2. 关键技术</h3><p><strong>（1）传感器技术</strong></p><p>这也是计算机应用中的关键技术。到目前为止绝大部分计算机处理的都是数字信号。自从有计算机以来就需要<strong>传感器</strong>把<strong>模拟信号</strong>转换成<strong>数字信号</strong>计算机才能处理</p><p><strong>（2）RFID标签</strong></p><p>一种传感器技术，RFID技术是融合了<strong>无线射频</strong>技术和<strong>嵌入式</strong>技术为一体的综合技术，RFID在自动识别、物品物流管理有着广阔的应用前景</p><p><strong>（3）嵌入式系统技术</strong></p><p>综合了计算机软硬件、传感器技术、集成电路技术、电子应用技术为一体的复杂技术。经过几十年的演变，以嵌入式系统为特征的智能终端产品随处可见。如果把物联网用人体做一个简单比喻，<strong>传感器</strong>相当于人的眼睛、鼻子、皮肤等<strong>感官</strong>，<strong>网络</strong>就是神经系统用来<strong>传递信息</strong>，<strong>嵌入式系</strong>统则是人的大脑，在接收到信息后要进行<strong>分析处理</strong></p><h3 id="3-体系架构"><a href="#3-体系架构" class="headerlink" title="3. 体系架构"></a>3. 体系架构</h3><p><img src="http://pdn6x28ho.bkt.clouddn.com/IOT%E6%9E%B6%E6%9E%84.png" alt=""></p><p><strong>（1）元素层</strong></p><p>信息科学中的自然现象和效应，是各种基础信息科学的集合，是构建器件层的基础(物联网最基本的技术元素)。包括电学、电磁感应、微波原理、电路理论等等</p><p><strong>（2）器件层</strong></p><p>信息产业中的基本元器件，主要是各类电子元器件、电路模组和功能板件，包括芯片、电路板卡、电源、存储器、信号输出输入设备，传感器和执行器。在这一层，“软件”除了包括电路设计外，还包括嵌入式开发的程序，在电子器件出厂前，其内部的“软件”就基本固定了</p><p><strong>（3）终端和节点层</strong></p><p><strong>物理实体</strong></p><p><strong>A、物联网的终端：</strong>包括非智能终端(也称“哑终端”，一般没有数据处理的能力，只能通过网络上报传感数据，或接受操控数据)、智能终端设备(例如工业机器人)、用户智能终端(手机、笔记本)。</p><p><strong>B、专用的信息处理节点</strong>：网络设备、计算设备、存储设备。虽然这些节点都具备网络接口、计算和存储器件，但是它们通常都提供某一种专用的信息能力。就比如：运营商IP承载网中的路由器(网络)、云计算中的刀片服务器(计算)</p><p><strong>该层“软件”</strong></p><p>主要为各种终端程序，包括嵌入式程序、操作系统、中间件、通用或定制的应用软件等</p><p><strong>（4）资源汇聚层</strong></p><p><strong>信息资源</strong></p><p>主要包括三种核心的信息处理的资源和能力：<strong>网络</strong>(无线网络覆盖、IP骨干网络、互联网及运营商网络的互联)、<strong>计算</strong>(云计算、大数据、机器学习)和<strong>存储</strong>(云存储、数据库)</p><p><strong>该层的“软件”</strong></p><p>除了终端中运行的各种程序以外，还包括各类信息互通的协议标准、流程规范、服务接口等等。在这一层，信息化能力已经具有了语义化的特征，具备了一定的开放性，并持续朝着更加开放、灵活、模块化的方向发展</p><p><strong>（5）平台服务层</strong></p><p><strong>语义化</strong></p><p>在该层，不仅信息技术被语义化地定义，其它行业技术和实体也实现了<strong>语义化</strong></p><p>为了承载各行业领域的数字化转型，物联网所包含的各类信息技术自身就必须做到语义化。在物联网技术领域之外，各行业的资源和能力，也在此处被模块化封装，通过标准化的信息接口向外界提供服务，应用的开发和运营者可以随取随用</p><p><strong>词汇集</strong></p><p>该层也提供软件开发、运营的工具，便于各类行业系统对技术和设施的使用、组合、评测、维护。在平台服务层，形成了物联网应用的词典(词汇集)，各类物联网的资源(设施)是“名词”、各种信息处理功能是“动词”，开发人员将可以将主要精力放置在构建“语句”和“段落”(应用的逻辑功能)上，并最终书写出完整篇章(应用系统、商业体系)</p><p><strong>“软件”及语言</strong></p><p>在这一层中，“软件”包括了物联网服务平台的架构、中间件、接口标准、信息服务规范等等，也融合了各行业中的一些基础性的技术服务(比如平台可以提供气象预测的服务)</p><p>在这一层，各行业的一些已经模块化的技术，能够通过信息产业的(程序化)封装，向外界提供开放式的服务，以形成各行业在物联网中的公共性语言(词汇)</p><p>不过，这种语言并不是服务于“人”的语言，而是“物”与“物”，即设备、系统之间用以信息交流的语言工具。只要掌握了某种物联网应用的“语言”，那么任何设备都可以理解该应用数据的涵义，使用此应用的物联网服务，操作远端设备并获得反馈</p><p><strong>（6）应用层</strong></p><p>对物联网行业应用的<strong>设计、搭建、运营</strong>。开发者和运营者在应用层，选取所需的资源和功能(包括信息技术和行业技术)，通过对下层服务的调用，构建自己的行业应用。在物联网技术层级的体系中，应用层之下的五层，都可以理解为应用层的“硬件”；“软件”则是应用开发者自己编写的应用逻辑</p><p>如果应用软件承载于SAAS(软件即服务)之上，系统底层设备由云计算服务商提供，那么在应用中可能就看不到任何物理实体的“硬件”，取而代之的，是下层模块化、标准化的信息服务和行业功能</p><h3 id="4-IOT两个域"><a href="#4-IOT两个域" class="headerlink" title="4. IOT两个域"></a>4. IOT两个域</h3><p>信息流“接入”和“汇聚”的两种需求，将物联网的技术自然地分成了“<strong>边缘</strong>”和“<strong>云端</strong>”两个“域”</p><p><strong>（1）边缘域</strong></p><p>无数设备需要联网，接近<strong>物理实体</strong>现场的“边缘域”，应用和功能更倾向于需要实时性的反馈操作；<strong>边缘网络</strong>中有各类终端配备传感器——用以感知物理世界，部署各种类型的网络协议，包括了有线网络和无线网络、“对等网络协议”和“非对等网络</p><p><strong>（2）云端域</strong></p><p>远离现实物件，但<strong>信息集中</strong>汇聚的“云端域”，应用更倾向于抽象化的预测分析、海量数据检索等等；<strong>云端网络</strong>中的设备则只有标准的信号输出输入接口，云端域”只有<strong>对等网络</strong>协议，例如IPv4、IPv6</p><hr><h2 id="0x02-云计算"><a href="#0x02-云计算" class="headerlink" title="0x02 云计算"></a>0x02 云计算</h2><h3 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1. 基本概念"></a>1. 基本概念</h3><p><strong>DIS版：</strong>云计算是一种将可伸缩、弹性、共享的物理和虚拟资源池以按需自服务的方式供应和管理，并提供网络访问的模式。云计算模式由关键特征、云计算角色和活动、云能力类型和云服务分类、云部署模型、云计算共同关注点组成</p><p><strong>NIST版：</strong>云计算是一种按使用量付费的模式，这种模式提供可用的、便捷的、按需的网络访问， 进入可配置的计算资源共享池（资源包括网络，服务器，存储，应用软件，服务），这些资源能够被快速提供，只需投入很少的管理工作，或与服务供应商进行很少的交互</p><h3 id="2-部署模式"><a href="#2-部署模式" class="headerlink" title="2. 部署模式"></a>2. 部署模式</h3><p><strong>（1）公有云</strong></p><p>云基础设施对公众或某个很大的业界群组提供云服务</p><p><strong>（2）私有云</strong></p><p>云基础设施特定为某个组织运行服务，可以是该组织或某个第三方负责管理，可以是场内服务（on-premises），也可以是场外服务（off-premises）</p><p><strong>（3）社区云</strong></p><p>云基础设施由若干个组织分享，以支持某个特定的社区。社区是指有共同诉求和追求的团体（，和私有云类似，社区云可以是该组织或某个第三方负责管理，可以是场内服务，也可以是场外服务</p><p><strong>（4）混合云</strong></p><p>云基础设施由两个或多个云（私有云、社区云或公有云）组成，独立存在，但是通过标准的或私有的技术绑定在一起，这些技术可促成数据和应用的可移植性</p><h3 id="3-服务类型"><a href="#3-服务类型" class="headerlink" title="3. 服务类型"></a>3. 服务类型</h3><p><img src="http://pdn6x28ho.bkt.clouddn.com/%E4%BA%91%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84.png" alt=""></p><p><strong>（1）Iaas (基础设施即服务)</strong></p><p>根据用户的需求提供计算资源,将硬件设备等有形的<strong>基础设施资源</strong>进行封装,作为服务提供给用户使用。laaS为用户提供了处理、存储、网络等功能和计算资源,用户可以在上面随意运行任何软件。云还提供了弹性的服务资源和动态要求服务质量和能力的功能,因此用户能够根据需求随时动态请求资源服务。laaS为用户提供资源抽象、资源监控、资源部署、负载管理、安全管理、数据管理和计费管理七个功能。laaS主要是为用户提供虚拟机或者其它资源等服务,其主要用户是<strong>系统管理员</strong></p><p><strong>（2）Paas (平台即服务)</strong></p><p>根据用户需求提供基于互联网的应用开发环境和存储服务，主要是将为用户提供一个<strong>开发平台</strong>,方便编写和测试程序,其主要用户是程序<strong>开发人员</strong></p><p><strong>（3）Saas (软件即服务)</strong></p><p>以服务访问的形式访问网络上的软件,为用户提供运行在云基础设施上的<strong>应用软件</strong>，主要为用户提供各种应用,其面对的主要是<strong>普通用户</strong></p><h3 id="4-参考架构-CCRA"><a href="#4-参考架构-CCRA" class="headerlink" title="4. 参考架构 (CCRA)"></a>4. 参考架构 (CCRA)</h3><p><img src="http://pdn6x28ho.bkt.clouddn.com/CCRA%E6%9E%B6%E6%9E%84.png" alt=""></p><h3 id="5-支撑技术"><a href="#5-支撑技术" class="headerlink" title="5. 支撑技术"></a>5. 支撑技术</h3><p><strong>（1）系统虚拟化</strong></p><p>系统虚拟化是指将一台物理计算机系统虚拟化为一台或多台虚拟计算机系统。每个虚拟计算机系统（简称虚拟机）都拥有自己的虚拟硬件（如 CPU、内存和设备等），来提供一个独立的虚拟机执行环境。通过虚拟化层的模拟，虚拟机中的操作系统认为自己仍然是独占一个系统在运行。每个虚拟机中的操作系统可以完全不同，并且它们的执行环境是完全独立的。这个虚拟化层被称为虚拟机监控器（Virtual Machine Monitor，简称 VMM）</p><p><img src="http://pdn6x28ho.bkt.clouddn.com/%E7%B3%BB%E7%BB%9F%E8%99%9A%E6%8B%9F%E5%8C%96.png" alt=""></p><p>VMM 对物理资源的虚拟可以归结为三个主要任务：CPU 虚拟化、内存虚拟化和 I/O 虚拟化。CPU 虚拟化是 VMM 中最核心的部分，决定了内存虚拟化和 I/O虚拟化的正确实现。<strong>CPU 虚拟化</strong>包括指令的模拟、中断和异常的模拟及注入和对称多处理器技术的模拟。<strong>内存虚拟化</strong>一方面解决了 VMM 和客户机操作系统对物理内存认识上的差异，另一方面在虚拟机之间、虚拟机和 VMM 之间进行隔离，防止某个虚拟机内部的活动影响到其他的虚拟机甚至是 VMM 本身，从而造成安全上的漏洞。<strong>I/O 虚拟化</strong>主要是为了满足多个客户机操作系统对外围设备的访问需求，通过访问截获、设备模拟和设备共享等方式复用外设</p><p><strong>（2）虚拟化资源管理</strong></p><p>虚拟化资源是云计算中最重要的组成部分之一，对虚拟化资源的管理水平直接影响云计算的可用性、可靠性和安全性。虚拟化资源管理主要包括对虚拟化资源的监控、分配和调度，在虚拟化资源管理调度接口方面，表述性状态转移（Representational State Transfer，简称 <strong>REST</strong>）有能力成为虚拟化资源管理强有力的支撑</p><p>云资源池中应用的需求不断改变，在线服务的请求经常不可预测，这种动态的环境要求云计算的数据中心或计算中心能够对各类资源进行灵活、快速、动态的按需调度</p><p><strong>（3）分布式数据存储</strong></p><p>分布式数据存储技术包含非结构化数据存储和结构化数据存储。其中，非结构化数据存储主要采用文件存储和对象存储技术，而结构化数据存储主要采用分布式数据库技术，特别是 NoSQL 数据库</p><p>A. <strong>分布式文件系统</strong></p><p>为了存储和管理云计算中的海量数据，Google 提出分布式文件系统 <strong>GFS</strong>（Google File System），Apache Hadoop项目的 HDFS 实现了 GFS 的开源版本。GFS/HDFS 非常适于进行以<strong>大文件形式</strong>存储的海量数据的并行处理，但是，当文件系统的文件数量持续上升时，元数据服务器的可扩展性面临极限</p><p>B. <strong>分布式对象存储系统</strong></p><p>与分布式文件系统不同，分布式对象存储系统不包含树状名称空间（Namespace），因此在<strong>数量增长</strong>时可以更有效地将元数据平衡地分布到多个结点上，提供理论上无限的可扩展性</p><p>C. <strong>分布式数据库管理系统</strong></p><p>传统的单机数据库采用“<strong>向上扩展</strong>”的思路来解决计算能力和存储能力的问题，即增加 CPU 处理能力、内存和磁盘数量。这种系统目前最大能够支持几个 TB 数据的存储和处理，远不能满足实际需求。采用<strong>集群设计</strong>的分布式数据库逐步成为主流</p><p><strong>（4）并行计算模式</strong></p><p>并行计算模型是<strong>提高海量数据处理效率</strong>的常用方法。常用的并行计算模型主要包括两类：一类是面向高性能计算的，如 MPI(Message Passing Interface)模型；另一类是面向互联网数据密集型应用的并行编程模型，如 Google 的MapReduce 模型、微软的 Dryad 模型</p><p><strong>（5）用户交互技术</strong></p><p>云计算的逐步普及，浏览器已经不仅仅是一个客户端的软件，而逐步演变为承载着互联网的平台。浏览器与云计算的整合技术主要体现在两个方面：浏览器<strong>网络化</strong>与浏览器<strong>云服务</strong></p><p>目前的浏览器云服务主要体现在 <strong>P2P 下载、视频加速</strong>等单独的客户端软件中，主要的应用研究方向包括：基于浏览器的 P2P 下载、视频加速、分布式计算、多任务协同工作等。在多任务协同工作方面,<strong>AJAX</strong>（Asynchronous JavaScript and XML，异步 JavaScript 和 XML)是一种创建交互式网页应用的网页开发技术，改变了传统网页的交互方式，改进了交互体验</p><p><strong>（6）安全管理</strong></p><p>云计算的多租户、分布性、对网络和服务提供者的依赖性，为安全问题带来新的挑战，数据安全问题及风险(数据存储及访问控制，数据传输保护，数据隐私及敏感信息保护，数据可用性，依从性管理)依旧严峻，相应安全管理技术(数据保护及隐私（Data Protection and Privacy），身份及访问管理（Identity and Access Management,简称 IAM），数据传输（Data Transportation），可用性管理（Availability Management），日志管理（Log Management），审计管理（Audit Management），依从性管理(Compliance Management))的发展为其提供保障</p><hr><h2 id="0x03-大数据-Bigdata"><a href="#0x03-大数据-Bigdata" class="headerlink" title="0x03 大数据 (Bigdata )"></a>0x03 大数据 (Bigdata )</h2><h3 id="1-概念定义"><a href="#1-概念定义" class="headerlink" title="1. 概念定义"></a>1. 概念定义</h3><p>无法在一定时间范围内用常规软件工具进行捕捉、管理和处理的数据集合，是需要新处理模式才能具有更强的决策力、洞察发现力和流程优化能力的海量、高增长率和多样化的信息资产，大数据的主要特点为<strong>数据量大</strong>（Volume），<strong>数据类别复杂</strong>（Variety），<strong>数据处理速度快</strong>（Velocity）和<strong>数据真实性高</strong>（Veracity），合起来被称为4V</p><h3 id="2-大数据分析技术"><a href="#2-大数据分析技术" class="headerlink" title="2. 大数据分析技术"></a>2. 大数据分析技术</h3><p><strong>（1）可视化分析（Analytic Visualization）</strong></p><p>普通消费者常常<strong>可以见到</strong>的一种大数据分析结果的表现形式，可视化分析将大量复杂的数据自动转化成<strong>直观形象</strong>的图表，使其能够更加容易的被普通消费者所接受和理解</p><p><strong>（2）数据挖掘算法（Date Mining Algorithms）</strong></p><p>大数据分析的理论核心，其本质是一组根据<strong>算法</strong>事先定义好的<strong>数学公式</strong>，将收集到的数据作为参数变量带入其中，从而能够从大量复杂的数据中<strong>提取</strong>到有价值的信息。亚马逊的推荐引擎和谷歌的广告系统都大量使用了数据挖掘算法</p><p><strong>（3）预测性分析能力（Predictive Analytic Capabilities）</strong></p><p>大数据分析最重要的应用领域，从大量复杂的数据中挖掘出规律，建立起科学的事件模型，通过将新的数据带入模型，就可以预测未来的事件走向。预测性分析能力常常被应用在金融分析和科学研究领域，用于股票预测或气象预测等</p><p><strong>（4）语义引擎（Semantic Engines）</strong></p><p>通过对大量复杂的数据进行分析，让计算机从中自我学习，可以使计算机能够尽量精确的了解用户输入内容的意思，从而把握住用户的需求，提供更好的用户体验</p><p><strong>（5）数据质量管理（Data Quality Management）</strong></p><p>为了保证大数据分析结果的准确性，需要将大数据中不真实的数据剔除掉，保留最准确的数据。这就需要建立有效的数据质量管理系统，分析收集到的大量复杂的数据，挑选出真实有效的数据</p><h3 id="3-技术基础"><a href="#3-技术基础" class="headerlink" title="3. 技术基础"></a>3. 技术基础</h3><p><strong>（1）分布式计算（Distributed Computing）</strong></p><p><strong>基本概念</strong></p><p>把一组计算机通过网络相互连接组成<strong>分散系统</strong>，然后将需要处理的大量数据分散成多个部分，交由分散系统内的计算机组同时计算，最后将这些计算结果合并得到最终的结果</p><p><strong>模型(Google)</strong></p><p>MapReduce是分布式<strong>计算框架</strong>，GFS（Google File System）是分布式<strong>文件系统</strong>，BigTable是基于Google File System的<strong>数据存储系统</strong></p><p><strong>主流分布式计算系统</strong></p><p>A. <strong>Hadoop</strong></p><p>Apache基金会的开源项目，采用MapReduce分布式计算框架，并根据GFS开发了HDFS分布式文件系统，根据BigTable开发了HBase数据存储系统，常用于<strong>离线</strong>的<strong>复杂</strong>的大数据处理</p><p>B. <strong>Spark</strong></p><p>Apache基金会的开源项目，它由加州大学伯克利分校的实验室开发，在Hadoop的基础上进行了一些架构上的改良。<strong>Hadoop</strong>使用<strong>硬盘</strong>来存储数据，而<strong>Spark</strong>使用<strong>内存</strong>来存储数据，因此Spark可以提供超过Hadoop100倍的运算速度，但是，由于内存断电后会丢失数据，Spark不能用于处理需要长期保存的数据，常用于<strong>离线</strong>的<strong>快速</strong>的大数据处理</p><p>C. <strong>Storm</strong></p><p>Twitter主推的分布式计算系统，它由BackType团队开发，是Apache基金会的孵化项目。它在Hadoop的基础上提供了<strong>实时运算</strong>的特性，可以实时的处理大数据流。不同于Hadoop和Spark，Storm不进行数据的收集和存储工作，它直接通过网络实时的接受数据并且实时的处理数据，然后直接通过网络实时的传回结果。常用于<strong>在线</strong>的<strong>实时</strong>的大数据处理</p><p><strong>（2）服务器集群（Server Cluster）</strong></p><p>服务器集群是一种提升服务器整体计算能力的解决方案。它是由互相连接在一起的服务器群所组成的一个并行式或分布式系统。服务器集群中的服务器运行同一个计算任务。因此，从外部看，这群服务器表现为一台虚拟的服务器，对外提供统一的服务</p><hr><h2 id="0x04-人工智能-AI"><a href="#0x04-人工智能-AI" class="headerlink" title="0x04 人工智能(AI)"></a>0x04 人工智能(AI)</h2><h3 id="1-发展史"><a href="#1-发展史" class="headerlink" title="1. 发展史"></a>1. 发展史</h3><p><img src="http://pdn6x28ho.bkt.clouddn.com/AI%E5%8F%91%E5%B1%95%E5%8F%B2.png" alt=""></p><h3 id="2-概念定义"><a href="#2-概念定义" class="headerlink" title="2. 概念定义"></a>2. 概念定义</h3><p><strong>维基百科版</strong></p><p>“人工智能就是机器展现出的智能”，即只要是某种机器，具有某种或某些“智能”的特征或表现，都应该算作“人工智能”</p><p><strong>百度百科版</strong></p><p>人工智能是“研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学”，将其视为计算机科学的一个分支，指出其研究包括机器人、语言识别、图像识别、自然语言处理和专家系统等</p><h3 id="3-分类"><a href="#3-分类" class="headerlink" title="3. 分类"></a>3. 分类</h3><p><strong>（1）弱人工智能</strong></p><p>不能真正实现推理和解决问题的智能机器，<strong>无自主意识</strong>。迄今为止的人工智能系统都还是实现特定功能的专用智能，而不是像人类智能那样能够不断适应复杂的新环境并不断涌现出新的功能，因此都还是弱人工智能。目前的主流研究仍然集中于弱人工智能，并取得了显著进步，如语音识别、图像处理和物体分割、机器翻译等方面取得了重大突破，甚至可以接近或超越人类水平</p><p><strong>（2）强人工智能</strong></p><p>指真正<strong>能思维</strong>的智能机器，并且认为这样的机器是有<strong>知觉</strong>的和<strong>自我意识</strong>的，这类机器可分为类人（机器的思考和推理类似人的思维）与非类人（机器产生了和人完全不一样的知觉和意识，使用和人完全不一样的推理方式）两大类。从一般意义来说，达到人类水平的、能够自适应地应对外界环境挑战的、具有自我意识的人工智能称为“通用人工智能”、“强人工智能”或“类人智能”</p><p><strong>仿真主义</strong></p><ul><li><p>仿真主义可以说是符号主义、连接主义、行为主义和统计主义之后的第五个流派。这条新路线通过制造先进的大脑探测工具从结构上解析大脑，再利用工程技术手段构造出模仿大脑神经网络基元及结构的仿脑装置，最后通过环境刺激和交互训练仿真大脑实现类人智能，简言之，“<strong>先结构，后功能</strong>”</p></li><li><p><strong>经典计算机</strong>是数理逻辑的开关电路实现，采用<strong>冯•诺依曼体系结构</strong>，可以作为逻辑推理等专用智能的实现载体。但要靠经典计算机不可能实现强人工智能。要按仿真主义的路线“仿脑”，就必须设计制造全新的软硬件系统，这就是“<strong>类脑计算机</strong>”，或者更准确地称为“<strong>仿脑机</strong>”。“仿脑机”是“仿真工程”的标志性成果，也是“仿脑工程”通向强人工智能之路的重要里程碑</p></li></ul><h3 id="4-参考框架"><a href="#4-参考框架" class="headerlink" title="4. 参考框架"></a>4. 参考框架</h3><p><img src="http://pdn6x28ho.bkt.clouddn.com/AI%E6%A1%86%E6%9E%B6.png" alt=""></p><p>提供了基于<strong>“角色—活动—功能”</strong>的层级分类体系，从“智能信息链”（水平轴）和“IT 价值链”（垂直轴）两个维度阐述了人工智能系统框架。<strong>“智能信息链”</strong>反映从智能信息感知、智能信息表示与形成、智能推理、智能决策、智能执行与输出的一般过程。在这个过程中，智能信息是流动的载体，经历了“数据—信息—知识—智慧”的凝练过程。<strong>“IT 价值链”</strong>从人工智能的底层基础设施、信息（提供和处理技术实现）到系统的产业生态过程，反映人工智能为信息技术产业带来的价值</p><h3 id="5-关键技术"><a href="#5-关键技术" class="headerlink" title="5. 关键技术"></a>5. 关键技术</h3><p><strong>（1）机器学习（Machine Learning）</strong></p><p>研究计算机怎样模拟或实现人类的学习行为，以获取新的知识或技能，重新组织已有的知识结构使之不断改善自身的性能的学科技术。基于数据的机器学习是现代智能技术中的重要方法之一，研究从观测数据（样本）出发寻找规律，利用这些规律对未来数据或无法观测的数据进行预测</p><p><strong>分类-根据学习模式</strong></p><p>A. <strong>监督学习</strong></p><p>利用<strong>已标记</strong>的有限训练数据集，通过某种学习策略/方法建立一个模型，实现对新数据/实例的标记（分类）/映射，最典型的监督学习算法包括<strong>回归</strong>和<strong>分类</strong>。监督学习要求训练样本的分类标签已知，分类标签精确度越高，样本越具有代表性，学习模型的准确度越高。监督学习在自然语言处理、信息检索、文本挖掘、手写体辨识、垃圾邮件侦测等领域获得了广泛应用</p><p>B. <strong>无监督学习</strong></p><p>利用<strong>无标记</strong>的有限数据描述隐藏在未标记数据中的结构/规律，最典型的非监督学习算法包括<strong>单类密度估计、单类数据降维、聚类</strong>等。无监督学习不需要训练样本和人工标注数据，便于压缩数据存储、减少计算量、提升算法速度，还可以避免正、负样本偏移引起的分类错误问题。主要用于经济预测、异常检测、数据挖掘、图像处理、模式识别等领域</p><p>C. <strong>强化学习</strong></p><p>智能系统<strong>从环境到行为映射</strong>的学习，以使强化信号函数值最大。强化学习的目标是学习从环境状态到行为的映射，使得智能体选择的行为能够获得环境最大的奖赏，使得外部环境对学习系统在某种意义下的评价为最佳。其在机器人控制、无人驾驶、下棋、工业控制等领域获得成功应用</p><p><strong>分类-根据学习方法</strong></p><p>A. <strong>传统机器学习</strong></p><p>从一些观测（训练）样本出发，试图发现不能通过原理分析获得的规律，实现对未来数据行为或趋势的准确预测。相关算法包括<strong>逻辑回归、隐马尔科夫方法、支持向量机方法、K 近邻方法、三层人工神经网络方法、Adaboost算法</strong>、<strong>贝叶斯方法</strong>以及<strong>决策树方法</strong>等</p><p>传统机器学习平衡了学习结果的<strong>有效性</strong>与学习模型的<strong>可解释性</strong>，为解决有限样本的学习问题提供了一种框架，主要用于<strong>有限样本</strong>情况下的<strong>模式分类、回归分析、概率密度估计</strong>等。传统机器学习方法共同的重要理论基础之一是<strong>统计学</strong>，在自然语言处理、语音识别、图像识别、信息检索和生物信息等许多计算机领域获得了广泛应用</p><p>B. <strong>深度学习</strong></p><p>深度学习是建立<strong>深层结构模型</strong>的学习方法，典型的深度学习算法包括<strong>深度置信网络、卷积神经网络、受限玻尔兹曼机</strong>和<strong>循环神经网络</strong>等</p><p>深度学习又称为深度神经网络（指层数<strong>超过3 层</strong>的神经网络）。深度学习源于<strong>多层神经网络</strong>，其实质是给出了一种将<strong>特征表示和学习合二为一</strong>的方式。深度学习的特点是放弃了可解释性，单纯追求学习的有效性</p><p>经过多年的摸索尝试和研究，已经产生了诸多深度神经网络的模型，其中<strong>卷积神经网络、循环神经网络</strong>是两类典型的模型。卷积神经网络常被应用于空间性分布数据；循环神经网络在神经网络中引入了记忆和反馈，常被应用于时间性分布数据</p><p><strong>深度学习框架</strong>是进行深度学习的基础底层框架，一般包含主流的神经网络算法模型，提供稳定的深度学习 API，支持训练模型在服务器和 GPU、TPU 间的分布式学习，部分框架还具备在包括移动设备、13云平台在内的多种平台上运行的移植能力，从而为深度学习算法带来前所未有的运行速度和实用性。目前主流的开源算法框架有 <strong>TensorFlow、Caffe/Caffe2、CNTK、MXNet、Paddle-paddle、Torch/PyTorch、Theano</strong> 等</p><p><strong>（2）知识图谱</strong></p><p>本质上是<strong>结构化</strong>的<strong>语义知识库</strong>，是一种由节点和边组成的<strong>图</strong>数据结构，以符号形式描述物理世界中的概念及其相互关系，其基本组成单位是<strong>“实体—关系—实体”</strong>三元组，以及实体及其相关“属性—值”对。不同实体之间通过关系相互联结，构成网状的知识结构。在知识图谱中，每个节点表示现实世界的“实体”，每条边为实体与实体之间的“关系”</p><p>知识图谱可用于<strong>反欺诈、不一致性验证、组团欺诈</strong>等公共安全保障领域，需要用到异常分析、静态分析、动态分析等数据挖掘方法</p><p><strong>（3）自然语言处理</strong></p><p>研究能实现人与计算机之间用自然语言进行有效通信的各种理论和方法，涉及的领域较多，主要包括<strong>机器翻译、机器阅读理解</strong>和<strong>问答系统</strong>等</p><p><strong>（4）人机交互</strong></p><p>主要研究人和计算机之间的<strong>信息交</strong>换，主要包括人到计算机和计算机到人的两部分信息交换，是人工智能领域的重要的外围技术。人机交互是与认知心理学、人机工程学、多媒体技术、虚拟现实技术等密切相关的综合学科。人机交互技术除了传统的基本交互和图形交互外，还包括<strong>语音交互、情感交互、体感交互</strong>及<strong>脑机交互</strong>等技术</p><p><strong>（5）计算机视觉</strong></p><p>计算机视觉是使用计算机<strong>模仿人类视觉系统</strong>的科学，让计算机拥有类似人类提取、处理、理解和分析图像以及图像序列的能力。自动驾驶、机器人、智能医疗等领域均需要通过计算机视觉技术从视觉信号中提取并处理信息。近来随着深度学习的发展，预处理、特征提取与算法处理渐渐融合，形成<strong>端到端</strong>的人工智能算法技术。根据解决的问题，计算机视觉可分为<strong>计算成像学、图像理解、三维视觉、动态视觉</strong>和<strong>视频编解码</strong>五大类</p><p><strong>（6）生物特征识别</strong></p><p>生物特征识别技术是指通过个体<strong>生理特征</strong>或<strong>行为特征</strong>对个体身份进行识别<strong>认证</strong>的技术</p><p>从应用流程看，生物特征识别通常分为<strong>注册</strong>和<strong>识别</strong>两个阶段。<strong>注册阶段</strong>通过传感器对人体的生物表征信息进行采集，如利用图像传感器对指纹和人脸等光学信息、麦克风对说话声等声学信息进行采集，利用数据预处理以及特征提取技术对采集的数据进行处理，得到相应的特征进行存储。<strong>识别过程</strong>采用与注册过程一致的信息采集方式对待识别人进行信息采集、数据预处理和特征提取，然后将提取的特征与存储的特征进行比对分析，完成识别。从应用任务看，生物特征识别一般分为辨认与确认两种任务，辨认是指从存储库中确定待识别人身份的过程，是一对多的问题；确认是指将待识别人信息与存储库中特定单人信息进行比对，确定身份的过程，是一对一的问题</p><p>生物特征识别技术涉及的内容十分广泛，包括<strong>指纹、掌纹、人脸、虹膜、指静脉、声纹、步态</strong>等多种生物特征，其识别过程涉及到图像处理、计算机视觉、语音识别、机器学习等多项技术</p><p><strong>（7）虚拟现实/增强现实</strong></p><p>虚拟现实（VR）/增强现实（AR）是以计算机为核心的新型视听技术。结合相关科学技术，在一定范围内生成与真实环境在视觉、听觉、触感等方面高度近似的数字化环境。用户借助必要的装备与数字化环境中的对象进行交互，相互影响，获得近似真实环境的感受和体验，通过显示设备、跟踪定位设备、触力觉交互设备、数据获取设备、专用芯片等实现</p><hr><h2 id="0x05-相互关系"><a href="#0x05-相互关系" class="headerlink" title="0x05 相互关系"></a>0x05 相互关系</h2><ol><li><p><strong>物联网</strong>本质上是互联网大脑的感觉神经系统和运动神经系统，传感器和通过AI控制的智能设备通过互联网线路连接到互联网中枢神经系统供云端的群体智慧和云AI使用(<strong>数据产生和收集器</strong>)</p></li><li><p><strong>云计算</strong>本质上是互联网大脑的中枢神经系统，它通过服务器，网络操作系统，神经元网络（大社交网络），大数据和基于大数据的人工智能算法对互联网大脑的其他组成部分进行控制(<strong>数据存储平台</strong>)</p></li><li><p><strong>大数据</strong>本质上是互联网大脑各神经系统在运转过程中传输和积累的<strong>有价值信息</strong>。因为在过去50年随着互联网的快速进化而急速膨胀，体量极其巨大。是互联网大脑产生智慧智能的基础(<strong>有价值的数据</strong>)</p></li><li><p><strong>人工智能</strong>本质是互联网大脑产生产生智慧智能的动力源泉，人工智能不仅仅通过算法如深度学习，机器学习与大数据结合，也运用到互联网大脑的神经末梢，神经网络和智能终端中。使得互联网大脑各个神经系统同时提升能力（<strong>智能化数据分析</strong>）</p></li></ol><hr><h2 id="0xFF-参考资源"><a href="#0xFF-参考资源" class="headerlink" title="0xFF 参考资源"></a>0xFF 参考资源</h2><ul><li><p><a href="http://imgtec.eetrend.com/blog/10926" target="_blank" rel="noopener">物联网技术矩阵图</a></p></li><li><p><a href="http://www.cac.gov.cn/files/pdf/baipishu/CloudStandardization.pdf" target="_blank" rel="noopener">云计算标准化白皮书 </a></p></li><li><p><a href="http://www.cesi.cn/images/editor/20180124/20180124135528742.pdf" target="_blank" rel="noopener">人工智能标准化白皮书</a></p></li></ul><ul><li><p><a href="https://github.com/mindpin/docs/wiki/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86" target="_blank" rel="noopener">https://github.com/mindpin/docs/wiki/Bigdata</a></p></li><li><p><a href="https://zh.wikipedia.org/wiki/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/artificial intelligence</a></p></li><li><p><a href="http://www.duozhishidai.com/article-1858-1.html" target="_blank" rel="noopener">http://www.duozhishidai.com/article-1858-1.html</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;近几年，随着互联网技术的发展与计算能力的提升，大数据，云计算，物联网，人工智能等概念越来与火热，那么这概念的诞生，发展，技术背景，以及这些“新技术”之间的关系又怎样？本文对网络上的相关资料(国内的版权意识及环境较差，部分文章出处难以考证)梳理一二，便于查阅与理解&lt;br&gt;
    
    </summary>
    
      <category term="0X01 思维视角" scheme="http://yoursite.com/categories/0X01-%E6%80%9D%E7%BB%B4%E8%A7%86%E8%A7%92/"/>
    
      <category term="新兴科技" scheme="http://yoursite.com/categories/0X01-%E6%80%9D%E7%BB%B4%E8%A7%86%E8%A7%92/%E6%96%B0%E5%85%B4%E7%A7%91%E6%8A%80/"/>
    
    
  </entry>
  
  <entry>
    <title>IDS技术简析</title>
    <link href="http://yoursite.com/2018/08/15/IDS%E6%8A%80%E6%9C%AF%E7%AE%80%E6%9E%90/"/>
    <id>http://yoursite.com/2018/08/15/IDS技术简析/</id>
    <published>2018-08-15T00:00:52.000Z</published>
    <updated>2018-08-18T03:57:01.849Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>入侵检测系统（Intrusion-detection system，缩写IDS）是一种网络安全设备或应用软件，可以监控网络传输或者系统，检查是否有可疑活动或者违反企业的政策。侦测到时发出警报或者采取主动反应措施，IDS是一种积极主动的安全防护技术。本文对IDS原理，CIDF模型，Snort，NIDS脆弱性及反NIDS技术进行简要分析与总结</p></blockquote><a id="more"></a><hr><h2 id="0x01-IDS概述"><a href="#0x01-IDS概述" class="headerlink" title="0x01 IDS概述"></a>0x01 IDS概述</h2><h3 id="1-IDS概念及模型"><a href="#1-IDS概念及模型" class="headerlink" title="1. IDS概念及模型"></a>1. IDS概念及模型</h3><p><strong>(1) 入侵及方式</strong></p><p>入侵就是试图破坏网络及信息系统<strong>机密性、完整性</strong>和<strong>可用性</strong>(CIA)的行为</p><p><strong>入侵方式</strong></p><ol><li><p>未授权的用户访问系统资源</p></li><li><p>已授权的用户企图获得更高权限，或者是已授权的用户滥用所给定的权限等</p></li></ol><p><strong>(2) 常见定义</strong></p><ol><li><p>检测对计算机系统的非授权访问</p></li><li><p>对系统的运行状态进行监视，发现各种攻击企图、攻击行为或攻击结果，以保证系统资源的保密性、完整性和可用性</p></li><li><p>识别针对计算机系统和网络系统、或广义上的信息系统的非法攻击，包括检测外部非法入侵者的恶意攻击或探测，以及内部合法用户越权使用系统资源的非法行为</p></li></ol><p><strong>(3) IDS(入侵检测系统) </strong></p><p><strong>定义：</strong>所有能够<strong>执行入侵检测任务</strong>和实现<strong>入侵检测功能</strong>的系统都可称为入侵检测系统(IDS，IntrusionDetection System)，其中包括软件系统或软/硬件结合的系统</p><p><strong>功能：</strong>入侵检测系统<strong>自动监视</strong>出现在计算机或网络系统中的事件，并<strong>分析</strong>这些事件，以判断是否有入侵事件的发生</p><p><strong>部署位置：</strong>入侵检测系统一般位于<strong>内部网的入口</strong>处，安装在<strong>防火墙的后面</strong>，用于检测外部入侵者的入侵和内部用户的非法活动</p><p><strong>(4) IDS 模型</strong></p><p><img src="http://par628i4r.bkt.clouddn.com/IDS%E6%A8%A1%E5%9E%8B.png" alt=""></p><ol><li><p><strong>数据收集器：</strong>又称探测器，主要负责<strong>收集数据</strong>。收集器的输入数据包括任何可能包含入侵行为线索的数据，如各种网络协议数据包、系统日志文件和系统调用记录等。探测器将这些数据收集起来，然后再发送到检测器进行处理</p></li><li><p><strong>检测器：</strong>又称分析器或检测引擎，负责<strong>分析和检测</strong>入侵的任务，并向控制器发出警报信号</p></li><li><p><strong>知识库：</strong>为检测器和控制器提供必需的<strong>信息支持</strong>。这些信息包括：用户或系统的历史活动档案或检测规则集合等</p></li><li><p><strong>控制器：</strong>也称为响应器，根据从检测器发来的警报信号，人工或自动地对入侵行为做出<strong>响应</strong></p></li></ol><p>此外，大多数入侵检测系统都会包含一个<strong>用户接口</strong>组件，用于观察系统的运行状态和输出信号，并对系统的行为进行控制</p><h3 id="2-IDS-任务"><a href="#2-IDS-任务" class="headerlink" title="2. IDS 任务"></a>2. IDS 任务</h3><p><strong>(1) 信息收集</strong></p><p>IDS所收集的信息包括用户(合法/非法用户)在网络、系统、数据库及应用程序活动的<strong>状态和行为</strong>。为了准确地收集用户的信息活动，需要在信息系统中的若干个<strong>关键点</strong>(包括不同网段、不同主机、不同数据库服务器、不同的应用服务器等处)设置<strong>信息探测点</strong></p><p><strong>IDS可利用的信息来源</strong></p><p>A. 系统和网络的<strong>日志文件</strong></p><ul><li>日志文件中包含发生在系统和网络上异常活动的<strong>证据</strong>，通过查看日志文件，能够发现黑客的入侵行为</li></ul><p>B. <strong>目录和文件</strong>中的<strong>异常</strong>改变</p><ul><li>信息系统中的目录和文件中的异常改变(包括修改、创建和删除)，特别是那些限制访问的重要文件和数据的改变，很可能就是一种入侵行为</li></ul><p>C. <strong>程序执行</strong>中的<strong>异常</strong>行为</p><ul><li>每个进程在具有不同权限的环境中执行，这种环境控制着进程可访问的系统资源、程序和数据文件等</li></ul><p>D. <strong>网络活动</strong>信息</p><ul><li>远程攻击主要通过网络发送<strong>异常数据包</strong>而实现，为此IDS需要收集TCP连接的状态信息以及网络上传输的实时数据(如果收集到大量的<strong>TCP半开连接</strong>，则可能是<strong>拒绝服务攻击</strong>的开始。如果在短时间内有大量的到<strong>不同TCP（或UDP）端口</strong>的连接，则很可能说明有人在对己方的网络进行<strong>端口扫描</strong>)</li></ul><p><strong>(2) 信息分析</strong></p><p>对收集到的网络、系统、数据及用户活动的状态和行为信息等进行<strong>模式匹配</strong>、<strong>统计分析</strong>和<strong>完整性分析</strong>，得到实时检测所必需的信息</p><p>A. <strong>模式匹配</strong></p><ul><li>将收集到的信息与已知的网络入侵模式的<strong>特征数据库</strong>进行比较，从而发现违背安全策略的行为。(模式匹配的关键是<strong>如何表达入侵模式</strong>，把入侵行为与正常行为<strong>区分</strong>开来。模式匹配的优点是<strong>误报率小</strong>，其局限性是<strong>只能发现已知攻击</strong>，而对未知攻击无能为力)</li></ul><p>B. <strong>统计分析</strong></p><ul><li>统计分析是入侵检测常用的<strong>异常发现</strong>方法。统计分析方法就是先<strong>创建</strong>系统对象(如用户、文件、目录和设备等)的<strong>统计属性</strong>(如访问次数、操作失败次数、访问地点、访问时间、访问延时等)，再将信息系统的<strong>实际行为</strong>与统计属性进行<strong>比较</strong>。当观察值在正常值范围之外时，则认为有入侵行为发生</li></ul><p>C. <strong>完整性分析</strong></p><ul><li>完整性分析<strong>检测</strong>某个文件或对象是否被<strong>更改</strong>。完整性分析常利用<strong>消息杂凑函数</strong>(如MD5和SHA)，能识别目标的微小变化。该方法的优点是某个文件或对象发生的任何一点改变都能够被发现</li></ul><p><strong>(3) 安全响应</strong></p><p>IDS在发现入侵行为后必然及时做出响应，包括<strong>终止网络服务</strong>、<strong>记录事件日志</strong>、<strong>报警和阻断</strong>等</p><p><strong>响应类型</strong></p><p>A. <strong>主动响应</strong></p><p>由<strong>用户驱动</strong>或<strong>系统本身自动执行</strong>，可对入侵行为采取终止网络连接、改变系统环境(如修改防火墙的安全策略)等</p><p>B. <strong>被动响应</strong></p><p>包括发出告警信息和通知等</p><p><strong>常用响应方式</strong></p><p>记录日志、实时显示、E-mail报警、声音报警、SNMP报警、实时TCP阻断、防火墙联动、手机短信报警等</p><h3 id="3-IDS-主要功能"><a href="#3-IDS-主要功能" class="headerlink" title="3. IDS 主要功能"></a>3. IDS 主要功能</h3><p><strong>(1) 网络流量的跟踪与分析功能</strong></p><p>跟踪用户进出网络的所有活动，实时检测并分析用户在系统中的活动状态；实时统计网络流量，检测拒绝服务攻击等异常行为</p><p><strong>(2) 已知攻击特征的识别功能</strong></p><p>识别特定类型的攻击，并向控制台报警，为网络防护提供依据。根据定制的条件过滤重复告警事件，减轻传输与响应的压力</p><p><strong>(3) 异常行为的分析、统计与响应功能</strong></p><p>分析系统的异常行为模式，统计异常行为，并对异常行为做出响应</p><p><strong>(4) 特征库的在线和离线升级功能</strong></p><p>提供入侵检测规则的在线和离线升级，实时更新入侵特征库，不断提高IDS的入侵检测能力</p><p><strong>(5) 数据文件的完整性检查功能</strong></p><p>检查关键数据文件的完整性，识别并报告数据文件的改动情况</p><p><strong>(6) 自定义的响应功能</strong></p><p>定制实时响应策略；根据用户定义，经过系统过滤，对告警事件及时响应</p><p><strong>(7) 系统漏洞的预报警功能</strong></p><p>对未发现的系统漏洞特征进行预报警</p><p><strong>(8) IDS探测器集中管理功能</strong></p><p>通过控制台收集探测器的状态和告警信息，控制各个探测器的行为</p><h3 id="4-IDS-分类"><a href="#4-IDS-分类" class="headerlink" title="4. IDS 分类"></a>4. IDS 分类</h3><p><strong>(1) 基于网络的入侵检测系统 (NIDS，NetworkIntrusion Detection System)</strong></p><p><img src="http://pdeise3e3.bkt.clouddn.com/%E5%9F%BA%E4%BA%8E%E7%BD%91%E7%BB%9CIDS.png" alt=""></p><ul><li><p>数据来自<strong>网络数据流</strong>。NIDS能够截获网络中的数据包，<strong>提取其特征</strong>并与知识库中已知的攻击签名相<strong>比较</strong>，从而达到检测目的</p></li><li><p>优点是<strong>检测速度快、隐蔽性好、不容易受到攻击</strong>、不消耗被保护主机的<strong>资源</strong>；缺点是有些攻击是从被保护的<strong>主机</strong>发出的，不经过网络，因而<strong>无法识别</strong></p></li></ul><p><strong>(2) 基于主机的入侵检测系统(HIDS，Host IntrusionDetection System)</strong></p><p><img src="http://pdeise3e3.bkt.clouddn.com/%E5%9F%BA%E4%BA%8E%E4%B8%BB%E6%9C%BAIDS.png" alt=""></p><ul><li><p>数据来源于<strong>主机系统</strong>，通常是<strong>系统日志</strong>和<strong>审计记录</strong>。HIDS通过对系统日志和审计记录的不断<strong>监控和分析</strong>来发现入侵</p></li><li><p>优点是针对不同操作系统<strong>捕获应用层入侵</strong>，<strong>误报少</strong>；缺点是<strong>依赖</strong>于主机及其子系统，<strong>实时性差</strong></p></li><li><p>HIDS通常<strong>安装在被保护的主机</strong>上，主要对该主机的<strong>网络实时连接</strong>及<strong>系统审计日志</strong>进行<strong>分析和检查</strong>，在发现可疑行为和安全违规事件时，向管理员报警</p></li></ul><p><strong>LIDS：基于Linux内核的入侵检测系统</strong></p><ul><li>在Linux内核中实现了<strong>参考监听模式</strong>以及<strong>命令进入控制(Mandatory Access Control)模式</strong>，可以<strong>实时监视</strong>操作状态，旨在从系统核心加强其安全性。在某种程度上可以认为它的检测数据来源于操作系统的内核操作，在这一级别上检测入侵和非法活动，因此其安全特性要高于其他两类IDS</li></ul><p><strong>(3) 分布式入侵检测系统 (DIDS，Distributed Intrusion Detection System)</strong></p><ul><li><p>采用上述两种数据来源。这种系统能够<strong>同时分析</strong>来自<strong>主机</strong>系统的<strong>审计日志</strong>和来自<strong>网络</strong>的<strong>数据流</strong>，一般为分布式结构，由多个部件组成。DIDS可以从多个主机获取数据，也可以从网络取得数据，克服了单一的HIDS和NIDS的不足</p></li><li><p>典型的DIDS采用<strong>控制台/探测器结构</strong>。NIDS和HIDS作为<strong>探测器</strong>放置在网络的<strong>关键节点</strong>，并向<strong>中央控制台</strong>汇报情况。<strong>攻击日志</strong>定时传送到<strong>控制台</strong>，并保存到<strong>中央数据库</strong>中，新的<strong>攻击特征</strong>能及时发送到各个<strong>探测器</strong>上。每个探测器能够根据所在网络的实际需要配置不同的规则集</p></li></ul><hr><h2 id="0x02-CIDF-模型"><a href="#0x02-CIDF-模型" class="headerlink" title="0x02 CIDF 模型"></a>0x02 CIDF 模型</h2><h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h3><p><strong>CIDF</strong> 是一种推荐的<strong>入侵检测标准架构</strong>，大多数IDS是独立开发的，不同系统之间<strong>缺乏互操作性</strong>和<strong>互用性</strong>，因此，DARPA（theDefense Advanced Research Prouects Agency，美国国防部高级研究计划局）在1997年3月开始着手通用入侵检测架构（CIDF, Common Intrusion Detection Framework）标准的制定</p><h3 id="2-CIDF-主要目的"><a href="#2-CIDF-主要目的" class="headerlink" title="2. CIDF 主要目的"></a>2. CIDF 主要目的</h3><p><strong>(1) IDS构件共享： </strong>即<strong>一个</strong>IDS系统的构件可被<strong>另一个</strong>系统使用</p><p><strong>(2) 数据共享：</strong>即通过提供<strong>标准的数据格式</strong>，使得IDS中的各类数据可以在<strong>不同的系统</strong>之间传递并共享</p><p><strong>(3)</strong> <strong>完善互用性标准</strong>，并建立一套开发接口和支持工具，以提供独立开发部分构件的能力</p><h3 id="3-CIDF-框架结构"><a href="#3-CIDF-框架结构" class="headerlink" title="3. CIDF 框架结构"></a>3. CIDF 框架结构</h3><p><strong>CIDF模型</strong>将入侵检测需要<strong>分析的数据</strong>称作<strong>事件（Event）</strong>，它可以是基于网络的入侵检测系统的数据包，也可以是基于主机的入侵检测系统从系统日志等其它途径得到的信息。模型也对各个部件之间<strong>信息传递格式</strong>、<strong>通信方法</strong>和<strong>API</strong>进行了<strong>标准化</strong></p><p><img src="http://pdeise3e3.bkt.clouddn.com/CIDF%E6%A1%86%E6%9E%B6.png" alt=""></p><p><strong>(1) 事件产生器</strong></p><p>从整个的计算机环境（也称为信息源）中<strong>获得事件</strong>，并向系统的其他部分<strong>提供该事件</strong>，这些数据源可以是网络、主机或应用系统中的信息</p><p><strong>(2) 事件分析器</strong></p><p>从事件产生器中<strong>获得数据</strong>，通过各种分析方法—一般为<strong>误用检测</strong>和<strong>异常检测</strong>方法来<strong>分析数据，</strong>决定入侵是否已经发生或者正在发生，分析方法的选择尤为重要</p><p><strong>(3) 响应单元</strong></p><p>对分析结果<strong>作出反应</strong>的<strong>功能单元</strong>。最简单的响应是<strong>报警</strong>，通知管理者入侵事件的发生，由管理者决定采取应对的措施</p><p><strong>(4) 事件数据库</strong></p><p><strong>存放</strong>各种中间和最终<strong>数据</strong>的地方的总称，它可以是复杂的数据库，也可以是简单的文本文件</p><p><strong>(5) 目录服务构件</strong></p><p>用于各构件<strong>定位</strong>其他的构件，以及<strong>控制</strong>其他构件传递的<strong>数据</strong>并认证其他构件的<strong>使用</strong>，以防止IDS系统本身受到攻击。它可以管理和发布密钥，提供构件信息和告诉用户构件的功能接口</p><h3 id="4-IDS-处理模式"><a href="#4-IDS-处理模式" class="headerlink" title="4. IDS 处理模式"></a>4. IDS 处理模式</h3><p>在目前的入侵检测系统中，经常用信息源、分析部件和响应部件来分别代替事件产生器、事件分析器和响应单元等术语。因此，人们往往将<strong>信息源、分析和响应</strong>称作入侵检测系统的<strong>处理模式</strong></p><hr><h2 id="0x03-入侵检测方法"><a href="#0x03-入侵检测方法" class="headerlink" title="0x03 入侵检测方法"></a>0x03 入侵检测方法</h2><p>事件分析器也称为<strong>分析引擎</strong>，是入侵检测系统中最重要的<strong>核心部件</strong>，IDS的分析引擎通常使用两种基本的分方法来分析事件、检测入侵行为，即<strong>误用检测</strong>(MD，Misuse Detection)和<strong>异常检测</strong>(AD，Anomaly Detection)</p><h3 id="1-误用检测-MD"><a href="#1-误用检测-MD" class="headerlink" title="1. 误用检测(MD)"></a>1. 误用检测(MD)</h3><p><strong>(1) MD 概述</strong></p><p><strong>误用检测技术</strong>又称<strong>基于知识的检测技术</strong>。它假定所有入侵行为和手段(及其变种)都能够表达为一种<strong>模式</strong>或<strong>特征</strong>，并对已知的入侵行为和手段进行分析，提取入侵特征，构建攻击模式或攻击签名，通过系统当前状态与攻击模式或攻击签名的<strong>匹配</strong>判断入侵行为。误用检测是最<strong>成熟</strong>、应用最<strong>广泛</strong>的技术</p><p><strong>(2) 优点及缺陷</strong></p><p>误用检测技术的<strong>优点</strong>在于可以准确地检测<strong>已知</strong>的入侵行为，<strong>缺点</strong>是不能检测<strong>未知</strong>的入侵行为。误用检测的<strong>关键</strong>在于如何表达入侵行为，即<strong>攻击模型的构建</strong>，把真正的入侵与正常行为区分开来</p><p><strong>(3) MD 模型</strong></p><p><img src="http://pdeise3e3.bkt.clouddn.com/MD%E6%A8%A1%E5%9E%8B.png" alt=""></p><h3 id="2-异常检测-AD"><a href="#2-异常检测-AD" class="headerlink" title="2. 异常检测(AD)"></a>2. 异常检测(AD)</h3><p><strong>(1) AD 概述</strong></p><p>异常检测技术又称为<strong>基于行为</strong>的入侵检测技术，用来<strong>检测</strong>系统（主机或网络）中的<strong>异常行为</strong>。其基本设想是入侵行为与正常的(合法的)活动有明显的差异，即正常行为与异常行为有明显的差异</p><p><strong>(2) AD 工作原理</strong></p><p>A. 首先<strong>收集</strong>一段时间系统活动的历史<strong>数据</strong></p><p>B. 再<strong>建立</strong>代表主机、用户或网络连接的正常行为<strong>描述</strong></p><p>C. 然后收集事件数据并使用一些不同的方法来<strong>决定</strong>所检测到的事件活动是否<strong>偏离</strong>了正常行为模式</p><p>D. 最终判断是否发生了入侵</p><p><strong>(3) AD 常用方法</strong></p><pre><code>A. 统计异常检测方法B. 特征选择异常检测方法C. 基于贝叶斯推理异常检测方法D. 基于贝叶斯网络异常检测方法E. 基于模式预测异常检测方法</code></pre><p>比较成熟的方法是<strong>统计异常检测</strong>方法和<strong>特征选择异常检测</strong>方法</p><hr><h2 id="0x04-Snort及IDS部署"><a href="#0x04-Snort及IDS部署" class="headerlink" title="0x04 Snort及IDS部署"></a>0x04 Snort及IDS部署</h2><h3 id="1-Snort-简述"><a href="#1-Snort-简述" class="headerlink" title="1. Snort 简述"></a>1. Snort 简述</h3><p><strong>Snort</strong>是一个是一个基于<code>libpcap</code>的<strong>轻量级网络入侵检测系统</strong>，所谓轻量级入侵检测系统，是指它能够方便地安装和配置在网络中任何一个节点上，而且不会对网络产生太大的影响。它对系统的配置要求比较低，可支持多种操作平台，包括Linux、Windows、Solaris和FreeBSD等。在各种NIDS产品中，Snort是其中最好的之一，它是用C语言编写的开源软件，官方站点<a href="https:/www.snort.org/" target="_blank" rel="noopener">www.snort.org</a></p><h3 id="2-Snort-功能"><a href="#2-Snort-功能" class="headerlink" title="2. Snort 功能"></a>2. Snort 功能</h3><pre><code>(1) 基于规则的检测引擎(2) 良好的可扩展性。可以使用预处理器和输出插件来对Snort的功能进行扩展(3) 灵活简单的规则描述语言。掌握了基本的TCP、IP知识，就可以编写自己的规则(4) 除了用作入侵检测系统，还可以用作嗅探器和包记录器</code></pre><h3 id="3-Snort-组成结构"><a href="#3-Snort-组成结构" class="headerlink" title="3. Snort 组成结构"></a>3. Snort 组成结构</h3><p><img src="http://pdeise3e3.bkt.clouddn.com/Snort%E7%BB%84%E6%88%90.png" alt=""></p><p><strong>(1) 解码器</strong></p><p>负责从网络接口上<strong>获取数据包</strong>。在编程实现上，解码器用一个<strong>结构体</strong>来表示单个数据包，该结构记录了与各层协议有关的信息和其他检测引擎需要用到的信息。获取的信息将被送往检测引擎或者预处理器中。解码器支持多种类型的网络接口，包括Ethernet、SLIP、PPP等</p><p><strong>(2) 检测引擎</strong></p><p>该子系统是Snort工作在入侵检测模式下的<strong>核心部分</strong>，它使用基于<strong>规则匹配</strong>的方式来检测每个数据包。一旦发现数据包的特征符合某个规则定义，则触发相应的处理操作</p><p><strong>(3) 日志/警报子系统</strong></p><p>规则中定义了数据包的处理方式，包括alter(报警)、log(日志记录)和pass(忽略)等，但具体的<strong>alter</strong>和<strong>log操作</strong>则是由日志/警报子系统完成的。<strong>日志子系统</strong>将解码得到的信息以ASCII码的格式或以tcpdump的格式<strong>记录</strong>下来，<strong>警报子系统</strong>将报警信息<strong>发送</strong>到syslog、socket或数据库中</p><p><strong>(4) 预处理器</strong></p><p>额外的检测机制在Snort中是通过预处理器来实现的，它工作在检测引擎之前，解码器之后</p><p><strong>预处理器类型</strong></p><pre><code>A. 包重组：这类预处理器的代表有stream4和frag2，它们将多个数据包中的数据进行组合，构成一个新的待检测包，然后将这个包交给检测引擎或其他预处理器B. 协议解码：为了方便检测引擎方便地处理数据，这类预处理器对Telnet，HTTP和RPC等协议进行解析，并使用统一规范的格式对其进行表述C. 异常检测：用来检测无法用一般规则发现的攻击和协议异常。与前面两种预处理器相比，异常检测预处理器更侧重于报警功能</code></pre><p><strong>(5) 输出插件</strong></p><p>输出插件用来<strong>格式化警报信息</strong>，使得管理员可以按照公司环境来配置容易理解、使用和查看的报警和日志方法。Snort有大量的插件来支持不同的格式，包括<strong>数据库、XML、Syslog</strong>等格式</p><h3 id="4-Snort工作流程"><a href="#4-Snort工作流程" class="headerlink" title="4. Snort工作流程"></a>4. Snort工作流程</h3><p><img src="http://pdeise3e3.bkt.clouddn.com/Snort%E7%BB%84%E6%88%90.png" alt=""></p><pre><code>(1) 首先，Snort利用libpcap进行抓包(2) 之后，由解码器将捕获的数据包信息填入包结构体，并将其送到各式各样的预处理器中(3) 对于那些用于检测入侵的预处理器来说，一旦发现了入侵行为，将直接调用输出插件或者日志、警报子系统进行输出(4) 对于那些用于包重组和协议解码的预处理器来说，它们会将处理后的信息送往检测引擎，由检测引擎对数据包的特征及内容进行检查，一旦检测到与已知规则匹配的数据包，或者利用输出插件进行输出，或者利用日志、警报子系统进行报警和记录</code></pre><hr><h2 id="0x05-IDS-发展方向"><a href="#0x05-IDS-发展方向" class="headerlink" title="0x05 IDS 发展方向"></a>0x05 IDS 发展方向</h2><pre><code>(1) 宽带高速实时检测技术(2) 大规模分布式的检测技术(3) 数据挖掘技术(4) 更先进的检测算法(5) 入侵响应技术</code></pre><hr><h2 id="0x06-NIDS脆弱性及规避技术"><a href="#0x06-NIDS脆弱性及规避技术" class="headerlink" title="0x06 NIDS脆弱性及规避技术"></a>0x06 NIDS脆弱性及规避技术</h2><h3 id="1-NIDS面临的问题"><a href="#1-NIDS面临的问题" class="headerlink" title="1. NIDS面临的问题"></a>1. NIDS面临的问题</h3><p><strong>(1) 检测的工作量很大</strong></p><ul><li><p>NIDS需要高效的检测方法和大量的系统资源</p></li><li><p>NIDS的检测是资源密集型的</p></li></ul><p><strong>(2) 检测方法的局限性</strong></p><ul><li><p>复杂的、智能化方法的作用十分有限，而AD方法(误用检测方法)受限于某些资源的请求使用在数据传输过程中的模糊性与隐含性</p></li><li><p>特征匹配作为一种轻量级的检测方法有其固有的缺陷，缺乏弹性（尤其是字符串匹配）</p></li></ul><p><strong>(3) 网络协议的多样性与复杂性</strong></p><ul><li><p>TCP/IP协议族本身十分庞杂，各种协议不下几十种，呈现横向跨越和纵向深入的两维分布</p></li><li><p>NIDS将难于理解应用层的意图，更无法模拟或理解某些应用提供的功能作用于具体环境下所产生的效果</p></li></ul><p><strong>(4) 系统实现的差异</strong></p><ul><li><p>– 具体实现时，各种系统不完全按RFC，对那些建议值和可选功能，会有自己的偏好，很难做到与目标系统的一致性处理</p></li><li><p>某些系统（如Unix）出于操作的自由性和应用的方便性，允许用户对网络底层进行直接操作</p></li></ul><h3 id="2-规避NIDS技术"><a href="#2-规避NIDS技术" class="headerlink" title="2. 规避NIDS技术"></a>2. 规避NIDS技术</h3><p><strong>(1) Insertion技术</strong></p><p><strong>Insertion</strong>是指<strong>诱使</strong>NIDS接受一些目标系统<strong>无法接收</strong>或是<strong>拒绝接受</strong>的数据包</p><p><strong>影响方面</strong></p><p>A. 针对<strong>非单特征点</strong>的入侵特征进行<strong>插入操作</strong>，将导致特征失效</p><p><img src="http://pdeise3e3.bkt.clouddn.com/NIDS%E5%8D%95%E7%82%B9.png" alt=""></p><ul><li><p>假设<strong>“INFO”</strong>作为入侵的一个<strong>特征串</strong>，入侵者分四个数据包发出该特征串，并在发送第二个特征点“N”之后插入一个迷惑数据包“X”，该数据包对于目标系统来说是无法接收或拒绝接受的，但NIDS却错误地接受了，于是目标系统与NIDS得到不同的“特征串”。从目标系统来看入侵显然发生了，但对于NIDS来说它将无法检测到“INFO”，因此也不会据此判断入侵的发生</p></li><li><p>对于这种情况而言，入侵特征是非单特征点的，因为单特征点是无法Insertion的，而且需要特征的<strong>分割传输</strong>，并在传输中间插入可以导致NIDS错误接受的迷惑性数据包</p></li></ul><p>B. 失去状态同步</p><p>NIDS错误地接受了目标系统无法接收或是拒绝接受的数据包，那么两者之间的状态就会产生不一致，我们称之为“失去状态同步”</p><p><img src="http://pdeise3e3.bkt.clouddn.com/NIDS%E7%8A%B6%E6%80%81.png" alt=""></p><ul><li><p>假设目标系统处于状态A，NIDS跟踪连接也保持为这一状态。现在入侵者发送一个携带状态B的数据包，因为某种原因目标系统没有接收(或接受)数据包，而NIDS却接受了该数据包并更新状态为B，于是与目标系统失去状态同步。在NIDS找回状态同步之前，对后继数据包接受与处理上可能会与目标系统产生不一致。更为严重的是，NIDS可能会在错误接受的数据包的误导下复位或终止相应的状态跟踪，以至放弃或失去对目标系统连接的跟踪</p></li><li><p>这种影响并不基于特征匹配，但它只适用于需要维护状态信息的或<strong>面向连接</strong>的情况</p></li></ul><p><strong>(2) Evasion 技术</strong></p><p>这一次是<strong>NIDS错误地拒绝了本应接受的数据包</strong>，从而导致NIDS比目标系统“少”看到了东西，这种非一致性同样可能产生问题</p><p><strong>影响方面</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;入侵检测系统（Intrusion-detection system，缩写IDS）是一种网络安全设备或应用软件，可以监控网络传输或者系统，检查是否有可疑活动或者违反企业的政策。侦测到时发出警报或者采取主动反应措施，IDS是一种积极主动的安全防护技术。本文对IDS原理，CIDF模型，Snort，NIDS脆弱性及反NIDS技术进行简要分析与总结&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="0x02 安全技术" scheme="http://yoursite.com/categories/0x02-%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/"/>
    
      <category term="网络安全" scheme="http://yoursite.com/categories/0x02-%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="IDS" scheme="http://yoursite.com/tags/IDS/"/>
    
      <category term="Snort" scheme="http://yoursite.com/tags/Snort/"/>
    
      <category term="NIDS" scheme="http://yoursite.com/tags/NIDS/"/>
    
  </entry>
  
  <entry>
    <title>VPN技术浅析</title>
    <link href="http://yoursite.com/2018/08/14/VPN%E6%8A%80%E6%9C%AF%E6%B5%85%E6%9E%90/"/>
    <id>http://yoursite.com/2018/08/14/VPN技术浅析/</id>
    <published>2018-08-14T12:48:07.000Z</published>
    <updated>2018-08-18T03:56:20.738Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>VPN（Virtual Private Network）即“虚拟专用网络”，是企业网在因特网(或其他公共网络)上的扩展，VPN在因特网上开辟一条安全的隧道，以保证两个端点（或两个局域网）之间的安全通信。本文对网络边界安全技术-VPN进行简要分析与总结<br><a id="more"></a></p></blockquote><hr><h2 id="0x01-VPN概述"><a href="#0x01-VPN概述" class="headerlink" title="0x01 VPN概述"></a>0x01 VPN概述</h2><h3 id="1-功能和原理"><a href="#1-功能和原理" class="headerlink" title="1. 功能和原理"></a>1. 功能和原理</h3><p><strong>(1) VPN 功能</strong></p><p>将因特网虚拟成路由器，将物理位置分散的局域网和主机<strong>虚拟</strong>成一个统一的虚拟企业网。VPN综合利用了隧道技术、加密技术、鉴别技术和密钥管理等技术，在公共网络之上建立一个虚拟的安全通道，实现两个网络或两台主机之间的安全连接</p><p><strong>(2) VPN 典型模式</strong></p><ol><li>远程用户访问企业内网</li></ol><p><img src="http://pcdbq4c2i.bkt.clouddn.com/VPN%E6%A8%A1%E5%BC%8F%E4%B8%80.png" alt=""></p><ol start="2"><li>企业分支机构之间的局域网互联</li></ol><p><img src="http://pcdbq4c2i.bkt.clouddn.com/VPN%E6%A8%A1%E5%BC%8F%E4%BA%8C.png" alt=""></p><h3 id="2-VPN-分类"><a href="#2-VPN-分类" class="headerlink" title="2. VPN 分类"></a>2. VPN 分类</h3><p><strong>(1) 从应用角度分类</strong></p><p><strong>1 远程访问 VPN</strong></p><p>它是为企业员工从外地访问企业内网而提供的VPN解决方案，当公司的员工出差到外地需要访问企业内网的机密信息时，为了避免信息传输过程中的泄密，他们的主机首先以VPN客户端的方式连接到企业的远程访问VPN服务器，此后远程主机到内网主机的通信将加密，从而保证了通信的安全性</p><p><strong>2 网关—网关 VPN</strong></p><p>通过不安全的因特网实现两个或多个局域网的安全互联。在每个局域网的出口处设置VPN服务器，当局域网之间需要交换信息时，两个VPN服务器之间建立一条安全的隧道，保证其中的通信安全。这种方式适合企业各分支机构、商业合作伙伴之间的网络互联</p><p><strong>(2) 按隧道协议分类</strong></p><p><strong>隧道协议（Tunneling Protocol）</strong>是一个网络协议的载体。使用隧道的原因是在不兼容的网络上传输数据，或在不安全网络上提供一个安全路径。隧道协议可能使用<strong>数据加密</strong>技术来保护所传输的数据</p><p><strong>1 第2层隧道协议</strong></p><p>主要包括点到点隧道协议(<strong>PPTP</strong>)、第二层转发协议(<strong>L2F</strong>)、第2层隧道协议(<strong>L2TP</strong>)。主要用于实现远程访问VPN</p><p><strong>2 第3层隧道协议</strong></p><p>主要是IP安全(<strong>IPSec</strong>)，用于在<strong>网络层</strong>实现数据包的安全封装。IPSec主要用于实现网关—网关VPN，也可以实现主机—主机的安全连接</p><p><strong>3 第4层隧道协议(SSL)</strong></p><p>在<strong>传输层</strong>上实现数据的安全封装，主要用于保护两台主机的两个进程间的安全通信。安全的Web、安全的电子邮件等均使用了第4层隧道协议</p><p><strong>4 基于第2、3层隧道协议</strong></p><p>也称为2.5层隧道协议，是利用<strong>MPLS路由器</strong>的标签特性实现的VPN</p><p><img src="http://pcdbq4c2i.bkt.clouddn.com/%E9%9A%A7%E9%81%93%E5%8D%8F%E8%AE%AE.png" alt=""></p><hr><h2 id="0x02-PPTP-L2TP-VPN"><a href="#0x02-PPTP-L2TP-VPN" class="headerlink" title="0x02 PPTP/L2TP VPN"></a>0x02 PPTP/L2TP VPN</h2><h3 id="1-PPTP协议"><a href="#1-PPTP协议" class="headerlink" title="1. PPTP协议"></a>1. PPTP协议</h3><p>(1) 点对点隧道协议（Point to Point Tunneling Protocol ，缩写为 PPTP ）是实现虚拟专用网（VPN）的方式之一</p><p>(2) PPTP使用传输控制协议（TCP）创建控制通道来传送控制命令，以及利用通用路由封装（GRE）通道来封装点对点协议（PPP）数据包以传送数据</p><p>(3) PPTP的协议规范本身并未描述加密或身份验证的部份，它依靠点对点协议（PPP）来实现这些安全性功能</p><p>(4) PPTP以通用路由封装（GRE）协议向对方作一般的点对点传输。通过TCP 1723端口来发起和管理GRE状态</p><h3 id="2-PPTP帧的封装格式"><a href="#2-PPTP帧的封装格式" class="headerlink" title="2. PPTP帧的封装格式"></a>2. PPTP帧的封装格式</h3><p><img src="http://pcdbq4c2i.bkt.clouddn.com/PPTP%E6%A0%BC%E5%BC%8F.png" alt=""></p><h3 id="3-L2TP-VPN"><a href="#3-L2TP-VPN" class="headerlink" title="3.  L2TP VPN"></a>3.  L2TP VPN</h3><p>(1) 第二层隧道协议（ Layer Two Tunneling Protocol，缩写为L2TP) 是一种由RFC 2661定义的数据链路层隧道协议，是一种虚拟隧道协议，通常用于虚拟专用网络</p><p>(2) L2TP协议自身不提供加密与可靠性验证的功能，可以和安全协议搭配使用，从而实现数据的加密传输。经常与L2TP协议搭配的加密协议是IPsec，当这两个协议搭配使用时，通常合称L2TP/IPsec</p><p>(3) L2TP支持包括IP、ATM、帧中继、X.25在内的多种网络。在IP网络中，L2TP协议使用了UDP 1701端口</p><hr><h2 id="0x03-IPSec-VPN"><a href="#0x03-IPSec-VPN" class="headerlink" title="0x03 IPSec VPN"></a>0x03 IPSec VPN</h2><h3 id="1-IPSec-概述"><a href="#1-IPSec-概述" class="headerlink" title="1. IPSec 概述"></a>1. IPSec 概述</h3><p>(1) 互联网安全协议（Internet Protocol Security，缩写为 IPsec），是通过对IP协议（互联网协议）的分组进行加密和认证来保护IP协议的网络传输协议族</p><p>(2) IPsec协议工作在OSI 模型的第三层（网络层或TCP/IP模型的IP层），使其在单独使用时适于保护基于TCP或UDP的协议。与传输层或更高层的协议相比，IPsec协议必须处理可靠性和分片的问题，这同时也增加了它的复杂性和处理开销</p><h3 id="2-IPSec-组成"><a href="#2-IPSec-组成" class="headerlink" title="2. IPSec 组成"></a>2. IPSec 组成</h3><p>IPSec是一个开放的标准，由一序列的协议组成，其中最重要的协议有三个 ：认证头 <strong>AH</strong>(Authentication Headers)、封装安全有效载荷<strong>ESP</strong>(Encapsulating Security Payloads)和安全联盟<strong>SA</strong>(Security Associations)</p><p><strong>(1) 认证头AH (Authentication Headers)</strong></p><p>AH为IP数据报实现无连接的完整性和数据源认证功能，并能抵抗重放攻击</p><p><strong>(2) 封装安全有效载荷ESP(EncapsulatingSecurity Payloads)</strong></p><p>ESP实现保密性、数据源认证、无连接的完整性、抵抗重放攻击的服务(一种形式的部分序列完整性)和有限的网络流的保密性</p><p><strong>(3) 安全联盟SA (Security Associations)</strong></p><p>SA给出算法和数据的集合，以向AH或ESP的操作提供必须的参数。安全联盟和密钥管理协议ISAKMP(Internet Security Association and Key ManagementProtocol)提供了认证和密钥交换的框架</p><h3 id="3-IPSec工作模式"><a href="#3-IPSec工作模式" class="headerlink" title="3. IPSec工作模式"></a>3. IPSec工作模式</h3><p><strong>(1) 传输模式：</strong>用于两台主机之间的连接，在IP层封装主机—主机的分组</p><p><strong>(2) 隧道模式：</strong>用于两个网关之间的连接，在IP层封装网关—网关的分组，可穿过公共网络（如Internet）实现局域网之间的互联</p><h3 id="4-认证协议AH"><a href="#4-认证协议AH" class="headerlink" title="4. 认证协议AH"></a>4. 认证协议AH</h3><p><strong>(1) 概述</strong></p><ol><li><p>IP认证头AH（IP Authentication Header）定义在RFC4302中，实现IP数据报的认证、完整性和抗重放攻击</p></li><li><p>AH数据报直接封装在IP数据报中，如果IP数据包的协议字段为51，表明IP头之后是一个AH头</p></li><li><p>AH和ESP同时保护数据时，在顺序上，AH头在ESP头之后</p></li></ol><p><strong>(2) AH 传输模式</strong></p><p><img src="http://pcdbq4c2i.bkt.clouddn.com/AH%E4%BC%A0%E8%BE%93.png" alt=""></p><p><strong>(3) AH 隧道模式</strong></p><p><img src="http://pcdbq4c2i.bkt.clouddn.com/AH%E9%9A%A7%E9%81%93.png" alt=""></p><p><strong>(4) AH 头格式</strong></p><p><img src="http://pcdbq4c2i.bkt.clouddn.com/AH%E5%A4%B4%E6%A0%BC%E5%BC%8F.png" alt=""></p><pre><code>1. 下一个头(Next Header)：8-bits，标识AH头后的载荷（协议）类型。在传输模式下可为6(TCP)或17 (UDP);在隧道模式下将是4(IPv4)或41(IPv6)2. 载荷长度(Payload Length)：8-bits，表示AH头本身的长度，以32-bits为单位3. 保留(Reserved)：16-bits，保留字段，未使用时必须设为04. 安全参数索引SPI(Security Parameters Index)：32-bits，接收方用于标识对应的安全关联(SA)5. 序列号(Sequence Number)：32-bits，是一个单向递增的计数器，提供抗重播功能（anti-replay）6. 完整性验证数据ICV（Integrity Check Value）：这是一个可变长度（必须是32比特的整数倍）的域，长度由具体的验证算法决定。完整性验证数据ICV验证IP数据包的完整性，因此ICV的计算包含了整个IP数据包</code></pre><h3 id="5-封装安全载荷ESP"><a href="#5-封装安全载荷ESP" class="headerlink" title="5. 封装安全载荷ESP"></a>5. 封装安全载荷ESP</h3><p><strong>(1) 概述</strong></p><ol><li><p>IP封装安全载荷ESP （IP Encapsulating SecurityPayload）定义在RFC 4303中，实现IP数据报的认证、完整性、抗重放攻击和加密</p></li><li><p>与AH协议一样，ESP的数据报也直接封装在IP数据报中，如果IP数据包的协议字段为50，表明IP头之后是一个ESP数据报。ESP数据报由四部分组成，分别是：头部、加密数据（包括ESP尾）和ESP验证数据</p></li></ol><p><strong>(2) 传输模式 ESP</strong></p><p><img src="http://pcdbq4c2i.bkt.clouddn.com/%E4%BC%A0%E8%BE%93ESP.png" alt=""></p><p><strong>(3) 隧道模式 ESP</strong></p><p><img src="http://pcdbq4c2i.bkt.clouddn.com/%E9%9A%A7%E9%81%93ESP.png" alt=""></p><p><strong>(4) ESP 数据报格式</strong></p><p><img src="http://pcdbq4c2i.bkt.clouddn.com/ESP%E6%95%B0%E6%8D%AE%E6%8A%A5.png" alt=""></p><pre><code>1. 安全参数索引SPI(32-bits)：在IKE交换过中由目标主机选定，与IP头之前的目标地址以及协议结合在一起，用来标识用于处理数据包的特定的那个安全关联。SPI经过验证，但并未加密2. 序列号(32-bits)：它是一个唯一的单向递增的计数器，与AH类似，提供抵抗重播攻击的能力3. 填充项(0～255 bytes)：由具体的加密算法决定4. 填充长度(8-bits)：接收端可以据此恢复载荷数据的真实长度5. 下一头部(8-bits)：标识受ESP保护的载荷的（协议）类型。在传输模式下拷贝自原IP数据报头中的协议值；在隧道模式下可为4(IPv4)或41 (IPv6)6. 验证数据(完整性校验值ICV)：一个经过密钥处理的散列值，验证范围包括ESP头部、被保护的数据以及ESP尾部。其长度与具体的验证算法有关，但必须是32bits的整数倍</code></pre><h3 id="6-安全关联与安全策略"><a href="#6-安全关联与安全策略" class="headerlink" title="6. 安全关联与安全策略"></a>6. 安全关联与安全策略</h3><p><strong>(1) 安全关联与安全关联数据库</strong></p><ol><li><p>安全关联(SA) 是两个通信实体协商建立起来的一种安全协定</p></li><li><p>SA是通过IKE密钥管理协议在通信双方之间来协商的，协商完成后，通信双方都会在它们的安全关联数据库( SAD)中存储该SA参数</p></li></ol><p><strong>(2) 安全关联确定参数</strong></p><ol><li><p><strong>安全参数索引号(SPI)</strong>：一个与SA相关的位串，由AH和ESP携带，使得接收方能选择合适的SA处理数据包</p></li><li><p><strong>IP目的地址</strong>：目前只允许使用单一地址，表示SA的目的地址</p></li><li><p><strong>安全协议标识</strong>：标识该SA是AH安全关联或ESP安全关联</p></li></ol><p><strong>(3) SA 其他参数</strong></p><pre><code>1. 序列号计数器：一个32位的值，用于生成AH或ESP头中的序号字段，在数据包的“外出”处理时使用2. 序列号溢出：用于输出包处理，并在序列号溢出的时候加以设置，安全策略决定了一个SA是否仍可用来处理其余的包3. 抗重放窗口：用于确定一个入栈的AH或ESP包是否是重放4. AH信息：AH认证算法、密钥、密钥生存期和其他AH的相关参数5. ESP信息：ESP认证和加密算法、密钥、初始值、密钥生存期和其他ESP的相关参数6. SA的生存期：一个SA最长能存在的时间。到时间后，一个SA必须用一个新的 SA替换或终止7. IPSec协议模式：隧道、传输、通配符（隧道模式、传输模式均可）8. 路径MTU：在隧道模式下使用IPSec时，必须维持正确的PMTU信息，以便对这个数据包进行相应的分段</code></pre><p><strong>(4) 安全策略和安全策略数据库SPD</strong></p><ol><li><p>安全策略决定了为一个数据包提供的安全服务，它保存在安全策略数据库SPD中。SPD中的每一个安全策略条目由一组IP和上层协议字段值组成，即下面提到的选择符</p></li><li><p>安全策略数据库(SPD)记录了对IP数据流（根据源IP、目的IP、上层协议以及流入还是流出）采取的安全策略。每一安全策略条目可能对应零条或多条SA条目，通过使用一个或多个选择符来确定某一个SA条目</p></li></ol><p><strong>(5) IPSec允许的选择符</strong></p><pre><code>1. 目的IP地址：可以是主机地址、地址范围或者通配符2. 源IP地址：可以是主机地址、地址范围或者通配符3. 源/目的端口4. 用户ID：操作系统中的用户标识5. 数据敏感级别6. 传输层协议7. IPSec协议(AH，ESP，AH/ESP)8. 服务类型(TOS)</code></pre><hr><h2 id="0XFF-参考资源"><a href="#0XFF-参考资源" class="headerlink" title="0XFF 参考资源"></a>0XFF 参考资源</h2><ul><li><p><a href="https://en.wikipedia.org/wiki/Virtual_private_network" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Virtual_private_network</a></p></li><li><p><a href="https://baike.baidu.com/item/%E8%99%9A%E6%8B%9F%E4%B8%93%E7%94%A8%E7%BD%91%E7%BB%9C/8747869?fromtitle=VPN%E6%8A%80%E6%9C%AF&amp;fromid=1897662" target="_blank" rel="noopener">https://baike.baidu.com/item/Virtual_private_network</a></p></li><li><p><a href="http://staff.ustc.edu.cn/~billzeng/ns/ns04.pdf" target="_blank" rel="noopener">http://staff.ustc.edu.cn/~billzeng/ns/ns04.pdf</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;VPN（Virtual Private Network）即“虚拟专用网络”，是企业网在因特网(或其他公共网络)上的扩展，VPN在因特网上开辟一条安全的隧道，以保证两个端点（或两个局域网）之间的安全通信。本文对网络边界安全技术-VPN进行简要分析与总结&lt;br&gt;
    
    </summary>
    
      <category term="0x02 安全技术" scheme="http://yoursite.com/categories/0x02-%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/"/>
    
      <category term="网络安全" scheme="http://yoursite.com/categories/0x02-%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="VPN" scheme="http://yoursite.com/tags/VPN/"/>
    
      <category term="IPSec" scheme="http://yoursite.com/tags/IPSec/"/>
    
  </entry>
  
  <entry>
    <title>Firewall技术浅析</title>
    <link href="http://yoursite.com/2018/08/13/Firewall%E6%8A%80%E6%9C%AF%E6%B5%85%E6%9E%90/"/>
    <id>http://yoursite.com/2018/08/13/Firewall技术浅析/</id>
    <published>2018-08-13T10:16:00.000Z</published>
    <updated>2018-08-21T11:41:03.502Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>防火墙(firewall)是一种保护计算机网络安全的技术性措施，它通过在网络边界上建立相应的网络通信监控系统来隔离内部和外部网络，以阻挡来自外部的网络入侵。本文对防火墙技术及其发展进行简要分析与总结</p></blockquote><a id="more"></a><hr><h2 id="0x01-概述"><a href="#0x01-概述" class="headerlink" title="0x01 概述"></a>0x01 概述</h2><p><strong>(1) 定义</strong></p><p>防火墙是位于两个(或多个)网络之间执行<strong>访问控制</strong>的软件和硬件系统，它根据访问控制规则对进出网络的数据流进行<strong>过滤</strong></p><p><strong>(2) 示意图</strong></p><p><img src="http://pdeise3e3.bkt.clouddn.com/%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt=""></p><p>防火墙在逻辑上是一个<strong>分离器</strong>，一个<strong>限制器</strong>，也是一个<strong>分析器</strong>。它有效地监控了内部网和外部网之间的任何网络活动，保证了内部网络的安全</p><p><strong>(3) 数据流处理方式</strong></p><ol><li><p>允许数据流通过</p></li><li><p>拒绝数据流通过：通知发送方</p></li><li><p>将这些数据流丢弃：不通知发送方</p></li></ol><p><strong>(4) firewall 实质</strong></p><p>防火墙就是一种能够<strong>限制网络访问</strong>的设备或软件，许多<strong>网络设备</strong>均含有简单的防火墙功能，如路由器、调制解调器、无线基站、IP交换机等；现代<strong>操作系统</strong>中也含有软件防火墙：Windows 系统和Linux系统均自带了软件防火墙，可以通过策略(或规则)定制相关的功能</p><hr><h2 id="0x02-功能及分类"><a href="#0x02-功能及分类" class="headerlink" title="0x02 功能及分类"></a>0x02 功能及分类</h2><h3 id="1-firewall-功能"><a href="#1-firewall-功能" class="headerlink" title="1. firewall 功能"></a>1. firewall 功能</h3><p><strong>(1) 过滤进、出网络的数据</strong></p><p>检查所有进、出数据的细节，并根据事先定义好的策略允许或禁止这些数据进行通信</p><p><strong>(2) 管理进、出网络的访问行为</strong></p><p>通过将动态的、应用层的过滤能力和认证相结合，实现WWW、FTP和Telnet等广泛的服务的安全支持</p><p><strong>(3) 封堵某些禁止的业务</strong></p><p>禁止存在安全脆弱性的服务进出网络</p><p><strong>(4) 记录通过防火墙的信息内容和活动</strong></p><p>审计并记录所有通过防火墙的重要信息，以发现试图的入侵行为</p><p><strong>(5) 对网络攻击的检测和告警</strong></p><h3 id="2-fierwall-分类"><a href="#2-fierwall-分类" class="headerlink" title="2. fierwall 分类"></a>2. fierwall 分类</h3><p><strong>(1) 按发展历史分类</strong></p><p><img src="http://pdeise3e3.bkt.clouddn.com/%E9%98%B2%E7%81%AB%E5%A2%99%E5%8F%91%E5%B1%95.png" alt=""></p><p><strong>(2) 根据网络协议栈中的过滤层次</strong></p><ol><li><p>包过滤防火墙</p></li><li><p>电路级网关防火墙</p></li><li><p>应用级网关防火墙</p></li></ol><p><img src="http://pdeise3e3.bkt.clouddn.com/%E5%85%B3%E7%B3%BB.png" alt=""></p><p>防火墙工作于OSI模型的<strong>层次越高</strong>，其检查数据包中的<strong>信息就越多</strong>，防火墙所消耗的处理器<strong>工作周期就越长</strong>；防火墙检查的数据包<strong>越靠近OSI模型的上层</strong>，该防火墙结构所提供的<strong>安全保护等级就越高</strong></p><hr><h2 id="0x03-包过滤防火墙"><a href="#0x03-包过滤防火墙" class="headerlink" title="0x03 包过滤防火墙"></a>0x03 包过滤防火墙</h2><h3 id="1-静态包过滤防火墙"><a href="#1-静态包过滤防火墙" class="headerlink" title="1. 静态包过滤防火墙"></a>1. 静态包过滤防火墙</h3><p>静态包过滤防火墙可以采用<strong>路由器上的过滤模块</strong>来实现</p><p><strong>(1) 工作原理</strong></p><p>采用一组<strong>过滤规则</strong>对每个数据包进行<strong>检查</strong>，然后根据检查结果确定是<strong>转发</strong>还是<strong>丢弃</strong>该数据包</p><p><strong>(2) 包过滤处理过程</strong></p><ol><li><p><strong>接收</strong>每个到达的数据包</p></li><li><p>对数据包<strong>采用过滤规则</strong>，对数据包的IP头和传输字段内容进行<strong>检查</strong>。如果数据包的头信息与一组规则匹配，则根据该规则确定是转发还是丢弃该数据包</p></li><li><p>如果没有规则与数据包头信息匹配，则对数据包施加<strong>默认规则</strong> (通常，防火墙首先默认丢弃所有数据包，然后再逐个执行过滤规则，以加强对数据包的过滤)</p></li></ol><p><strong>(3) 网络位置</strong></p><p><img src="http://pdeise3e3.bkt.clouddn.com/%E9%9D%99%E6%80%81.png" alt=""></p><ol><li><p>静态数据包过滤发生在<strong>网络层</strong>上，也就是OSI模型的第三层上</p></li><li><p>决定接收还是拒绝一个数据包，取决于对数据包中IP头和协议头等<strong>特定域的检查和判定</strong>。这些特定域包括：①源地址；②目的地址；③应用或协议；④源端口号；⑤目的端口号</p></li></ol><p><strong>(4) ACL (访问控制表单)</strong></p><p>在每个包过滤器上，安全管理员要根据企业的安全策略定义一个表单；该规则库包含许多规则，用来指示防火墙应该拒绝还是接收该数据包。在向前转发某个数据包之前，包过滤器防火墙将IP头和TCP头中的<strong>特定域</strong>与规则库中的<strong>规则</strong>逐条进行<strong>比较</strong>。防火墙按照一定的次序<strong>扫描规则库</strong>，直到包过滤器发现一个特定域满足包过滤规则的<strong>特定要求</strong>时，才对数据包做出“接收”或“丢弃”的判决。如果包过滤器<strong>没有发现</strong>有一个规则与该数据包匹配，那么它将对其施加一个<strong>默认规则</strong>。该默认规则在防火墙的规则库中有明确的定义，一般情况下防火墙将不满足规则的数据包丢弃</p><p><strong>(5) 安全性分析</strong></p><p>决定<strong>包过滤规则的先后次序</strong>是一项很<strong>困难</strong>的事情，包过滤器仅检查数据的IP头和TCP头，它<strong>不能区分真实的IP地址和伪造的IP地址</strong>，若一个伪造的 IP地址满足包过滤规则，并同时满足其他规则的要求，则该数据包将被允许通过</p><p><strong>(6) 优缺点</strong></p><p><strong>优点</strong></p><ol><li><p>对网络性能的影响较小 (只是简单地根据地址、协议和端口进行访问控制)</p></li><li><p>成本较低 (路由器通常集成了简单包过滤的功能)</p></li></ol><p><strong>缺点</strong></p><ol><li><p>安全性较低 （包过滤防火墙仅工作于网络层，不能对数据包进行更高层的分析和过滤）</p></li><li><p>缺少状态感知能力 (一些需要动态分配端口的服务需要防火墙打开许多端口，增大了网络的安全风险)</p></li><li><p>容易遭受IP欺骗攻击 (简单的包过滤功能没有对协议的细节进行分析，可能遭受IP欺骗攻击)</p></li><li><p>创建访问控制规则比较困难 (须严格区分访问控制规则的先后次序)</p></li></ol><h3 id="2-动态包过滤防火墙"><a href="#2-动态包过滤防火墙" class="headerlink" title="2. 动态包过滤防火墙"></a>2. 动态包过滤防火墙</h3><p>动态包过滤器是最<strong>普遍使用</strong>的一种防火墙技术，既具有很高的<strong>安全性</strong>，又具有完全的<strong>透明性</strong>,可根据网络当前的状态检查数据包，即根据当前所交换的信息<strong>动态调整</strong>过滤规则表</p><p><strong>(1) 工作原理</strong></p><ol><li><p>动态(状态)包过滤器是在静态包过滤防火墙的基础上发展而来，它具有<strong>“状态感知”</strong>的能力</p></li><li><p><strong>典型</strong>的动态包过滤防火墙工作在<strong>网络层</strong>，，更<strong>先进</strong>的动态包过滤防火墙可以在OSI的<strong>传输层</strong>(第四层)上工作，可以收集更多的状态信息，从而增加过滤的深度</p></li><li><p>如果数据包满足规则，如数据包的端口号或IP地址是可接受的，则被允许通过。但与普通的包过滤防火墙相比，还有一个不同点：它首先对外出的<strong>数据包身份进行记录</strong>，此后若有相同连接的数据包进入防火墙，它就直接允许这些数据包通过</p></li><li><p>动态包过滤防火墙直接<strong>对“连接”进行处理</strong>，而不是仅对数据包头信息进行检查，可以用来处理UDP和TCP协议</p></li><li><p>动态包过滤防火墙需要对已建连接和规则表进行<strong>动态维护</strong>，因此它是动态的和有状态的</p></li><li><p>典型的动态包过滤防火墙能够感觉到新建连接与已建连接之间的差别。一旦连接建立，它就会将该连接的状态记于RAM中的一个表单中，后续的数据包与RAM表单中的状态信息进行比较</p></li></ol><p><img src="http://pdeise3e3.bkt.clouddn.com/%E5%8A%A8%E6%80%81.png" alt=""></p><p><strong>(2) 优缺点归纳</strong></p><p><strong>动态包过滤防火墙的优点</strong></p><ol><li><p>动态包过滤防火墙的安全性优于静态包过滤防火墙</p></li><li><p>动态包过滤防火墙的“状态感知”能力也使其性能得到了显著提高</p></li><li><p>如果不考虑所采用的操作系统的成本，动态包过滤防火墙的成本也很低</p></li></ol><p><strong>动态包过滤防火墙的缺点</strong></p><ol><li><p>由于没有对数据包的净荷部分进行过滤，因此仍然只具有较低的安全性</p></li><li><p>工作在网络层，仅检查IP头和TCP头，容易遭受伪装IP地址欺骗攻击</p></li><li><p>难于创建规则，管理员创建规则时必须要考虑规则的先后次序</p></li><li><p>动态包过滤防火墙无法抵抗半开连接攻击，在连接建立时仅使用两次握手，可导致在DoS/DDoS攻击时因耗尽所有资源而停止响应</p></li></ol><hr><h2 id="0x04-电路级网关"><a href="#0x04-电路级网关" class="headerlink" title="0x04 电路级网关"></a>0x04 电路级网关</h2><h3 id="1-工作原理"><a href="#1-工作原理" class="headerlink" title="1. 工作原理"></a>1. 工作原理</h3><p><img src="http://pdeise3e3.bkt.clouddn.com/%E7%94%B5%E8%B7%AF%E7%BA%A7.png" alt=""></p><ol><li><p>电路级网关又称做线路级网关，当两个主机首次建立TCP连接时，电路级网关在两个主机之间建立一道屏障，电路级网关的作用就好像一台中继计算机，用来在两个连接之间来回地复制数据，也可以记录或缓存数据</p></li><li><p>采用C/S结构，网关充当了服务器的角色，而内部网络中的主机充当了客户机的角色。当一个客户机希望连接到某个目标服务器时，它首先要连接到中继主机上；然后，中继主机再连接到目标服务器上。对目标服务器来说，该客户机的名称和IP地址是不可见的</p></li><li><p>当有来自Internet的请求进入时，它作为服务器接收外来请求，并转发请求；当有内部主机请求访问Internet时，它则担当代理服务器的角色。它监视两主机建立连接时的握手信息，如Syn、Ack和序列号等是否合乎逻辑，判定该会话请求是否合法。在有效会话连接建立后，电路级网关仅复制、传递数据，而不进行过滤</p></li></ol><h3 id="2-网络位置"><a href="#2-网络位置" class="headerlink" title="2. 网络位置"></a>2. 网络位置</h3><p><img src="http://pdeise3e3.bkt.clouddn.com/%E7%94%B5%E8%B7%AF%E7%BA%A7%E4%BD%8D%E7%BD%AE.png" alt=""></p><ol><li><p>电路级网关工作于会话层，即OSI模型的第五层</p></li><li><p>电路级网关是包过滤防火墙的一种扩展，它除了进行基本的包过滤检查之外，还要增加对连接建立过程中的握手信息及序列号合法性的验证</p></li><li><p>在打开一条通过防火墙的连接或电路之前，电路级网关要检查和确认TCP及UDP协议会话。因此，电路级网关所检查的数据比静态包过滤防火墙或动态包过滤防火墙所检查的数据更多，安全性也更高</p></li><li><p>判断是接收还是丢弃一个数据包，取决于对数据包的IP头和TCP头的检查。电路级网关检查的数据包括：①源地址；②目的地址；③应用或协议；④源端口号；⑤目的端口号；⑥握手信息及序列号</p></li><li><p>与包过滤防火墙类似，电路级网关在转发一数据包之前，首先将数据包的IP头和 TCP头与由管理员定义的规则表相比较，以确定防火墙是将数据包丢弃还是让数据包通过。在可信客户机与不可信主机之间进行TCP握手通信时，仅当SYN标志、ACK标志及序列号符合逻辑时，电路级网关才判定该会话是合法的</p></li><li><p>如果会话是合法的，包过滤器就开始对规则进行逐条扫描，直到发现其中一条规则与数据包中的有关信息一致。如果包过滤器没有发现适合该数据包的规则，它就会对该数据包施加一条默认规则。在防火墙的规则表中，这条默认规则有明确的定义，通常是指示防火墙将不满足规则的数据包丢弃</p></li></ol><h3 id="3-安全性分析"><a href="#3-安全性分析" class="headerlink" title="3. 安全性分析"></a>3. 安全性分析</h3><ol><li><p>电路级网关它与包过滤防火墙一样，工作于OSI模型的低层上，对网络性能的影响较小</p></li><li><p>一旦电路级网关建立一个连接，任何应用均可以通过该连接运行，电路级网关不能对可信网络与不可信网络之间中继的数据包内容进行检查</p></li></ol><h3 id="4-优缺点归纳"><a href="#4-优缺点归纳" class="headerlink" title="4. 优缺点归纳"></a>4. 优缺点归纳</h3><p><strong>电路级网关优点</strong></p><p>(1) 对网络性能有一定程度的影响</p><p>(2) 切断了外部网络到防火墙后的服务器直接连接</p><p>(3)  比静态或动态包过滤防火墙具有更高的安全性</p><p><strong>电路级网关缺点</strong></p><p>(1) 不能对数据净荷进行检测，无法抵御应用层的攻击等</p><p>(2) 在设计理论上存在局限性，工作层次决定了它无法提供最高的安全性</p><p>(3) 当增加新的内部程序或资源时，往往需要对许多电路级网关的代码进行修改</p><hr><h2 id="0x05-应用级别网关"><a href="#0x05-应用级别网关" class="headerlink" title="0x05 应用级别网关"></a>0x05 应用级别网关</h2><h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h3><p>应用级网关则只能对<strong>特定服务的数据流</strong>进行过滤；应用级网关必须为特定的应用服务编写特定的代理程序，这些程序被称为<strong>“服务代理”</strong>，在网关内部分别扮演客户机代理和服务器代理的角色，当各种类型的应用服务通过网关时，它们必须经过客户机代理和服务器代理的过滤</p><h3 id="2-逻辑结构"><a href="#2-逻辑结构" class="headerlink" title="2. 逻辑结构"></a>2. 逻辑结构</h3><p><img src="http://pdeise3e3.bkt.clouddn.com/%E5%BA%94%E7%94%A8%E9%80%BB%E8%BE%91.png" alt=""></p><h3 id="3-工作原理"><a href="#3-工作原理" class="headerlink" title="3. 工作原理"></a>3. 工作原理</h3><p>与电路级网关一样，应用级网关截获进出网络的数据包，运行代理程序来回复制和传递通过网关的信息，起着<strong>代理服务器</strong>的作用。它可以避免内网中的可信服务器或客户机与外网中某个不可信主机之间的直接连接</p><p><strong>二者区别</strong></p><p>(1) 代理是<strong>针对应用</strong>的</p><p>(2) 代理对<strong>整个数据包</strong>进行检查，因此能在OSI模型的应用层上对数据包进行过滤</p><p><strong>工作层次</strong></p><p><img src="http://pcdbq4c2i.bkt.clouddn.com/%E5%BA%94%E7%94%A8%E5%B1%82%E6%AC%A1.png" alt=""></p><p>(1) 应用级网关必须针对每个<strong>特定的服务</strong>运行一个特定的代理，它只能对特定服务所生成的数据包进行传递和过滤，如，HTTP代理只能复制、传递和过滤HTTP业务流</p><p>(2) 如果一个网络使用了应用级网关防火墙，而且网关上没有运行某些应用服务的代理，那么这些服务的数据包都不能进出网络。例如，如果应用级网关防火墙上运行了FTP和HTTP代理，那么只有这两种服务的数据包才能通过防火墙，所有其他服务的数据包均被禁止 </p><p>(3) 应用级网关防火墙上运行的代理程序对数据包进行<strong>逐个检查和过滤</strong>，而不是简单地复制数据让数据包轻易地通过网关</p><p>(4) 特定的应用代理检查通过网关的每个数据包，在OSI模型的应用层上验证数据包内容。这些代理可以对应用协议中的特定信息或命令进行过滤，这就是所谓的<strong>关键词过滤或命令字过滤</strong></p><p>(5) 应用级网关防火墙所采用的技术叫做<strong>“强应用代理”</strong>。强应用代理不是对用户的整个数据包进行复制，而是在防火墙内部创建一个全新的空数据包。强应用代理将那些可接收的命令或数据，从防火墙外部的原始数据报中复制到防火墙内新创建的数据包中。然后，强应用代理将此新数据包发送给防火墙后面受保护的服务器</p><p>(6) 由于应用级网关防火墙对<strong>整个数据包</strong>进行检查，因此它是当前已有的最安全的防火墙结构之一。但是它有一个固有的缺点，那就是<strong>缺乏透明性</strong>，此外，缺乏对新应用、新协议的支持</p><h3 id="4-安全性讨论"><a href="#4-安全性讨论" class="headerlink" title="4. 安全性讨论"></a>4. 安全性讨论</h3><p><strong>应用级网关的优点</strong></p><p>(1) 在已有的安全模型中<strong>安全性较高</strong> (可以对<strong>服务</strong>(如HTTP、FTP等)的命令字过滤，也可以实现<strong>内容过滤</strong>，甚至可以进行<strong>病毒的过滤</strong>)</p><p>(2) 具有<strong>强大的认证功能</strong>。由于应用级网关在<strong>应用层实现认证</strong>，因此它可以实现的认证方式比电路级网关要丰富得多</p><p>(3) 具有超强的<strong>日志功能</strong>。<strong>包过滤防火墙</strong>的日志仅能记录<strong>时间、地址、协议、端口</strong>，而应用级网关的日志要明确得多。(例如，应用级网关可以记录用户通过HTTP访问了哪些网站页面、通过FTP上传或下载了什么文件、通过SMTP给谁发送了邮件，甚至邮件的主题、附件等信息，都可以作为日志的内容)</p><p>(4) 应用级网关防火墙的<strong>规则配置比较简单</strong>。关注的重点是应用服务，而不必像配置包过滤防火墙还要考虑规则顺序的问题</p><p><strong>应用级网关的缺点</strong></p><p>(1) 灵活性很差，对每一种应用都需要设置一个代理</p><p>(2) 配置烦琐，增加了管理员的工作量</p><p>(3) 性能不高,一旦超负荷，就有可能发生停机,从而导致整个网络中断</p><hr><h2 id="0x06-状态检测防火墙"><a href="#0x06-状态检测防火墙" class="headerlink" title="0x06 状态检测防火墙"></a>0x06 状态检测防火墙</h2><h3 id="1-概述-1"><a href="#1-概述-1" class="headerlink" title="1. 概述"></a>1. 概述</h3><p>状态检测技术是防火墙近几年才应用的新技术，状态检测技术采用的是一种<strong>基于连接的状态检测机制</strong>，将属于同一连接的所有包作为一个数据流的整体看待，构成连接状态表，通过<strong>规则表</strong>与<strong>状态表</strong>的共同配合，对表中的各个连接状态因素加以识别。这里动态连接状态表中的记录可以是<strong>以前的通信信息</strong>，也可以是其他相关<strong>应用程序的信息</strong></p><h3 id="2-工作原理"><a href="#2-工作原理" class="headerlink" title="2. 工作原理"></a>2. 工作原理</h3><p>先进的状态检测防火墙读取、分析和利用了全面的<strong>网络通信信息和状态</strong></p><p><strong>(1) 通信信息：即所有7层协议的当前信息</strong> </p><p>防火墙的检测模块位于操作系统的<strong>内核</strong>，在网络层之下，能在数据包到达网关操作系统之前对它们进行分析。防火墙先在<strong>低协议层</strong>上<strong>检查</strong>数据包是否满足企业的安全策略，对于满足的数据包，再从更<strong>高协议层</strong>上进行<strong>分析</strong>)</p><p><strong>(2) 通信状态：即以前的通信信息</strong> </p><p>状态检测防火墙在<strong>状态表</strong>中保存以前的通信信息，<strong>记录</strong>从受保护网络发出的数据包的<strong>状态信息</strong>，如IP请求的服务器地址和端口，然后，防火墙根据该表内容对返回<strong>受保护</strong>网络的数据包进行分析判断，这样，只有响应受保护网络请求的数据包才被放行。对于UDP或RPC等<strong>无连接的协议</strong>，检测模块可<strong>创建虚会话信息</strong>用来进行跟踪</p><p><strong>(3) 应用状态：即其他相关应用的信息</strong> </p><p>状态检测模块能够<strong>理解并学习</strong>各种协议和应用，以支持各种最新的应用，它比代理服务器支持的协议和应用要多得多；并且，它能从应用程序中<strong>收集状态信息</strong>并存入状态表中，以供其他应用或协议做检测策略。例如，已经通过防火墙认证的用户可以通过防火墙访问其他授权的服务</p><p><strong>(4) 操作信息：即在数据包中能执行逻辑运算或数学运算的信息</strong></p><p>状态监测技术采用强大的<strong>面向对象</strong>的方法，基于通信信息、通信状态、应用状态等多方面因素，利用灵活的表达式形式，结合安全规则、应用识别知识、状态关联信息及通信数据，构造更<strong>复杂</strong>的、更<strong>灵活</strong>的、满足用户<strong>特定</strong>安全要求的策略规则</p><h3 id="3-安全性讨论"><a href="#3-安全性讨论" class="headerlink" title="3. 安全性讨论"></a>3. 安全性讨论</h3><p><strong>状态检测防火墙优点</strong></p><p>(1) 具备动态包过滤的所有优点，同时具有更高的安全性</p><p>(2) 没有打破客户/服务器模型</p><p>(3) 提供集成的动态(状态)包过滤功能</p><p>(4) 当以动态包过滤模式运行时，其速度很快</p><p><strong>状态检测防火墙缺陷</strong></p><p>(1) 由于状态检测引擎采用单线程进程，此设计将对防火墙的性能产生很大影响</p><p>(2) 没有打破客户/服务器结构会产生不可接受的安全风险，攻击者可以直接与受保护的服务器建立连接</p><p>(3) 如果实现方案依赖于操作系统的Inetd守护进程，其并发连接数量将受到严重限制，从而不能满足当今网络对高并发连接数量的要求</p><hr><h2 id="0x07-切换代理"><a href="#0x07-切换代理" class="headerlink" title="0x07 切换代理"></a>0x07 切换代理</h2><h3 id="1-工作原理-1"><a href="#1-工作原理-1" class="headerlink" title="1. 工作原理"></a>1. 工作原理</h3><p>切换代理(Cutoff Proxy)实际上是动态(状态)包过滤器和一个电路级代理的结合。切换代理<strong>首先起电路级代理的作用</strong>，以验证RFC建议的三步握手，然后再<strong>切换到动态包过滤</strong>的工作模式下。因此，切换代理首先工作于OSI的会话层，即第5层；当连接完成后，再切换到动态包过滤模式，即工作于OSI的第3层</p><h3 id="2-工作过程"><a href="#2-工作过程" class="headerlink" title="2. 工作过程"></a>2. 工作过程</h3><p><img src="http://pcdbq4c2i.bkt.clouddn.com/%E5%88%87%E6%8D%A2%E4%BB%A3%E7%90%86.png" alt=""></p><h3 id="3-安全性讨论-1"><a href="#3-安全性讨论-1" class="headerlink" title="3. 安全性讨论"></a>3. 安全性讨论</h3><p>(1) 切换代理与传统的电路级代理不同：电路级代理能在连接持续期间打破客户/服务器模式，而切换代理却不能。远端的客户机与防火墙后面受保护的服务器之间仍然能够建立直接的连接</p><p>(2) 如果安全策略规定需要对一些基本的服务进行认证并检查三步握手，而且不需要打破客户/服务器模式，那么切换代理就是一个非常合适的选择。切换代理绝不等同于电路级代理，因为在建立连接之后的通信期间，它并未打破客户/服务器的工作模式</p><h3 id="4-优点与缺陷"><a href="#4-优点与缺陷" class="headerlink" title="4. 优点与缺陷"></a>4. 优点与缺陷</h3><p><strong>切换代理优点</strong></p><p>(1) 与传统的电路级网关相比，它对网络性能造成的影响要小</p><p>(2) 由于对三步握手进行了验证，所以降低了IP欺骗的风险</p><p><strong>切换代理缺陷</strong></p><p>(1) 它不是一个电路级网关</p><p>(2) 仍然具有动态包过滤器遗留的许多缺陷</p><p>(3) 由于没有检查数据包的净荷部分，因此具有较低的安全性</p><p>(4) 难于创建规则(受先后次序的影响)</p><p>(5) 安全性不及传统的电路级网关</p><hr><h2 id="0x08-防火墙体系结构"><a href="#0x08-防火墙体系结构" class="headerlink" title="0x08 防火墙体系结构"></a>0x08 防火墙体系结构</h2><h3 id="1-堡垒主机-Bastion-Host"><a href="#1-堡垒主机-Bastion-Host" class="headerlink" title="1. 堡垒主机(Bastion Host)"></a>1. 堡垒主机(Bastion Host)</h3><p><strong>(1) 概念</strong></p><p>堡垒主机(Bastion Host)是一种配置了较为全面的安全防范措施的网络上的计算机，它为网络间的通信提供了一个<strong>阻塞点</strong>。通常堡垒主机可以用作应用级和电路级网关的<strong>平台</strong>，是一个组织机构网络安全的中心主机</p><p><strong>(2) 特征</strong></p><ol><li><p>堡垒主机硬件平台运行较为安全的操作系统，成为可信任的系统</p></li><li><p>只有网络管理员认为必要的服务才会安装在堡垒主机上。这些服务包含了代理服务，如Telnet，DNS，FTP，SMTP以及用户认证等</p></li><li><p>当允许一个用户访问代理服务时，堡垒主机可能会要求进行额外认证。另外，每一个代理服务都可能需要相应的鉴别机制( Authentication)</p></li><li><p>每一个代理都只能支持标准应用服务命令集中的一个子集</p></li><li><p>每一个代理只允许访问指定主机的通信。这意味着每一个代理通过对所用的网络流量、每一个连接及其持续时间记录日志，保留了详细的审计信息。审计日志对检测和终止入侵者极为重要</p></li><li><p>每一个代理模块都是一个为网络安全设计的一个很小的软件包</p></li><li><p>代理之间相互独立</p></li><li><p>代理通常无需进行磁盘访问，不需要读取初始配置文件。使得入侵者很难在主机上安装Trojan horse、sniffers或其他危险的文件</p></li><li><p>堡垒主机是一个组织机构网络安全的中心主机。堡垒主机是由网络管理员严密监视的，堡垒主机软件和系统的安全情况应该定期地进行审查，对访问记录应进行查看，以防潜在的安全漏洞和对堡垒主机的试探性攻击</p></li></ol><h3 id="2-典型体系结构"><a href="#2-典型体系结构" class="headerlink" title="2. 典型体系结构"></a>2. 典型体系结构</h3><p><strong>(1) 屏蔽主机模式</strong></p><p><img src="http://pcdbq4c2i.bkt.clouddn.com/%E5%B1%8F%E8%94%BD%E4%B8%BB%E6%9C%BA%E6%A8%A1%E5%BC%8F.png" alt=""></p><p>1.屏蔽主机模式防火墙(Screened Firewall)由<strong>包过滤路由器</strong>和<strong>堡垒主机</strong>组成。在这种模式下，<strong>所有的网络流量</strong>都必须通过堡垒主机</p><ul><li><p>对于来自外部网络的网络流量，只有发往堡垒主机的IP数据包才被允许通过</p></li><li><p>对于来自内部网络的网络流量，只有来自堡垒主机的IP数据包才被允许通过</p></li></ul><p>2.屏蔽主机模式防火墙的实质就是<strong>包过滤</strong>和<strong>代理服务功能</strong>的结合。堡垒主机担任了身份鉴别和代理服务的功能。这样的配置更加安全</p><ul><li><p>首先，这种配置能够实现数据包级过滤和应用级过滤，在定义安全策略时有相当的灵活性</p></li><li><p>其次，在入侵者威胁到内部网络的安全以前，必须能够“穿透”两个独立的系统（包过滤路由器和堡垒主机）</p></li><li><p>这种配置在对Internet进行直接访问时，有更大的灵活性。例如，内部网络中有一个公共信息服务器，如Web服务器，这时，可以配置路由器允许网络流量在信息服务器和Internet之间传输</p></li><li><p>单宿主机模式存在一个缺陷：一旦过滤路由器遭到破坏，堡垒主机就可能被越过，使得内部网络完全暴露</p></li></ul><p><strong>(2) 双宿/多宿主机模式</strong></p><p><img src="http://pcdbq4c2i.bkt.clouddn.com/%E5%A4%9A%E5%AE%BF%E4%B8%BB.png" alt=""></p><ol><li><p>双宿/多宿主机模式防火墙 (Dual-homed/MultiHomedFirewall)，又称为双宿/多宿网关防火墙</p></li><li><p>它是一种拥有两个或多个连接到不同网络上的网络接口的防火墙。通常用一台装有两块或多块网卡的堡垒主机作为防火墙，每块网卡各自与受保护网和外部网连接</p></li><li><p>该模式下，堡垒主机关闭了IP转发功能，其网关功能是通过提供代理服务而不是通过 IP转发来实现的。显然只有特定类型的协议请求才能被代理<br>服务处理。于是，网关采用了“缺省拒绝”策略以得到很高的安全性</p></li><li><p>这种体系结构的防火墙简单明了，易于实现，成本低，能够为内外网提供检测、认证、日志等功能</p></li><li><p>这种结构也存在弱点，一旦黑客侵入堡垒主机并打开其IP转发功能，则任何网上用户均可随意访问内部网络。因此，双宿/多宿网关防火墙对不可信任的外部主机的访问必须进行严格的身份验证</p></li></ol><p><strong>(3) 屏蔽子网模式</strong></p><p>与前面几种配置模式相比，屏蔽子网模式防火墙(Screened Subnet Mode Firewall) 是最为安全的一种配置模式。它采用了两个包过滤路由器：一个位于堡垒主机和外部网络(Internet)之间；另一个位于堡垒主机和内部网络之间。该配置模式在内部网与外部网络之间建立了一个被隔离的子网</p><p><img src="http://pcdbq4c2i.bkt.clouddn.com/%E5%B1%8F%E8%94%BD%E5%AD%90%E7%BD%91.png" alt=""></p><ol><li><p>周边防御网络是位于内部网络与外部网络之间的一个安全子网，分别和内外两个路由器相连。这个子网被定义为“非军事区”(demilitarized zone)网络，这一网络所受到的威胁不会影响到内部网络</p></li><li><p>可以将堡垒主机、Web服务器、E-mail服务器等公用服务器放在非军事区网络中，将重要的数据放在内部网服务器上。内部网络和外部网络均可访问屏蔽子网，但禁止它们穿过屏蔽子网通信。在这一配置中，内网增加了一台内部包过滤路由器，该路由器与外部路由器的过滤规则完全不同，它只允许源于堡垒主机的数据包进入</p></li><li><p>这种防火墙安全性好，但成本高。即使外部路由器和堡垒主机被入侵者控制，内部网络仍受到内部包过滤路由器的保护</p></li></ol><hr><h2 id="0x09-防火墙缺陷及发展"><a href="#0x09-防火墙缺陷及发展" class="headerlink" title="0x09 防火墙缺陷及发展"></a>0x09 防火墙缺陷及发展</h2><h3 id="1-防火墙缺陷"><a href="#1-防火墙缺陷" class="headerlink" title="1. 防火墙缺陷"></a>1. 防火墙缺陷</h3><p>(1) 防火墙不能防范不经由防火墙的攻击</p><p>如果允许从受保护网内部不受限制的向外拨号，一些用户可以形成与Internet的直接的SLIP或PPP连接，从而绕过防火墙，造成一个潜在的后门攻击渠道</p><p>(2) 防火墙目前还不能防止感染了病毒的软件或文件的传输，只能在每台主机上装反病毒软件</p><p>(3) 防火墙不能防止数据驱动式攻击</p><p>有些表面看来无害的数据被邮寄或复制到Internet主机上并被执行而发起攻击时，就会发生数据驱动攻击。例如，一种数据驱动的攻击可以使一台主机修改与安全有关的文件，从而使入侵者下一次更容易入侵该系统</p><p>(4) 防火墙还存在着安装、管理、配置复杂的缺点，在高流量的网络中，防火墙还容易成为网络的瓶颈</p><h3 id="2-发展趋势"><a href="#2-发展趋势" class="headerlink" title="2. 发展趋势"></a>2. 发展趋势</h3><p><strong>(1) 优良的性能</strong></p><ul><li><p>传统的代理型防火墙虽然可以提供较高级别的安全保护，但是同时它也成为限制网络带宽的瓶颈，极大地制约了在网络中的实际应用。<strong>数据通过率</strong>是表示防火墙性能的参数，由于不同防火墙的不同功能具有不同的工作量和系统资源要求，因此数据在通过防火墙时会产生延时。现在大多数的防火墙产品都支持<strong>NAT功能</strong>，它可以让受防火墙保护的一边的IP地址不至于暴露在没有保护的另一边，但启用NAT后，势必会对防火墙系统性能有所影响。另外防火墙系统中集成的<strong>VPN解决方案</strong>必须是真正的线速运行，否则将成为网络通信的瓶颈</p></li><li><p>采用复杂的加密算法时，防火墙性能尤为重要</p></li></ul><p><strong>(2) 可扩展的结构和功能</strong></p><ul><li><p>防火墙系统规模和功能应该能适应内部网络的规模和安全策略的变化，</p></li><li><p>防火墙除了具有保护网络安全的基本功能外，还提供对VPN的支持，同时还应该具有可扩展的内驻应用层代<br>理。除了支持常见的网络服务以外，还应该能够按照用户的需求提供相应的代理服务</p></li><li><p>未来的防火墙系统应是一个<strong>可随意伸缩</strong>的<strong>模块化解决方案</strong>，从最为基本的包过滤器到带加密功能的VPN型包过滤器，直至一个独立的应用网关，使用户有充分的余地构建自己所需要的防火墙体系</p></li></ul><p><strong>(3) 简化的安装与管理</strong></p><p>将具有非常易于进行配置的图形用户界面，NT防火墙市场的发展证明了这种趋势</p><p><strong>(4) 主动过滤</strong></p><p>具有内置病毒和内容扫描功能或允许用户将病毒与内容扫描程序进行集成</p><p><strong>(5) 防病毒与防黑客</strong></p><p>TCP／IP 协议套件中存在的脆弱性使Internet对<strong>拒绝服务攻击</strong>敞开了大门。防火墙厂商一直在尽其可能阻止拒绝服务攻击。像对付序列号预测和IP欺骗这类简单攻击，这些年来已经成为了防火墙工具箱的一部分。像“SYN泛滥”这类更复杂的拒绝服务攻击需要厂商部署更先进的检测和避免方案来对付</p><p><strong>(6) 发展联动技术</strong></p><p>联动即通过一种<strong>组合</strong>的方式，将不同的技术与防火墙技术进行整合，在提高防火墙自身功能和性能的同时，由其他技术完成防火墙所缺乏的功能，以适应网络安全<strong>整体化、立体化</strong>的要求</p><ul><li><p>防火墙与<strong>防病毒产品</strong>联动，可以在网关处查杀病毒，将病毒的发作限制在最小的可能</p></li><li><p>防火墙与<strong>认证系统</strong>联动，可以在制定安全策略时使用强度更大、安全性更高的认证体系</p></li><li><p>防火墙与<strong>入侵检测系统</strong>联动，可以对网络进行动静结合的保护</p></li><li><p>防火墙与<strong>日志分析系统</strong>联动</p></li></ul><h3 id="3-趋势总结"><a href="#3-趋势总结" class="headerlink" title="3. 趋势总结"></a>3. 趋势总结</h3><p>未来防火墙技术会全面考虑<strong>网络安全、操作系统安全、应用程序安全、用户的安全、数据安全</strong>，五者综合应用；此外，网络的防火墙产品还将把网络前沿技术，如Web页面超高速缓存、虚拟网络和带宽管理、与其它安全<strong>技术联动</strong>等与其自身结合起来</p><hr><h2 id="0x0A-防火墙设计及配置"><a href="#0x0A-防火墙设计及配置" class="headerlink" title="0x0A 防火墙设计及配置"></a>0x0A 防火墙设计及配置</h2><p>现代操作系统已经集成了基本的防火墙架构，只需在相关的架构上加入自定义的软件模块，就可以实现高强度的防火墙功能 </p><h3 id="1-Firewall-Windows"><a href="#1-Firewall-Windows" class="headerlink" title="1. Firewall-Windows"></a>1. Firewall-Windows</h3><p><img src="http://pcdbq4c2i.bkt.clouddn.com/windows.png" alt=""></p><p><strong>(1) 用户级：</strong>SPI接口，包过滤接口</p><p><strong>(2) 内核级：</strong>TDI过滤驱动程序，NDIS中间层过滤驱动程序，NDIS过滤钩子驱动程序</p><h3 id="2-Firewall-Linux"><a href="#2-Firewall-Linux" class="headerlink" title="2. Firewall-Linux"></a>2. Firewall-Linux</h3><p>(1) Linux kernel 集成了过滤系统</p><ul><li>2.0 ipfwadm</li><li>2.2 ipchains</li><li>2.4以上内核：netfilter/iptables</li></ul><p>(2) 大多数Linux下的防火墙都是在这些过滤系统之上开发设计的。通过LKM注册钩子函数，实现对数据的检测，从而实现自定义的防火墙</p><p>(3) 商用防火墙大多在netfilter/iptables上开发</p><hr><h2 id="0xFF-参考资源"><a href="#0xFF-参考资源" class="headerlink" title="0xFF 参考资源"></a>0xFF 参考资源</h2><ul><li><p><a href="https://zh.wikipedia.org/wiki/%E9%98%B2%E7%81%AB%E5%A2%99" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki</a></p></li><li><p><a href="http://staff.ustc.edu.cn/~billzeng/senis/nis06.pdf" target="_blank" rel="noopener">http://staff.ustc.edu.cn/~billzeng/senis/nis06.pdf</a></p></li><li><p><a href="https://www.secrss.com/search?keywords=%E9%98%B2%E7%81%AB%E5%A2%99" target="_blank" rel="noopener">https://www.secrss.com/firewall</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;防火墙(firewall)是一种保护计算机网络安全的技术性措施，它通过在网络边界上建立相应的网络通信监控系统来隔离内部和外部网络，以阻挡来自外部的网络入侵。本文对防火墙技术及其发展进行简要分析与总结&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="0x02 安全技术" scheme="http://yoursite.com/categories/0x02-%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/"/>
    
      <category term="网络安全" scheme="http://yoursite.com/categories/0x02-%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="Firewall" scheme="http://yoursite.com/tags/Firewall/"/>
    
  </entry>
  
  <entry>
    <title>Joy-加密流量分析</title>
    <link href="http://yoursite.com/2018/07/31/Joy/"/>
    <id>http://yoursite.com/2018/07/31/Joy/</id>
    <published>2018-07-31T06:43:40.000Z</published>
    <updated>2018-08-18T03:56:55.825Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://github.com/cisco/joy/" title="Joy" target="_blank" rel="noopener">Joy</a>是一个BSD许可的基于libpcap的软件包，用于从实时网络流量或数据包捕获（pcap）文件中提取数据特征，使用类似于IPFIX或Netflow的面向流的模型，然后在JSON中表示这些数据特征。它还包含可应用于这些数据文件的分析工具,Joy可用于大规模探索数据，尤其是安全性和威胁相关数据<br><a id="more"></a></p></blockquote><hr><h2 id="0x01-简述"><a href="#0x01-简述" class="headerlink" title="0x01 简述"></a>0x01 简述</h2><h3 id="1-可获取信息类型"><a href="#1-可获取信息类型" class="headerlink" title="1. 可获取信息类型"></a>1. 可获取信息类型</h3><pre><code>1. IP数据包的长度以及到达时间；2. 数据流中特定数据的经验概率分布情况，以及相应的熵；3. TLS记录的长度以及到达时间；3. 其他非加密的TLS数据，例如提供的加密套件列表、选择的加密套件、clientKeyExchange域的长度、以及服务器证书字符串等等；4. DNS域名、地址以及TTLs；5. HTTP头元素以及HTTP body的前八个字节；6. 与数据流有关的进程名称以及pcap文件</code></pre><h3 id="2-适用范围"><a href="#2-适用范围" class="headerlink" title="2. 适用范围"></a>2. 适用范围</h3><p>Joy旨在用于<strong>安全研究</strong>，<strong>取证</strong>以及（小规模）<strong>网络监控</strong>，以检测漏​​洞，威胁和其他未经授权或不需要的行为。研究人员，管理员，渗透测试人员和安全运营团队可以充分利用这些信息，保护受监控的网络，并在漏洞的情况下，通过<strong>改善防御态势</strong>为更广泛的社区带来好处。对于攻击者来说，Joy同样可以帮助他们实现自己的目的，例如扫描目标网络中潜在的安全漏洞，或者窃取目标网络流数据</p><h3 id="3-工具配置"><a href="#3-工具配置" class="headerlink" title="3. 工具配置"></a>3. 工具配置</h3><p><strong>(1) 解决依赖(Ubuntu)</strong></p><pre><code>sudo apt-get install build-essential libssl-dev libpcap-dev libcurl4-openssl-dev</code></pre><p><strong>（2）下载Joy源代码</strong></p><pre><code>sudo apt-get install gitgit clone https://github.com/cisco/joy.git</code></pre><p><strong>（3）编译安装</strong></p><pre><code>sudo apt-get install gcccd joy./configmake &amp;&amp; make install</code></pre><p><strong>（4）安装检测</strong></p><pre><code>man joy</code></pre><p><img src="http://par628i4r.bkt.clouddn.com/joy%E5%AE%89%E8%A3%85.png" alt="joy"></p><hr><h2 id="0x02-用法详解"><a href="#0x02-用法详解" class="headerlink" title="0x02 用法详解"></a>0x02 用法详解</h2><h3 id="1-General-options"><a href="#1-General-options" class="headerlink" title="1. General options"></a>1. General options</h3><pre><code>1. -x F (string)                            The command -x F causes joy to read configuration commands from the file F2. interface=I (string)                     The command interface=I causes joy to read packets live from network interface I, in online mode3. promisc=1 (boolean)                      If promisc=1, and running in online mode, put the network interface into promiscuous mode4. output=F (string)                        Write output to file F; otherwise stdout is used5. logfile=F (string)                       Write secondary output to file F; otherwise stderr is used. Secondary output consists of status reports,warnings, and errors6. count=C (number)                         Rotate output files so each contains about C records7. upload=userserver:path (string)          Upload data files using the secure copy utility scp to the location userserver:path, after file rotation8. keyfile=F (string)                       When uploading data files using the upload command , use the SSH identity (private key) in file F to authenticate to the server9. anon=F (string)                          Anonymize addresses matching the subnets listed in file F10. retain=1 (boolean)                      If retain=1, retain a local copy of each data file after it is uploaded11. preemptive timeout=1 (boolean)          If preemptive timeout=1, then use active flow timeout logic that uses the packet timestamp to decide if adding that packet to the flow record would trigger a timeout12. nfv9 port=N (number)                    If nfv9 port=1, enable Netflow V9 capture on port N. Netflow v9 [5] reports basic flow telemetry13. ipfix collect port=N (number)           If ipfix collect port=1, enable IPFIX capture on port N. IPFIX [9, 6, 13, 2, 15, 1, 3, 14] is an Internet Engineering Task Force (IETF) standard protocol for flow information export14. ipfix collect online=1 (boolean)        If ipfix collect online=1, have the IPFIX collector listen on a UDP socket15. ipfix export port=N (number)            If ipfix export port=N is set, enable IPFIX export on port N16. ipfix export remote port=N (number)     If ipfix export remote port=N is set, then the IPFIX exporter will send to port N on the remote collector. Otherwise, the default port of 4739 is used17. ipfix export remote host=host (string)  If ipfix export remote host=host is set, then use host as the remote server target for the IPFIX exporter. Otherwise, the default 127.0.0.1 (localhost) address is used18. ipfix export template=type (string)     If ipfix export template=type is set, then use type as the template for IPFIX exporter. The available types are simple and idp, and the default is the former19. aux resource path=path (string)         If aux resource path=path is set, then expect the auxiliary data files to be stored in the directory path20. verbosity=L (boolean)                   If verbosity=L) is set, then the log (secondary) output includes events at level L and higher, where 0=off, 1=debug, 2=info, 3=warning, 4=error, 5=critical. The default value is 4 (error)21. show config=1                           If show config=1, then show the configuration on stderr when the program is started22. show interfaces=1                       If show interfaces=1, then show the interfaces on stderr when the program is started23. username=user                           If username=user is set, then drop privileges to username user after starting packet capture in online mode as root. Otherwise, the default username joy is used</code></pre><h3 id="2-Data-feature-options"><a href="#2-Data-feature-options" class="headerlink" title="2. Data feature options"></a>2. Data feature options</h3><pre><code>1. bpf=&quot;expression&quot;            only process packets matching BPF &quot;expression&quot;2. zeros=1                     include zero-length data (e.g. ACKs) in packet list3. retrans=1                   include TCP retransmissions in packet list4. bidir=1                     merge unidirectional flows into bidirectional ones5. dist=1                      include byte distribution array6. cdist=F                     include compact byte distribution array using the mapping file, F7. entropy=1                   include byte entropy8. http=1                      include HTTP data9. exe=1                       include information about host process associated with flow10. classify=1                 include results of post-collection classification11. num_pkts=N                 report on at most N packets per flow (0 &lt;= N &lt; 200)12. type=T                     select message type: 1=SPLT, 2=SALT13. idp=N                      report N bytes of the initial data packet of each flow14. label=L:F                  add label L to addresses that match the subnets in file F15. URLmodel=URL               URL to be used to retrieve classisifer updates16. model=F1:F2                change classifier parameters, SPLT in file F1 and SPLT+BD in file F217. hd=1                       include header description18. URLlabel=URL               Full URL including filename to be used to retrieve label updates19. wht=1                      include walsh-hadamard transform20. example=1                  include example feature21. dns=1                      report DNS response information22. ssh=1                      report ssh information23. tls=1                      report TLS data (ciphersuites, record lengths and times, ...)24. dhcp=1                     report dhcp information25. http=1                     report http information27. ike=1                      report IKE information28. payload=N                  include N bytes of payload29. salt=1                     include salt feature30. ppi=1                      include per-packet info (ppi)</code></pre><hr><h2 id="0x03-实战浅析"><a href="#0x03-实战浅析" class="headerlink" title="0x03 实战浅析"></a>0x03 实战浅析</h2>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/cisco/joy/&quot; title=&quot;Joy&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Joy&lt;/a&gt;是一个BSD许可的基于libpcap的软件包，用于从实时网络流量或数据包捕获（pcap）文件中提取数据特征，使用类似于IPFIX或Netflow的面向流的模型，然后在JSON中表示这些数据特征。它还包含可应用于这些数据文件的分析工具,Joy可用于大规模探索数据，尤其是安全性和威胁相关数据&lt;br&gt;
    
    </summary>
    
      <category term="0x02 安全技术" scheme="http://yoursite.com/categories/0x02-%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/"/>
    
      <category term="安全工具" scheme="http://yoursite.com/categories/0x02-%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/%E5%AE%89%E5%85%A8%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="SecTools" scheme="http://yoursite.com/tags/SecTools/"/>
    
  </entry>
  
  <entry>
    <title>SSL/TLS协议详解</title>
    <link href="http://yoursite.com/2018/07/24/SSL-TLS%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2018/07/24/SSL-TLS协议详解/</id>
    <published>2018-07-24T10:55:20.000Z</published>
    <updated>2018-08-18T03:56:36.687Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>传输层安全性（TLS)及其前身安全套接字层（SSL），通过计算机网络提供通信安全性的加密协议。广泛用于网页浏览，电子邮件，即时消息和IP语音（VoIP）之类的应用程序中。TLS协议主要旨在提供两个或更多通信计算机应用程序之间的隐私和数据完整性<br><a id="more"></a></p></blockquote><hr><h2 id="SSL协议"><a href="#SSL协议" class="headerlink" title="SSL协议"></a>SSL协议</h2><h3 id="0x01-SSL体系结构"><a href="#0x01-SSL体系结构" class="headerlink" title="0x01 SSL体系结构"></a>0x01 SSL体系结构</h3><p><strong>1. SSL协议栈</strong></p><p>SSL使用TCP提供一种可靠的端对端的安全服务，SSL不是单个协议，它由两层协议组成</p><p><img src="http://pcdbq4c2i.bkt.clouddn.com/SSL%E5%8D%8F%E8%AE%AE%E6%A0%88.png" alt="SSL"></p><p>SSL记录协议对各种更高层协议提供基本的安全服务。SSL中定义的三个较高层协议分别是：握手协议，密码变更规格协议，报警协议，这些SSL协议规范用于管理SSL的交换</p><p><strong>2. 连接与会话</strong></p><p><strong>连接(conection)：</strong>SSL连接是一种能够提供合适服务类型的传输。这种连接是点对点的关系而且短暂，每一条连接都与一个会话连接</p><p><strong>会话(session)：</strong>SSL会话是客户端与服务器之间的一种关联。会话是通过握手协议来创建，所有会话都定义了密码安全参数集合，这些参数可以在多个安全之间共享。</p><p><strong>会话状态参数</strong></p><pre><code>会话标识符(session identifier)：由服务器产生的用于标识活动的或可恢复的会话状态的一个任意字节序列对等证书(peer certificate)：对等的X.509v3证书，此元素可为空压缩方法(compression method)：加密前用于压缩数据的算法密码规格(cipher spec)：包括大块数据加密算法(如空算法，AES算法等)规格和用于计算MAC的散列算法(如MD5,SHA-1算法等)规格。还定义一些密码属性，如散列值长度等主密钥(master secret)：客户端和服务器共享的48字节的会话密钥可恢复性(is resumable)：指明能否把会话用于创建新连接的标志比特</code></pre><p><strong>连接状态参数</strong></p><pre><code>服务端和客户端随机数(server and client random)：由服务器和客户端为每个连接选定的字符串服务器写MAC密钥(server write MAC secret)：服务器发送数据时用于计算MAC值得密钥客户端写MAC密钥(client write MAC secret)：客户端发送数据时用于计算MAC值得密钥服务器写密钥(server write key)：服务器用于加密数据，客户端用于解密的传统加密密钥客户端写密钥(client write key)：客户端用于加密数据，服务器用于解密的传统加密密钥初始化向量(initialization vector)：当CBC模式中的数据块正在使用时，需要为每个密钥配置一个初始化向量(IV)。最初的IV由SSL握手协议初始化，之后的IV值为前一次分组密码算法的最后一个密文分组序列号(sequence number)：建立连接的各方为每条连接发送和接收的消息维护单独序列号。当一方发送或接收改变密码规格的消息时，相应序列号置零，序列号的值不能超过2^64-1</code></pre><h3 id="0x02-SSL记录协议"><a href="#0x02-SSL记录协议" class="headerlink" title="0x02 SSL记录协议"></a>0x02 SSL记录协议</h3><p><strong>1. 提供服务(连接)</strong></p><p><strong>机密性(Confidentiality)：</strong>握手协议定义一个可用于SSL负载的传统加密共享密钥</p><p><strong>消息完整性(Message Integrity)：</strong>握手协议还定义一个用于产生消息认证码(MAC)的共享密钥</p><p><strong>2. 运行流程</strong></p><p><img src="http://pcdbq4c2i.bkt.clouddn.com/SSL%E6%B5%81%E7%A8%8B.png" alt="运行"></p><p><strong>(1) 分段：</strong>将每个上层消息分给为不大于2^14字节的块</p><p><strong>(2) 压缩：</strong>可选，压缩必须是无损并且对内容的长度不能产生多于1024字节的增量，SSLv3(TLS当前版本)中，未规定压缩算法，默认压缩算法为空算法</p><p><strong>(3) 添加MAC，计算消息验证码</strong></p><p><img src="http://pcdbq4c2i.bkt.clouddn.com/MAC%E8%AE%A1%E7%AE%97.png" alt="MAC"></p><p>SSLv3中的两个填充是串接式的填充，HMAC中是异或运算</p><p><strong>(4) 加密(压缩后的消息及MAC)</strong></p><p>使用对称加密算法进行加密，机密造成的块长度增量不超过1024字节，故块的总长度不超过2^14+2048字节</p><p><img src="http://pcdbq4c2i.bkt.clouddn.com/SSL%E5%8A%A0%E5%AF%86.png" alt="加密"></p><p><strong>流加密算法：</strong>MAC码在加密前计算得到，计算所得的MAC码连同明文或压缩后的明文一同被加密</p><p><strong>分组加密算法：</strong>消息MAC码计算结束后，加密发生之前先填充一些填充数据。填充方式为：先进行一定数量的字节填充，然后在最后一个人填充字节上填入填充总长度</p><p><strong>(5) 添加SSL记录头</strong></p><p><strong>header 组成域</strong></p><pre><code>内容类型(Content Type)：8比特，用于处理封闭分段的更高层协议主版本(Major Version)：8比特，表明应用的SSL版本主版本号,SSLv3.0该值为3副版本(Minor Version)：8比特，表明应用的SSL版本副版本号,SSLv3.0该值为0压缩后的长度(Compressed Length)：8比特，以字节为单位的明文块(使用压缩后则为压缩后的明文块)长度，最大值为2^14+2048</code></pre><p>内容类型被定义为密码变更规格(change_cipher_spec)，报警(alert)，握手(handshark)和应用数据(application_data)4种</p><p><strong>3. SSL记录协议格式</strong></p><p><img src="http://pcdbq4c2i.bkt.clouddn.com/SSL%E8%AE%B0%E5%BD%95%E6%A0%BC%E5%BC%8F.png" alt="ssl格式"></p><p><strong>4. SSL记录协议载荷</strong></p><p><img src="http://pcdbq4c2i.bkt.clouddn.com/SSL%E8%AE%B0%E5%BD%95%E8%BD%BD%E8%8D%B7.png" alt="SSL记录载荷"></p><h3 id="0x03-密码变更规格协议"><a href="#0x03-密码变更规格协议" class="headerlink" title="0x03 密码变更规格协议"></a>0x03 密码变更规格协议</h3><p><img src="http://pcdbq4c2i.bkt.clouddn.com/%E5%AF%86%E7%A0%81%E5%8F%98%E6%9B%B4%E8%A7%84%E6%A0%BC.png" alt="密码变更"></p><p>密码变更规格协议是应用SSL记录协议的3个SSL规格协议之一，是最简单的一个协议。本协议只包含一条消息，有一个之为1的字节组成，此消息唯一功能是<strong>使得延迟状态改变为当前状态</strong>，该消息更新了在这一连接上应用的密码机制</p><h3 id="0x04-报警协议"><a href="#0x04-报警协议" class="headerlink" title="0x04 报警协议"></a>0x04 报警协议</h3><p><img src="http://pcdbq4c2i.bkt.clouddn.com/%E6%8A%A5%E8%AD%A6%E5%8D%8F%E8%AE%AE.png" alt="报警"></p><p>报警协议用于将SSL相关的报警传达给对等实体，也按照当前状态的规格进行压缩和加密操作</p><p>这一协议过程每一条消息由连个字节组成，其中第一个字节可取值为<strong>警告(1)</strong>或<strong>致命(2)</strong>以表示消息严重程度，严重程度为致命时，SSL将立即结束当前连接；第二个字节包括一种用于指明具体警告的编码</p><p><strong>致命警告内容</strong></p><p><img src="http://pcdbq4c2i.bkt.clouddn.com/%E8%87%B4%E5%91%BD%E8%AD%A6%E5%91%8A.png" alt="致命"></p><h3 id="0x05-握手协议"><a href="#0x05-握手协议" class="headerlink" title="0x05 握手协议"></a>0x05 握手协议</h3><p><strong>1. 协议概述</strong></p><p>SSL握手协议允许客户端和服务器相互认证，并协商加密和MAC算法，以及用于保护SSL记录中所发送数据加密密钥，握手协议在应用数据<strong>传输之前</strong>使用</p><p><strong>2. 协议组成</strong></p><p><img src="http://pcdbq4c2i.bkt.clouddn.com/%E6%8F%A1%E6%89%8B%E5%8D%8F%E8%AE%AE.png" alt="握手"></p><p>握手协议有客户端和服务器之间的一系列消息交换组成，每条消息包括三个域</p><pre><code>类型(Type)：1字节，表示预定义的10种消息类型之一长度(Length)：3字节，以字节为单位的消息长度内容(Content)：(&gt;=0字节)，相关参数如下所示</code></pre><p><img src="http://pcdbq4c2i.bkt.clouddn.com/%E6%B6%88%E6%81%AF%E7%B1%BB%E5%9E%8B.png" alt="类型"></p><p><strong>3. 握手协议过程</strong></p><p><img src="http://pcdbq4c2i.bkt.clouddn.com/%E6%8F%A1%E6%89%8B%E8%BF%87%E7%A8%8B.png" alt="过程"></p><p><strong>(1) 第一阶段：客户端发起建立连接请求</strong></p><p>此阶段主要是发起逻辑连接并建立与之关联的安全能力</p><p>首先由客户端发送<strong>client_hello</strong>消息启动</p><pre><code>版本(Version)：客户端的SSL最高版本随机数(Random)：由客户端产生的随机序列(32比特时间戳+安全随机数产生器产生的28字节随机数)，用于密钥过程中防止重放攻击会话ID(Session ID)：可变长度的会话标识符。非零值表示客户端希望更新现有连接的参数，零值表示客户端希望为此次会话建立一条新连接密码构件(CiperSuite)：该列表包括客户端支持的密码算法组合，以优先选用递减的顺序给出压缩方法(Compression Methon)：客户端支持的压缩方法列表</code></pre><p>发送完<code>client_hello</code>消息后，客户端等待<code>server_hello</code>消息，版本域包含客户端建议的较低版本和服务器建议的最高版本，服务器产生一个独立于客户端随机域的新随机数域。如果客户端会话ID域的值非零，则服务器取相同值；否则，服务器会话ID域包括一个新会话值</p><p><strong>(2) 第二阶段：</strong>服务器认证和密钥交换</p><p>如果需要认证，则这一阶段的开始以服务器发送其证书为标志，发送的消息包括一个X.509证书或一个X.509证书链。<code>Certificate</code>（证书）消息对于出匿名Diffie-Hellman密钥交换外事必需的；之后，如果必要，将发送一个<code>server_key_exchange</code>(服务器密钥交换)消息</p><p>然后，如果服务器使用的不是匿名Diffie-Hellman算法，则服务器可以向客户端请求证书，<code>certificate_request</code>(证书请求)消息包括两个参数：<code>certificate_type</code>(证书类型)和<code>certificate_authorities</code>(证书机构)</p><p>最后一条消息(必需)是<code>server_done</code>(服务器结束)消息，该消息有服务器发出并示意服务器的hello及相关消息已经结束，此次奥西没有参数，发送完后，服务器要等待客户的响应</p><p><strong>(3) 第三阶段：</strong>客户端认证和密钥交换</p><p>接收到<code>server_done</code>(服务器结束)消息后，如果需要，客户端应该验证服务器提供的证书是否有效，同时检查<code>server_hello</code>参数是否可接受，若条件均满足，客户端将返回一条或更多消息给服务器</p><p>如果服务器已请求证书，则以客户端发送一条<code>certificate</code>消息为这一阶段的开始，如果没有合适的证书可用，那么客户端发送<code>no_ceritificate alert</code>(无证书警报)</p><p>接下来是<code>client_key_exchange</code>(客户端密钥交换)消息，该消息必须在这一阶段发送</p><p>最后，客户端可以发送<code>certificate_verify</code>(证书验证)消息，一边对客户端证书进行显示验证。仅当客户端证书具有签名功能时才会发送该消息</p><p><strong>(4) 第四阶段：完成</strong></p><p>这一阶段完成安全连接的建立，客户端发送一个<code>change_cipher_spec</code>(密码变更规格)消息，并把未定的密码规格复制到当前密码规格中，该消息不是握手协议的一部分。客户端在新算法，新密钥和新秘密值下立即发送<code>finished</code>(结束)消息，<code>finished</code>消息用于验证密钥交换和认证过程是否成功，<code>finished</code>消息是两个散列码的串接</p><p><img src="http://pcdbq4c2i.bkt.clouddn.com/finished.png" alt="finished"></p><p><code>Sender</code>是一个识别码，能够把作为发送者的客户端与<code>handshake_messages</code>区分开来</p><p><code>handshake_message</code>包括从所有握手消息起到<code>Sender</code>码之前的所有数据，但不包括本条消息</p><hr><h2 id="TLS协议"><a href="#TLS协议" class="headerlink" title="TLS协议"></a>TLS协议</h2><h3 id="0x01-协议概述"><a href="#0x01-协议概述" class="headerlink" title="0x01 协议概述"></a>0x01 协议概述</h3><p>运行在传输层之上的最流行的安全协议是传输层安全(Transport Layer Security，TLS)，TLS用于保证Web通信以及其他流行协议的安全，比如POP，IMAP(使用TLS保护后，他们被称为POP3S与IMAPS)。TLS能够在应用程序内部或底部实现，而这些应用程序是运行于底层协议上来实现功能，TLS是SSL的互联网标准版本</p><h3 id="0x02-TLS协议栈"><a href="#0x02-TLS协议栈" class="headerlink" title="0x02 TLS协议栈"></a>0x02 TLS协议栈</h3><p><img src="http://par628i4r.bkt.clouddn.com/TLS%E5%8D%8F%E8%AE%AE%E6%A0%88.png" alt="TLS"></p><p>TLS协议“栈”包括位于底部的<strong>记录层</strong>以及上层协议(称为<strong>信息交换协议</strong>) 中的三个协议，第4个上层协议是使用TLS的应用协议。记录层提供分片、压缩、完整性保护以及加密功能</p><p>TLS是一个客户端/ 服务器协议, 设计用于为两个应用程序的连接提供安全。<code>记录协议</code>提供<strong>分片、压缩、完整性保护</strong>以及对客户端与服务器之间所<strong>交换数据的加密服务</strong>。<code>信息交换(handshaking)协议</code>负责<strong>建立身份、进行认证、提示警报</strong>, 以及为用于每一条连接的记录协议提供唯一的<strong>密钥材料</strong>。信息交换协议包含了4 个特殊的协议: 握手协议、警告协议、密码变更协议以及应用数据协议</p><h3 id="0x03-TLS-SSL协议对比"><a href="#0x03-TLS-SSL协议对比" class="headerlink" title="0x03 TLS/SSL协议对比"></a>0x03 TLS/SSL协议对比</h3><p><strong>1. 版本号</strong></p><p>TLS记录格式与SSL记录格式完全相同，头部中各域的意义也完全相同；唯一不同的是版本号，TLS当前版本，主版本号是3，副版本号是1</p><p><strong>2. 消息验证码</strong></p><p>SSLv3与TLS MAC方案有两点不同：<strong>算法填充方式</strong>和<strong>MAC值计算范围</strong></p><p>TLS使用HAMC算法，填充部分采用<strong>异或</strong>方式；SSLvs填充部分采用与<strong>密钥串接</strong>的方式，填充后的秘密密钥长度等于散列码长度</p><p><img src="http://par628i4r.bkt.clouddn.com/TLS%20MAC.png" alt="MAC"></p><p>TLS的MAC计算公式中，不仅包含了SSLv3的所有域，还包括TLSCompressed.version域，表示正在使用的协议版本号</p><p><strong>3. 伪随机函数</strong></p><p>TLS使用一个称为R<strong>PF的伪随机函数</strong>来扩展密钥以得到密钥产生和验证中的各种密钥块。采用伪随机函数的目的是使用相对较小的共享密钥值，通过某种不会受到针对散列函数和MAC攻击的方法生成较长的数据块</p><p><img src="http://par628i4r.bkt.clouddn.com/%E4%BC%AA%E9%9A%8F%E6%9C%BA%E6%95%B0.png" alt="伪随机"></p><p><strong>4. 报警码</strong></p><p><strong>5. 密码构件</strong></p><p><strong>6. 客户端证书类型</strong></p><p><strong>7. certificate_verify 和 finished消息</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;传输层安全性（TLS)及其前身安全套接字层（SSL），通过计算机网络提供通信安全性的加密协议。广泛用于网页浏览，电子邮件，即时消息和IP语音（VoIP）之类的应用程序中。TLS协议主要旨在提供两个或更多通信计算机应用程序之间的隐私和数据完整性&lt;br&gt;
    
    </summary>
    
      <category term="0x02 安全技术" scheme="http://yoursite.com/categories/0x02-%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/"/>
    
      <category term="安全协议" scheme="http://yoursite.com/categories/0x02-%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/%E5%AE%89%E5%85%A8%E5%8D%8F%E8%AE%AE/"/>
    
    
      <category term="SSL" scheme="http://yoursite.com/tags/SSL/"/>
    
      <category term="TLS" scheme="http://yoursite.com/tags/TLS/"/>
    
  </entry>
  
  <entry>
    <title>TCP/IP网络协议及分析</title>
    <link href="http://yoursite.com/2018/07/11/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E5%8F%8A%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2018/07/11/网络协议及分析/</id>
    <published>2018-07-11T00:09:24.000Z</published>
    <updated>2018-08-18T03:55:15.608Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文对常用TCP/IP网络协议进行简要总结，并用<a href="https://www.wireshark.org/" title="Wireshark" target="_blank" rel="noopener">Wireshark</a>——一个免费开源的网络数据包分析工具对其进行分析</p></blockquote><a id="more"></a><hr><h2 id="0x01-ARP协议"><a href="#0x01-ARP协议" class="headerlink" title="0x01 ARP协议"></a>0x01 ARP协议</h2><h3 id="1-协议基础及原理"><a href="#1-协议基础及原理" class="headerlink" title="1. 协议基础及原理"></a>1. 协议基础及原理</h3><p><strong>(1) ARP协议概述</strong></p><p><strong>逻辑地址：</strong>使不同网络以及没有直接相连的设备之间能够进行通信</p><p><strong>物理地址：</strong>用来在单一网段中交换机直接连接的设备之间能够进行通信</p><p><strong>协议功能：</strong>将已知的IP地址解析成MAC地址，便于主机间能正常通信</p><p><strong>MAC地址通信原理：</strong> 网络中用于连接各个设备的交换机使用了<strong>内容寻址寄存器</strong>（CAM），这个表列出了它在每一个端口的所有连接设备的MAC地址，当交换机收到一个指向特定MAC地址的流量，它就会使用这个表，来确定应该使用哪一个端口发送流量。如果目标的MAC地址是未知的，这个传输设备会首先在它的缓存中查找这个地址，如果没有找到，那么这个地址就需要在网络上额外的通信来进行解析</p><p><strong>(2) APR解析过程</strong></p><p>解析过程使用两种数据包：一个<strong>ARP请求</strong>，一个<strong>ARP响应</strong></p><p><img src="http://paivdtahr.bkt.clouddn.com/ARP%E8%A7%A3%E6%9E%90%E8%BF%87%E7%A8%8B.png" alt="ARP"></p><p><strong>ARP请求：</strong>传输计算机发出ARP请求，发送源IP地址，源MAC地址，目的IP地址，将此数据包广播给网段中的所有设备，请求拥有目的IP对应的MAC地址</p><p><strong>ARP响应：</strong>非此目的IP地址的设备将简单丢弃这个数据包，而拥有这个IP地址的设备将发送一个ARP响应，将MAC地址发送至传输计算机</p><p>解析完成后，传输设备对这个设备MAC与IP对应关系的缓存进行更新，并开始传输数据</p><p><strong>(3) ARP缓存表</strong></p><p><strong>概念：</strong>ARP缓存中包含一个或多个表，用于存储IP地址及其解析过的MAC地址。</p><p><strong>ARP命令：</strong>用于查询本机ARP缓存中的IP地址和MAC地址的对应关系，添加或删除静态对应关系，也可用于验证ARP缓存条目的生命周期；windows下亦可用netsh命令绑定IP-MAC地址</p><p><strong>Windows-ARP</strong></p><pre><code>ARP -s inet_addr eth_addr [if_addr]ARP -d inet_addr [if_addr]ARP -a [inet_addr] [-N if_addr] [-v]-a            通过询问当前协议数据，显示当前 ARP 项，如果指定 inet_addr，则只显示指定计算机的 IP 地址和物理地址。如果不止一个网络接口使用 ARP，则显示每个 ARP 表的项-g            与 -a 相同-v            在详细模式下显示当前 ARP 项，所有无效项和环回接口上的项都将显示inet_addr     指定 Internet 地址-N if_addr    显示 if_addr 指定的网络接口的 ARP 项-d            删除 inet_addr 指定的主机，inet_addr 可以是通配符 *，以删除所有主机-s            添加主机并且将 Internet 地址 inet_addr与物理地址 eth_addr 相关联，物理地址是用连字符分隔的 6 个十六进制字节。该项是永久的eth_addr      指定物理地址if_addr       如果存在，此项指定地址转换表应修改的接口的 Internet 地址。如果不存在，则使用第一个适用的接口</code></pre><p><strong>Windows-Netsh</strong></p><pre><code>用法: netsh [-a AliasFile] [-c Context] [-r RemoteMachine] [-u [DomainName\]UserName] [-p Password | *]             [Command | -f ScriptFile]下列指令有效:此上下文中的命令:?              - 显示命令列表。add            - 在项目列表上添加一个配置项目。advfirewall    - 更改到 `netsh advfirewall&apos; 上下文。bridge         - 更改到 `netsh bridge&apos; 上下文。delete         - 在项目列表上删除一个配置项目。dhcpclient     - 更改到 `netsh dhcpclient&apos; 上下文。dnsclient      - 更改到 `netsh dnsclient&apos; 上下文。dump           - 显示一个配置脚本。exec           - 运行一个脚本文件。firewall       - 更改到 `netsh firewall&apos; 上下文。help           - 显示命令列表。http           - 更改到 `netsh http&apos; 上下文。interface      - 更改到 `netsh interface&apos; 上下文。ipsec          - 更改到 `netsh ipsec&apos; 上下文。lan            - 更改到 `netsh lan&apos; 上下文。mbn            - 更改到 `netsh mbn&apos; 上下文。namespace      - 更改到 `netsh namespace&apos; 上下文。netio          - 更改到 `netsh netio&apos; 上下文。p2p            - 更改到 `netsh p2p&apos; 上下文。ras            - 更改到 `netsh ras&apos; 上下文。rpc            - 更改到 `netsh rpc&apos; 上下文。set            - 更新配置设置。show           - 显示信息。trace          - 更改到 `netsh trace&apos; 上下文。wcn            - 更改到 `netsh wcn&apos; 上下文。wfp            - 更改到 `netsh wfp&apos; 上下文。winhttp        - 更改到 `netsh winhttp&apos; 上下文。winsock        - 更改到 `netsh winsock&apos; 上下文。wlan           - 更改到 `netsh wlan&apos; 上下文。</code></pre><p><strong>Linux-ARP</strong></p><pre><code>Usage:  arp [-vn]  [&lt;HW&gt;] [-i &lt;if&gt;] [-a] [&lt;hostname&gt;]             &lt;-Display ARP cache  arp [-v]          [-i &lt;if&gt;] -d  &lt;host&gt; [pub]               &lt;-Delete ARP entry  arp [-vnD] [&lt;HW&gt;] [-i &lt;if&gt;] -f  [&lt;filename&gt;]            &lt;-Add entry from file  arp [-v]   [&lt;HW&gt;] [-i &lt;if&gt;] -s  &lt;host&gt; &lt;hwaddr&gt; [temp]            &lt;-Add entry  arp [-v]   [&lt;HW&gt;] [-i &lt;if&gt;] -Ds &lt;host&gt; &lt;if&gt; [netmask &lt;nm&gt;] pub          &lt;-&apos;&apos;-    -a                       display (all) hosts in alternative (BSD) style    -e                       display (all) hosts in default (Linux) style    -s, --set                set a new ARP entry    -d, --delete             delete a specified entry    -v, --verbose            be verbose    -n, --numeric            don&apos;t resolve names    -i, --device             specify network interface (e.g. eth0)    -D, --use-device         read &lt;hwaddr&gt; from given device    -A, -p, --protocol       specify protocol family    -f, --file               read new entries from file or from /etc/ethers  &lt;HW&gt;=Use &apos;-H &lt;hw&gt;&apos; to specify hardware address type. Default: ether  List of possible hardware types (which support ARP):    ash (Ash) ether (Ethernet) ax25 (AMPR AX.25)     netrom (AMPR NET/ROM) rose (AMPR ROSE) arcnet (ARCnet)     dlci (Frame Relay DLCI) fddi (Fiber Distributed Data Interface) hippi (HIPPI)     irda (IrLAP) x25 (generic X.25) eui64 (Generic EUI-64) </code></pre><p><strong>实例分析</strong></p><pre><code>1.使用netsh绑定IP和MAC地址(1) 查看接口Idx号,假设为Anetsh i i show in(2) 添加IP-MAC地址绑定netsh -c &quot;i i&quot; add neighbors A &quot;ip&quot; &quot;MAC&quot;(3) 使用arp -a 查看绑定的ARP条目2.添加IP地址为192.168.1.1和MAC地址为00-aa-00-62-c6-09至缓存记录arp -s 192.168.1.1 00-aa-00-62-c6-09手动添加的ARP缓存条目默认为静态3.删除IP地址为192.168.1.1的ARP记录arp -d 192.168.1.1 4.清空所有ARP条目arp -d 或 arp -d *在Linux下删除ARP缓存条目时必须制定接口地址</code></pre><p><strong>(4) ARP数据包结构</strong></p><p><img src="http://paivdtahr.bkt.clouddn.com/ARP%E6%95%B0%E6%8D%AE%E5%8C%85.png" alt="ARP包"></p><pre><code>硬件类型： 数据链路层使用的类型数据，多数情况下是以太网（类型1）协议类型： ARP请求正在使用的高层协议硬件地址长度：正在使用的硬件地址的长度（八位组/字节）协议地址长度：对于制定协议类型所使用的逻辑地址的长度（八位组/字节）操作：ARP数据包的功能：1表示请求，2表示响应发送方硬件地址：发送者的硬件地址发送方协议地址：发送者的高层协议地址目标硬件地址：目标接收方的硬件地址（ARP请求中为0）目标协议地址：目标接收方的高层协议地址</code></pre><h3 id="2-ARP协议包捕获及分析"><a href="#2-ARP协议包捕获及分析" class="headerlink" title="2. ARP协议包捕获及分析"></a>2. ARP协议包捕获及分析</h3><p><strong>(1) 网络环境</strong></p><p><img src="http://paivdtahr.bkt.clouddn.com/wireshark%E4%BD%8D%E7%BD%AE.png" alt="ARP"></p><p>可选择与路由器直接通信，也可使用两台PC通信来产生ARP数据包</p><p><strong>(2) 使用捕获过滤器</strong></p><pre><code>1.在主机pc1上启动wireshark，设置捕获条件，然后start2.使用捕获过滤器仅捕获ARP包，ARP包不会主动发送，需主机间进行通信；在主机PC2上执行ping命令，来产生ARP包供Wiresahrk捕获3.who has ip_1? tell ip_2 帧为ARP请求包(ip_2主机请求IP为ip_1的MAC地址)；ip_1 is at MAC_1帧为ARP响应包(IP为ip_1的主机响应，传送MAC_1)</code></pre><p><strong>(3) ARP协议报文</strong></p><p><strong>ARP请求协议报文</strong></p><p><img src="http://paivdtahr.bkt.clouddn.com/ARP%E8%AF%B7%E6%B1%82.png" alt="request"></p><p><img src="http://paivdtahr.bkt.clouddn.com/request.png" alt=""></p><p><strong>ARP响应协议报文</strong></p><p><img src="http://paivdtahr.bkt.clouddn.com/ARP%E5%93%8D%E5%BA%94.png" alt="reply"></p><p><img src="http://paivdtahr.bkt.clouddn.com/%E5%93%8D%E5%BA%94.png" alt=""></p><hr><h2 id="0x02-IP协议"><a href="#0x02-IP协议" class="headerlink" title="0x02 IP协议"></a>0x02 IP协议</h2><h3 id="1-协议原理及基础"><a href="#1-协议原理及基础" class="headerlink" title="1. 协议原理及基础"></a>1. 协议原理及基础</h3><p><strong>(1) 简述</strong></p><p>IP是TCP/IP协议族中最为核心的协议，所有的TCP、UDP、ICMP及IGMP数据都以IP数据报格式传输，IP提供<strong>不可靠</strong>、<strong>无连接</strong>的数据报传送服务</p><p><strong>不可靠（unreliable）</strong>的意思是它不能保证IP数据报能成功地到达目的地。IP仅提供最好的传输服务。如果发生某种错误时，如某个路由器暂时用完了缓冲区，IP有一个简单的错误处理算法：丢弃该数据报，然后发送ICMP消息报给信源端。任何要求的可靠性必须由上层来提供（如TCP）</p><p><strong>无连接（connectionless）</strong>这个术语的意思是IP并不维护任何关于后续数据报的状态信息。每个数据报的处理是相互独立的。这也说明，IP数据报可以不按发送顺序接收。如果一信源向相同的信宿发送两个连续的数据报（先是A，然后是B），每个数据报都是独立地进行路由选择，可能选择不同的路线，因此B可能在A到达之前先到达</p><p><strong>(2) IP地址</strong></p><p><strong>功能：</strong> IP地址是一个32位地址，用来唯一标识连接到网络的设备</p><p><strong>表示：</strong> 点分十进制，以A.B.C.D的形式，构成IP地址的四组1和0分别转换为十进制0到255之间的数。</p><p><strong>网络掩码：</strong> 每个IP地址都包含两个部分：网络地址和主机地址，网络地址用来标识设备所连接到的局域网，之际地址表示这个网络的设备本身。这由网路掩码的地址决定，网络掩码长32位，设为1的每一位标识IP地址对应部分属于网络地址，剩下设为0的部分标识主机地址</p><p><img src="http://paivdtahr.bkt.clouddn.com/%E6%8E%A9%E7%A0%81.png" alt="mask"></p><p><strong>CIDR表示法：</strong> IP地址和网络掩码位简便起见，常被写成无类型域间路由（Classless Inter-Domain Routing，<strong>CIDR</strong>）的形式。完整IP地址后有一左斜杠（/），以及一个用来表示IP地址中网络部分位数的数字。如IP地址10.10.1.22和网络掩码225.225.0.0，在CIDR表示法下被写成10.10.1.22/16的形式</p><p><strong>(3) 存活时间</strong></p><p>存活时间（<strong>TTL</strong>）值定义了在该数据包丢弃之前，所能经历的时间，或者能经过的最大的路由数目。TTL在数据包创建时被定义，通常在每次被发往一个路由器的时候减1，当TTL减为0时，如果这个数据包的最终目的地不再这个网络中，则此数据包将会被丢弃</p><p><strong>(4) IP分片分析</strong></p><p><strong>简述：</strong> 数据包分片是将一个数据流分为更小的片段，是IP解决跨域不同类型网络是可靠传输的一个特性。一个数据包的分片主要是基于第二层数据链路协议所使用的最大传输单元（Maximum Transmission Unit，<strong>MTU</strong>）的大小，以及使用这些第二层协议的设备配置情况。</p><p><strong>MTU：</strong> 数据链路层协议多用以太网，<br>其默认MTU为1500，即以太网的网络上所能传输的最大数据包大小为1500字节（不包括14字节的以太网头本身）。MTU是基于接口进行设定，通常可以手工修改</p><p><strong>分片原理：</strong> 当一个设备准备传输一个 IP数据包时，它会比较这个数据包的大小，以及将要把这个数据包传送出去的网络接口MTU，用于决定是否要将此数据包分片。如果数据包的大小大于MTU，那么这个数据包就会被分片</p><p><strong>分片步骤</strong></p><pre><code>1. 设备数据分为若干个可成功进行传输的数据包2. 每个IP头的总长度域会被设置为每个分片的片段长度3. 更多分片标志将会被数据流所有的数据包中设置为1，除了最后一个数据包4. IP头重分片部分的分片偏移将会被设置5. 数据包被发送出去</code></pre><h3 id="2-IP数据报捕获及分析"><a href="#2-IP数据报捕获及分析" class="headerlink" title="2. IP数据报捕获及分析"></a>2. IP数据报捕获及分析</h3><p><strong>(1) 网络环境</strong></p><p><img src="http://paivdtahr.bkt.clouddn.com/wireshark.png" alt=""></p><p>使用两个路由器(可证明TTL值的变化)，将三台主机分割为两个网段</p><p><strong>(2) 捕获IP数据包</strong></p><pre><code>1. Capture|Options设置捕获条件2. 访问网页或者执行ping命令(以免捕获大量数据包)3. 访问网页捕获到DNS,TCP,HTTP等协议的包都包含有IP头部详细信息4. 设置显示过滤条件，可查看特定IP的协议包</code></pre><p><img src="http://paivdtahr.bkt.clouddn.com/IPping.png" alt=""></p><p><strong>(3) 捕获IP分片数据包</strong></p><p>如果一个数据包超过1500个字节，就需要将该包进行分片发送，通过使用ICMP包来产生IP分片数据包(IP首部占用20字节，ICMP首部占用8字节，所捕获到的ICMP包大小最大为1472字节，需指定发送的ICMP包大于1472字节)</p><p><strong>Windows：</strong> <code>ping ip -l size</code></p><p><strong>Linux：</strong><code>ping ip -s packetsize</code></p><p><img src="http://paivdtahr.bkt.clouddn.com/IP%E5%88%86%E7%89%87.png" alt=""></p><p><strong>(4) IP数据包分析</strong></p><p><img src="http://paivdtahr.bkt.clouddn.com/ip%E6%95%B0%E6%8D%AE%E5%8C%85.png" alt=""></p><p><img src="http://paivdtahr.bkt.clouddn.com/IP%E6%8A%A5%E6%96%87.png" alt="IP"></p><pre><code>版本号（Version）: IP所使用的版本首部长度（Header Length）: IP头的长度服务类型（Type of Service）: 优先级标志位和服务类型标志位，被路由器用来进行流量的优先排序总长度（Total Length）: IP头与数据包中数据的长度标识符（Identification）: 一个唯一的标识数字，用来标识一个数据包或者被分片数据包的次序标记（Flags）: 用来标记一个数据包是否是一组分片数据包的一部分分片偏移（Fragment Offset）：一个数据包就是一个分片，这个域中的值就会被用来将数据包以正确的形式重新组装存活时间（Time to Live）: 用来定义数据包的生存周期，以经过路由器的跳数/秒数进行描述协议（Protocol）: 用来标识在数据包系列中上层协议数据包的类型首部校验和（Header Checksum）: 一个错误检测机制，用来确认IP头的内容没有被损坏或者篡改源IP地址（Source IP Address）: 发出数据包的主机IP地址目的IP地址（Destination IP Address）：数据包目的地的IP地址选项（Options）: 保留为额外的IP选项，它包含着源站选路和时间戳的一些选项数据（Data）: 使用IP传递的实际数据</code></pre><hr><h2 id="0x03-ICMP协议"><a href="#0x03-ICMP协议" class="headerlink" title="0x03 ICMP协议"></a>0x03 ICMP协议</h2><h3 id="1-协议原理及基础-1"><a href="#1-协议原理及基础-1" class="headerlink" title="1. 协议原理及基础"></a>1. 协议原理及基础</h3><p><strong>(1) 协议简述</strong></p><p>互联网控制报文协议（Internet Control Message Protocol，ICMP）是互联网协议族的核心协议之一，是一种面向<strong>无连接</strong>的协议，它是TCP/IP协议族的一个子协议，用于IP主机，路由器直接传递控制消息。控制消息是指网络通不通，主机是否可达，路由是否可用等网络消息。</p><p><strong>(2) </strong>ICMP协议头部</p><p><img src="http://paivdtahr.bkt.clouddn.com/ICMP.png" alt="ICMP"></p><pre><code>类型（Type）: ICMP的类型,标识生成的错误报文代码（Code）: 进一步划分ICMP的类型,该字段用来查找产生错误的原因校验和（Checksum）: 用来保证ICMP头和数据抵达目的地时的完整性可变域（Variable）: 依赖于类型和代码域的部分</code></pre><p><strong>(3) Echo请求与响应</strong></p><p><img src="http://paivdtahr.bkt.clouddn.com/echo.png" alt=""></p><p>ping每次想一个设备发送一个数据包，并等待回复，以确定设备是否可连接；当主机A向主机B发送一个Echo Ping 请求包时，主机B就会向主机A发送一个Echo Ping 响应包</p><h3 id="2-ICMP协议包捕获"><a href="#2-ICMP协议包捕获" class="headerlink" title="2. ICMP协议包捕获"></a>2. ICMP协议包捕获</h3><p><strong>(1) 网络环境</strong></p><p><img src="http://paivdtahr.bkt.clouddn.com/ICMP-wire.png" alt=""></p><p><strong>(2) 捕获正常ICMP数据包</strong></p><pre><code>1. 启动wireshark工具，设置捕获过滤条件2. 配置信息设置完后，单击star开始捕获数据3. 在PC1主机上执行ping命令来捕获ICMP数据包</code></pre><p><img src="http://paivdtahr.bkt.clouddn.com/ICMP%E6%95%B0%E6%8D%AE%E5%8C%85.png" alt=""></p><p><strong>(3) 捕获请求超时的数据包</strong></p><p>当网络连通性不好时，执行ping命令，会返回请求超时的数据包，默认情况下ping命令发出Echo ping请求后，若2秒内未收到Echo ping响应，就会收到超时的数据包</p><pre><code>1. 启动wireshark工具，设置捕获过滤条件2. 配置信息设置完后，单击star开始捕获数据3. 执行tracert命令，捕获响应超时的数据包(Linux 下执行 traceroute -I ip)</code></pre><p><img src="http://paivdtahr.bkt.clouddn.com/no-replay.png" alt=""></p><p>在Packet List面板中的Info列可以看到某些包信息为<strong>Time-to-live execded</strong>(超时)，表示该包响应超时</p><p><strong>(4) 捕获目标主机不可达的数据包</strong></p><p>当中间路由器不能给数据包找到路由或目的主机不能交付数据包时，中间路由器或目的主机将会丢弃这个数据包，然后，发出数据包的源点发送目标主机不可达的报文</p><ol><li><p>启动wireshark工具，设置捕获过滤条件</p></li><li><p>配置信息设置完后，单击star开始捕获数据</p></li><li><p>在PC1主机上执行ping命令，ping一个不存在的主机，将会捕获到目标主机不可达的数据包</p></li></ol><p><img src="http://paivdtahr.bkt.clouddn.com/icmp%E4%B8%8D%E5%AD%98%E5%9C%A8.png" alt=""></p><h3 id="3-ICMP报文类型"><a href="#3-ICMP报文类型" class="headerlink" title="3. ICMP报文类型"></a>3. ICMP报文类型</h3><p><strong>(1) ICMP请求报文类型</strong></p><p><img src="http://paivdtahr.bkt.clouddn.com/ICMP%E8%AF%B7%E6%B1%82%E6%8A%A5%E6%96%87.png" alt=""></p><p><strong>(2) ICMP响应报文类型</strong></p><p><img src="http://paivdtahr.bkt.clouddn.com/ICMP%E5%93%8D%E5%BA%94%E6%8A%A5%E6%96%87.png" alt=""></p><p><strong>(3) ICMP协议提供的诊断报文类型</strong></p><p><img src="http://paivdtahr.bkt.clouddn.com/ICMP%E8%AF%8A%E6%96%AD%E6%8A%A5%E6%96%87.png" alt=""></p><h3 id="4-ICMP数据包分析"><a href="#4-ICMP数据包分析" class="headerlink" title="4. ICMP数据包分析"></a>4. ICMP数据包分析</h3><p><strong>(1) Echo Ping 请求包</strong></p><p><img src="http://paivdtahr.bkt.clouddn.com/request%E6%95%B0%E6%8D%AE%E5%8C%85.png" alt=""></p><p><strong>(2) Echo Ping 响应包</strong></p><p><img src="http://paivdtahr.bkt.clouddn.com/reply%E6%95%B0%E6%8D%AE%E5%8C%85.png" alt=""></p><p><strong>(3) 请求超时数据包</strong></p><p><img src="http://paivdtahr.bkt.clouddn.com/time-to-live.png" alt=""></p><p><strong>(4) 目标主机不可达数据包</strong></p><p><img src="http://paivdtahr.bkt.clouddn.com/%E4%B8%BB%E6%9C%BA%E4%B8%8D%E5%8F%AF%E8%BE%BE.png" alt=""></p><hr><h2 id="0x04-TCP协议"><a href="#0x04-TCP协议" class="headerlink" title="0x04 TCP协议"></a>0x04 TCP协议</h2><h3 id="1-协议基础及简述"><a href="#1-协议基础及简述" class="headerlink" title="1. 协议基础及简述"></a>1. 协议基础及简述</h3><p><strong>(1) 简述</strong></p><p>TCP提供一种<strong>面向连接的</strong>、<strong>可靠的</strong>字节流服务。面向连接意味着两个使用TCP的应用（通常是一个客户和一个服务器）在彼此交换数据之前必须先建立一个TCP连接，它能够处理数据的顺序和错误恢复，并最终保证数据能够达到其应达到的地方</p><p><strong>(2) TCP端口</strong></p><p><strong>TCP使用端口传输数据</strong></p><p><img src="http://paivdtahr.bkt.clouddn.com/TCP%E7%AB%AF%E5%8F%A3.png" alt="port"></p><p><strong>端口分类（TCP通信角度）</strong></p><p><strong>1~1023：</strong>标准端口组（忽略被预留的0），特定服务会用到这些通常位于标准端口分组中的标准端口</p><p><strong>1024~65535：</strong>临时端口组（<strong>1024~49151</strong> 称为注册端口：松散地绑定于一些服务，多数没有明确的定义服务对象，不同程序可根据实际需要自己定义；<strong>49152~65535</strong> 称为动态端口：一般不固定分配某种服务，而是动态分配）</p><p><strong><a href="http://tool.oschina.net/commons?type=7" title="常用端口列表" target="_blank" rel="noopener">常用端口列表</a></strong></p><p><strong>实例分析</strong></p><p><strong>(3) TCP三次握手（建立连接）</strong></p><p><strong>握手目的</strong></p><pre><code>1. 保证源主机确定目的主机在线，并且可以进行通信2. 让源主机检查它是否正在监听试图去连接的端口3. 允许源主机向接收者发送它的其实序列号，是的两台主机可以将数据包流保持有序</code></pre><p><strong>握手过程</strong></p><p><img src="http://paivdtahr.bkt.clouddn.com/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B.png" alt="三次"></p><ol><li><p><strong>第一阶段：</strong>Client将标志位SYN置为1，随机产生一个值seq=J，并将该数据包发送给Server，Client进入SYN_SENT状态，等待Server确认</p></li><li><p><strong>第二阶段：</strong>Server收到数据包后由标志位SYN=1知道Client请求建立连接，Server将标志位SYN和ACK都置为1，ack=J+1，随机产生一个值seq=K，并将该数据包发送给Client以确认连接请求，Server进入SYN_RCVD状态</p></li><li><p><strong>第三阶段：</strong>Client收到确认后，检查ack是否为J+1，ACK是否为1，如果正确则将标志位ACK置为1，ack=K+1，并将该数据包发送给Server，Server检查ack是否为K+1，ACK是否为1，如果正确则连接建立成功，Client和Server进入ESTABLISHED状态，完成三次握手，随后Client与Server之间可以开始传输数据</p></li></ol><p><strong>(4) TCP四次握手（终止连接）</strong></p><p><strong>原因简析</strong></p><p>由于TCP连接时<strong>全双工</strong>的，因此，每个方向都必须要单独进行关闭，这一原则是当一方完成数据发送任务后，发送一个<strong>FIN</strong>来终止这一方向的连接，收到一个FIN只是意味着这一方向上没有数据流动了，即不会再收到数据了，但是在这个TCP连接上仍然能够发送数据，直到这一方向也发送了FIN。首先进行关闭的一方将执行主动关闭，而另一方则执行被动关闭</p><p><strong>握手过程</strong></p><p><img src="http://paivdtahr.bkt.clouddn.com/TCP%E5%9B%9B%E6%AC%A1%E6%8F%A1%E6%89%8B.png" alt="四次"></p><ol><li><p><strong>第一阶段：</strong>Client发送一个FIN，用来关闭Client到Server的数据传送，Client进入FIN_WAIT_1状态</p></li><li><p><strong>第二阶段：</strong>Server收到FIN后，发送一个ACK给Client，确认序号为收到序号+1（与SYN相同，一个FIN占用一个序号），Server进入CLOSE_WAIT状态</p></li><li><p><strong>第三阶段：</strong>Server发送一个FIN，用来关闭Server到Client的数据传送，Server进入LAST_ACK状态</p></li><li><p><strong>第四阶段：</strong>Client收到FIN后，Client进入TIME_WAIT状态，接着发送一个ACK给Server，确认序号为收到序号+1，Server进入CLOSED状态，完成四次挥手</p></li></ol><h3 id="2-TCP数据包捕获"><a href="#2-TCP数据包捕获" class="headerlink" title="2. TCP数据包捕获"></a>2. TCP数据包捕获</h3><p><strong>(1) 使用捕获过滤器</strong></p><p><strong>网络环境</strong></p><p><img src="http://paivdtahr.bkt.clouddn.com/TCP%E6%8B%93%E6%89%91.png" alt=""></p><p><strong>捕获过程</strong></p><pre><code>1. 启动wireshark，选择Capture|Options，设置捕获条件，单击start开始捕获2. 访问web服务器以产生TCP协议的数据包3. 想要捕获TCP四次断开的数据包时，手动断开C-S连接，关闭web网页以捕获TCP四次断开的数据包</code></pre><p><img src="http://paivdtahr.bkt.clouddn.com/fin-ack.png" alt=""></p><p>从该界面Info列中看到标志位<code>[FIN,ACK]</code>的包时，表示捕获到TCP四次断开的数据包</p><p><strong>(2) 显示过滤器及着色</strong></p><p><strong>三次握手过滤</strong></p><p>使用TCP协议中的标志位对数据包进行过滤，过滤<code>SYN=1</code>的数据包(三次握手)，显示过滤器输入<code>tcp.flags.syn==1</code>，Info列数据包描述为<code>SYN</code>和<code>[SYN，ACK]</code>包</p><p><img src="http://paivdtahr.bkt.clouddn.com/syn.png" alt=""></p><p><strong>三次握手着色</strong></p><pre><code>1. 显示过滤器输入ip.addr==ip1 and ip.addr==ip2，将两台主机过滤2. 选择数据帧单击右键，选择Colorize Conversation|TCP|Color，进行高亮着色3. 可选择File|Export Specified Packets，指定范围到处捕获文件</code></pre><p><strong>四次握手过滤</strong></p><p>若需要过滤<code>FIN=1</code>的数据包(四次断开)，使用<code>tcp.flags.fin==1</code>显示过滤器进行过滤，Info列数据包是<code>[FIN，ACK]</code>包</p><p><img src="http://paivdtahr.bkt.clouddn.com/fin.png" alt=""></p><p><strong>四次握手显示及着色</strong></p><pre><code>1. 打开捕获文件，使用tcp.flags.fin==1过滤TCP四次断开的数据包2. 显示过滤器输入ip.addr==ip1 and ip.addr==ip2，过滤特定主机间的数据包3. 选择标志位为[FIN，ACK] 的数据包进行着色，可高亮显示TCP断开连接的整个会话4. 选择特定数据帧，右键选择Mark Packet选项进行标记，再选择File|Export Specified Packets，在PAcket Range栏中选择Marked packet选项导出捕获文件</code></pre><h3 id="3-TCP数据包分析"><a href="#3-TCP数据包分析" class="headerlink" title="3. TCP数据包分析"></a>3. TCP数据包分析</h3><p><strong>(1) TCP 首部</strong></p><p><img src="http://paivdtahr.bkt.clouddn.com/TCP%E5%A4%B4%E9%83%A8.png" alt="TCP头部"></p><pre><code>1. 源端口（Source Port）: 用于传输数据包的端口2. 目的端口（Destination Port）: 数据包将要被发送到的端口3. 序号（Sequence Number）: 用于表示一个TCP片段，这个域用来保证数据流中的部分没有缺失4. 确认号（Acknowledgement Number）: 此数字是通信中希望从另一个设备得到的下一个数据包的序号5. 保留：包括Reserved,Nonce,CWR和ECN-Echo,共6个比特位6. 标记（Flag）: 用来表示所传输的TCP数据包的类型，包括URG,ACK,PSH,RST,SYN 和 FIN 6种7. 窗口大小（Window Size）：TCP接收者缓冲的字节大小8. 校验和（Checksum）: 用来保证TCP头和数据的内容在抵达目的地时的完整性9. 选项（Options）: 各种可选的域，可在TCP数据包中进行指定10. 紧急指针（Urgent Pointer）: 如果设置了URG位，这个域将被检查作为额外的指令，告诉CPU从数据包的哪里开始读取数据可以在TCP数据包中进行指定</code></pre><p><strong>(2) TCP 标记</strong></p><pre><code>1. URG：紧急标志；此标志表示TCP的紧急指针域有效，保证TCP连接不被中断，并督促中间设备尽快处理这些数据2. ACK：确认标志；此标志表示应答域有效，就是说前面所说的TCP应答号将会包含在TCP数据包中；有两个取值：0和1，为1的时候表示应答域有效，反之为03. PSH：这个标志位表示Push操作；所谓Push操作就是指在数据包到达接收端以后，立即传送给应用程序，而不是在缓冲区中排队4. RST：这个标志表示连接复位请求；用来复位那些产生错误的连接，也被用来拒绝错误和非法的数据包5. SYN：表示同步序号，用来建立连接。SYN标志位和ACK标志位搭配使用，当连接请求的时候，SYN=1，ACK=0；连接被相应的时 候，SYN=1，ACK= 1；这个标志的数据包经常被用来进行端口扫描。扫描者发送一个只有SYN的数据包，如果对方主机响应了一个数据包回来，就表明这台主机存在这个端口；但是 由于这种扫描方式只是进行TCP三次握手的第一次握手，因此这种扫描的成功表示被扫描的机器不很安全，一台安全的主机将会强制要求一个连接严格的进行 TCP的三次握手6. FIN：表示发送端已经达到数据末尾，也就是说双方的数据传送完成，没有数据可以传送了，发送FIN标志位的TCP数据包后，连接将被断开。这个标志的数 据包也经常被用于进行端口扫描。当一个FIN标志的TCP数据包发送到一台计算机的特定端口，如果这台计算机响应了这个数据，并且反馈回来一个RST标志 的TCP包，就表明这台计算机上没有打开这个端口，但是这台计算机是存在的；如果这台计算机没有反馈回来任何数据包，这就表明，这台被扫描的计算机存在这个端口</code></pre><hr><h2 id="0x05-UDP协议"><a href="#0x05-UDP协议" class="headerlink" title="0x05 UDP协议"></a>0x05 UDP协议</h2><h3 id="1-UDP协议概述"><a href="#1-UDP协议概述" class="headerlink" title="1. UDP协议概述"></a>1. UDP协议概述</h3><p>用户数据报协议（User Datagram Protocol,UDP）是一个简单的<strong>面向数据报</strong>的运输层协议，是一种尽力服务。UDP协议是<strong>无连接协议</strong>，不会正式地建立和结束主机之间的连接，也不存在握手和终止过程。UDP提供<strong>不可靠服务</strong>，主要是为了提供高速的传输，所以依赖于UDP的协议通常都会有其内置的可靠性服务，或者使用ICMP的一些功能来保证连接更可靠</p><h3 id="2-UDP数据包捕获"><a href="#2-UDP数据包捕获" class="headerlink" title="2. UDP数据包捕获"></a>2. UDP数据包捕获</h3><p><strong>(1) 网络环境</strong></p><p><img src="http://paivdtahr.bkt.clouddn.com/UDPhuanjing.png" alt=""></p><p><strong>(2) 捕获步骤</strong></p><pre><code>1. 启动wireshark，设置捕获过滤条件，单击Start开始捕获2. 手动运行UDP协议程序(如QQ程序使用QICQ协议)，捕获UDP数据包</code></pre><p><img src="http://paivdtahr.bkt.clouddn.com/QICQ.png" alt=""></p><h3 id="3-UDP数据包分析"><a href="#3-UDP数据包分析" class="headerlink" title="3. UDP数据包分析"></a>3. UDP数据包分析</h3><p><strong>(1) UDP首部格式</strong></p><p><img src="http://paivdtahr.bkt.clouddn.com/UDP.png" alt="UDP"></p><pre><code>源端口：用来传输数据包的端口目标端口：数据包将要被传输到的端口数据包长度：数据包的字节长度校验和：用来确保UDP头和数据到达时的完整性数据：被UDP封装进去的数据，包括应用层协议头部和用户发出去的数据</code></pre><p><strong>(2) 分析UDP数据包</strong></p><p><img src="http://paivdtahr.bkt.clouddn.com/UDP%E6%95%B0%E6%8D%AE%E5%8C%85.png" alt=""></p><hr><h2 id="0x06-DHCP协议"><a href="#0x06-DHCP协议" class="headerlink" title="0x06 DHCP协议"></a>0x06 DHCP协议</h2><h3 id="1-DHCP协议简述"><a href="#1-DHCP协议简述" class="headerlink" title="1. DHCP协议简述"></a>1. DHCP协议简述</h3><p><strong>(1) DHCP 简述</strong></p><p>动态主机配置协议DHCP（Dynamic Host Configuration Protocol）是一个局域网的网络协议，能够让设备<strong>自动获取IP地址</strong>，它使用UDP协议工作。DHCP有3个端口，其中UDP67和UDP68为正常的服务器端口，费别作为DHCP Server和DHCP Client的服务器端口；546号端口用于DHCPv6 Client，为DHCP failover服务</p><p><strong>(2) DHCP作用</strong></p><p>DHCP基于Client/Server模式，为互联网上主机提供地址和配置参数</p><pre><code>1. 保证任何IP地址在同一时刻只能由一台DHCP客户机使用2. DHCP可以给用户分配永久固定的IP地址3. DHCP允许用其他方法获得IP地址的主机共存，如手动配置IP地址的主机4. DHCP服务器向现有的BOOTP客户端提供服务</code></pre><p><strong>(3) DHCP分配IP地址方式</strong></p><pre><code>1. 自动分配(Automatic Allocation)：DHCP给客户端分配永久性的IP地址2. 动态分配(Dynamic Allocation)：DHCP给客户端分配的IP地址过一段时间会过期，客户端可主动释放该地址3. 手动配置(Manual Allocation)：由用户手动为客户端指定IP地址</code></pre><h3 id="DHCP头结构"><a href="#DHCP头结构" class="headerlink" title="DHCP头结构"></a>DHCP头结构</h3><p><img src="http://paivdtahr.bkt.clouddn.com/DHCP%E6%8A%A5%E6%96%87.png" alt="DHCP"></p><pre><code>操作代码（OpCode）：用来指出这个数据包时DHCP请求还是DHCP回复硬件类型（Hardware Type）：硬件地址类型（10MB以太网，IEEE802，ATM以及其他）跳数（Hops）：中继代理用来帮助寻找DHCP服务器事物ID（Transaction ID）：用来匹配请求和响应的一个随机数消耗时间（Seconds Elasped）：客户端第一次向DHCP服务器发出地址请求后时间标记（Flags）：DHCP能够接受的流量类型（单播，广播及其他）客户端IP地址（Client IP Address）：客户端的IP地址（由“你的”IP地址域派生）&quot;你的&quot;IP地址（Your IP Address）：DHCP服务器提供的地址（最终成为客户端IP地址域的值）服务器IP地址（Server IP Address）：DHCP服务器的IP地址网关IP地址（Gateway IP Address）：网络默认网关的IP地址客户端硬件地址（Client Hardware Address）：客户端的MAC地址服务器主机名（Server Host Name）：服务器主机名（可选）启动文件（Boot File）：DHCP所使用的启动文件（可选）选项（Options）：用来对DHCP数据包进行扩展，一提供更多功能</code></pre><p><strong>(4) DHCP工作流程</strong></p><p><img src="http://paivdtahr.bkt.clouddn.com/DHCP%E6%B5%81%E7%A8%8B.png" alt=""></p><p>DHCP最主要的任务就是在续租过程中向客户端分配IP地址，续租过程在一个客户端与DHCP服务器之间进行。DHCP的续租过程通常被成为DORA过程，它使用了4种类型的DHCP数据包：发现（Dicover），提供（Offer），请求（Request）和确认（Acknowledgement）</p><ol><li><strong>发现阶段</strong></li></ol><p>DHCP客户机寻找DHCP服务器的阶段。DHCP客户机以广播方式（因为DHCP服务器的IP地址对于客户机来说是未知的）发送DHCP discover发现信息来寻找DHCP服务器，即向地址255.255.255.255发送特定的广播信息。网络上每一台安装了TCP/IP协议的主机都会接收到这种广播信息，但只有DHCP服务器才会做出响应</p><p><img src="http://paivdtahr.bkt.clouddn.com/%E5%8F%91%E7%8E%B0.png" alt="discover"></p><ol start="2"><li><strong>提供阶段</strong></li></ol><p>DHCP服务器提供IP地址的阶段。在网络中接收到DHCP discover发现信息的DHCP服务器都会做出响应，它从尚未出租的IP地址中挑选一个分配给DHCP客户机，向DHCP客户机发送一个包含出租的IP地址和其他设置的DHCP offer提供信息</p><p><img src="http://paivdtahr.bkt.clouddn.com/%E6%8F%90%E4%BE%9B.png" alt="提供"></p><ol start="3"><li><strong>请求阶段</strong></li></ol><p>DHCP客户机选择某台DHCP服务器提供的IP地址的阶段。如果有多台DHCP服务器向DHCP客户机发来的DHCP offer提供信息，则DHCP客户机只接受第一个收到的DHCP offer提供信息，然后它就以广播方式回答一个DHCP request请求信息，该信息中包含向它所选定的DHCP服务器请求IP地址的内容。之所以要以广播方式回答，是为了通知所有的DHCP服务器，他将选择某台DHCP服务器所提供的IP地址</p><p><img src="http://paivdtahr.bkt.clouddn.com/%E8%AF%B7%E6%B1%82.png" alt="请求"></p><ol start="4"><li><strong>确认阶段</strong></li></ol><p>DHCP服务器确认所提供的IP地址的阶段。当DHCP服务器收到DHCP客户机回答的DHCP request请求信息之后，它便向DHCP客户机发送一个包含它所提供的IP地址和其他设置的DHCP ack确认信息，告诉DHCP客户机可以使用它所提供的IP地址。然后DHCP客户机便将其TCP/IP协议与网卡绑定，另外，除DHCP客户机选中的服务器外，其他的DHCP服务器都将收回曾提供的IP地址</p><p><img src="http://paivdtahr.bkt.clouddn.com/%E7%A1%AE%E8%AE%A4.png" alt="ack"></p><p><strong>(5) 选项和消息类型</strong></p><p>DHCP依赖于其可选项来提供真正的灵活性，数据包的DHCP选项在大小和内容上都可以变化，数据包的整体大小则取决于其所使用的选项；所以DHCP数据包都需要唯一选项就是消息类型选项（选项53），这个选项标识着DHCP客户端或者服务器将如何处理数据包中的信息</p><p><img src="http://paivdtahr.bkt.clouddn.com/%E6%B6%88%E6%81%AF%E7%B1%BB%E5%9E%8B.png" alt="消息"></p><hr><h2 id="0x07-DNS分析"><a href="#0x07-DNS分析" class="headerlink" title="0x07 DNS分析"></a>0x07 DNS分析</h2><h3 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h3><p>域名系统（DNS）是一种用于TCP/IP应用程序的分布式数据库，它提供主机名字和IP地址之间的转换及有关电子邮件的选路信息，DNS服务器存储了一个有着IP地址和DNS名字映射资源记录的数据库，并将其和客户端与其它DNS服务器共享</p><h3 id="DNS报文格式"><a href="#DNS报文格式" class="headerlink" title="DNS报文格式"></a>DNS报文格式</h3><p><img src="http://paivdtahr.bkt.clouddn.com/DNS.png" alt="DNS"></p><pre><code>DNS ID号（DNS ID Number）：用来对应DNS查询和DNS响应查询/响应（Query/Response）：用于知名报文是DNS查询还是响应操作代码（OpCode）：用于定义消息中请求的类型权威应答（Authoritative Answer，AA）：若设定此值，则说明此响应是由域内权威域名服务器发出的截断（Truncation，TC）：用于说明由于此响应太长，无法装入数据包而被截断期望递归（Recursion Desired，RD）：当请求中设定此值，则说明DNS客户端在目标域名服务器不含有请求消息的情况下，要求进行递归查询可用递归（Recurision Availiable，RA）：当响应中设定此值，说明域名服务器支持递归查询保留（Z）：全设为0，有时会用作RCode域的扩展响应代码（Response Code）：在DNS响应中用来指明错误问题计数（Question Count）：在问题区段中的条目数回答计数（Answer Count）：在回答区段中的条目数域名服务器计数（Name Server Count）：在权威区段的域名资源记录数额外记录计数（Additional Records Count）：在额外信息区段中其他资源记录数问题区段（Question section）：大小可变，包含有被发送带DNS服务器的一条或多条的信息查询的部分回答区段（Answer section）：大小可变，含有用来回答查询的额一条或多条资源记录权威区段（Authority section）：大小可变，包含指向权威域名服务器的资源记录，用以继续解析过程额外信息区段（Additional Information section）：包含资源记录且大小可变的区段，这些资源记录用来存储完全没有必要回答的查询相关的额外信息</code></pre><h3 id="简单DNS查询"><a href="#简单DNS查询" class="headerlink" title="简单DNS查询"></a>简单DNS查询</h3><p>DNS以查询/响应的模式工作，当一个客户端轩昂要讲一个DNS名字解析成IP地址，它向DNS服务器发送一个查询，然后服务器会在响应中提供所请求的信息，最简单情况下，这个过程包含两个数据包</p><h3 id="DNS记录类型"><a href="#DNS记录类型" class="headerlink" title="DNS记录类型"></a>DNS记录类型</h3><p>DNS查询和响应中所使用的类型域，指明了这个查询或者响应的资源记录类型</p><p><img src="http://paivdtahr.bkt.clouddn.com/DNS%E7%B1%BB%E5%9E%8B.png" alt="DNS"></p><h3 id="DNS递归分析"><a href="#DNS递归分析" class="headerlink" title="DNS递归分析"></a>DNS递归分析</h3><p><img src="http://paivdtahr.bkt.clouddn.com/DNS%E9%80%92%E5%BD%92.png" alt="递归"></p><hr><h2 id="0xFF-参考资源"><a href="#0xFF-参考资源" class="headerlink" title="0xFF 参考资源"></a>0xFF 参考资源</h2><ul><li><p><a href="https://wiki.wireshark.org/" title="Wireshark Wiki" target="_blank" rel="noopener">Wireshark Wiki</a></p></li><li><p><a href="https://www.wireshark.org/docs/wsug_html_chunked/" title="Wireshark User’s Guide" target="_blank" rel="noopener">Wireshark User’s Guide</a></p></li></ul><ul><li><a href="https://pan.baidu.com/s/1xxXjp8P2giFAYtXjt8uqMA" title="《数据通信与网络 第六版》" target="_blank" rel="noopener">《数据通信与网络 第六版》</a></li></ul><ul><li><p><a href="https://pan.baidu.com/s/14-BMh0w6kF2QnAh_m7aIvg" title="《TCP/IP详解 卷一：协议》" target="_blank" rel="noopener">《TCP/IP详解 卷一：协议》</a></p></li><li><p><a href="https://pan.baidu.com/s/1MOLX3DfDgbaThxcEqFZPfg" title="Wireshark数据包分析实战" target="_blank" rel="noopener">《Wireshark数据包分析实战》</a></p></li></ul><ul><li><a href="https://pan.baidu.com/s/1pg7LUs4ndyXOWudnzWiscw" target="_blank" rel="noopener">《Wireshark数据包分析实战详解》</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文对常用TCP/IP网络协议进行简要总结，并用&lt;a href=&quot;https://www.wireshark.org/&quot; title=&quot;Wireshark&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Wireshark&lt;/a&gt;——一个免费开源的网络数据包分析工具对其进行分析&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="0x03 计算机科学" scheme="http://yoursite.com/categories/0x03-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
      <category term="网络协议" scheme="http://yoursite.com/categories/0x03-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"/>
    
    
      <category term="Wireshark" scheme="http://yoursite.com/tags/Wireshark/"/>
    
      <category term="TCP/IP" scheme="http://yoursite.com/tags/TCP-IP/"/>
    
  </entry>
  
  <entry>
    <title>Nmap 参考指南</title>
    <link href="http://yoursite.com/2018/07/10/%E6%89%AB%E6%8F%8F-Nmap/"/>
    <id>http://yoursite.com/2018/07/10/扫描-Nmap/</id>
    <published>2018-07-10T07:23:14.000Z</published>
    <updated>2018-09-02T06:48:37.963Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://nmap.org/" title="Nmap" target="_blank" rel="noopener">Nmap</a>（网络映射器）是一款用于网络发现和安全审计的开源扫描工具，集主机发现，端口扫描，版本探测等诸多功能于一身，是信息收集不可或缺的扫描神器，以本文是关于Nmap扫描原理及基本用法的分析与总结（参考自<a href="https://nmap.org/man/zh/index.html" title="Nmap参考指南" target="_blank" rel="noopener">Nmap参考指南</a>，kali 平台下键入<code>man nmap</code>亦可阅览）<br><a id="more"></a></p></blockquote><hr><h2 id="0x01-选项概要"><a href="#0x01-选项概要" class="headerlink" title="0x01 选项概要"></a>0x01 选项概要</h2><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><ul><li>nmap [扫描类型] [选项] {目标规范} </li></ul><h3 id="目标规范"><a href="#目标规范" class="headerlink" title="目标规范"></a>目标规范</h3><ul><li>可以传递主机名，IP地址，网络等</li><li>例如：scanme.nmap.org，microsoft.com / 24,192.168.0.1; 10.0-255.0-255.1-254 </li><li>-iL <inputfilename>：从主机/网络列表输入</inputfilename></li><li>-iR <num hosts="">：选择随机目标</num></li><li>–exclude <host1 [，host2]="" [，host3]，...="">：排除hosts / networks </host1></li><li>–excludefile &lt;exclude_file&gt;：从文件中排除列表</li></ul><h3 id="HOST-DISCOVERY"><a href="#HOST-DISCOVERY" class="headerlink" title="HOST DISCOVERY"></a>HOST DISCOVERY</h3><ul><li>-sL：列表扫描 - 只列出要扫描的目标</li><li>-sP：Ping扫描 - 只需确定主机是否在线</li><li>-P0：将所有主机视为在线 - 跳过主机发现</li><li>-PS / PA / PU [端口列表]：给定端口的TCP SYN / ACK或UDP发现探测-PE / PP / PM：ICMP回送，时间戳和网络掩码请求发现探测</li><li>-n / -R：永远不要进行DNS解析/始终解析[默认：有时解析] </li></ul><h3 id="SCAN-TECHNIQUES"><a href="#SCAN-TECHNIQUES" class="headerlink" title="SCAN TECHNIQUES"></a>SCAN TECHNIQUES</h3><ul><li>-sS / sT / sA / sW / sM：TCP SYN / Connect（）/ ACK / Window / Maimon扫描</li><li>-sN / sF / sX：TCP Null，FIN和Xmas扫描</li><li>–scanflags <flags>：自定义TCP扫描标志</flags></li><li>-sI <zombie host="" [：probeport]="">：Idlescan</zombie></li><li>-sO：IP协议扫描</li><li>-b <ftp relay="" host="">：FTP跳出扫描</ftp></li></ul><h3 id="端口规格和扫描顺序"><a href="#端口规格和扫描顺序" class="headerlink" title="端口规格和扫描顺序"></a>端口规格和扫描顺序</h3><ul><li>-p &lt;端口范围&gt;：仅扫描指定的端口</li><li>Ex：-p22; -p1-65535; -p U：53,111,137，T：21-25,80,139,8080</li><li>-F：快速 - 仅扫描nmap-services文件中列出的端口）</li><li>-r：连续扫描端口 - 不随机化</li></ul><h3 id="SERVICE-VERSION-DETECTION"><a href="#SERVICE-VERSION-DETECTION" class="headerlink" title="SERVICE / VERSION DETECTION"></a>SERVICE / VERSION DETECTION</h3><ul><li>-sV：探测打开端口以确定服务/版本信息</li><li>–version-light ：限制为最可能的探测器以便更快识别</li><li>–version-all：尝试每个探测器进行版本检测</li><li>–version-trace：显示详细的版本扫描活动（用于调试）</li></ul><h3 id="OS检测"><a href="#OS检测" class="headerlink" title="OS检测"></a>OS检测</h3><ul><li>-O：启用OS检测</li><li>–osscan-限制：将OS检测限制为有希望的目标</li><li>–osscan-guess：更积极地猜测操作系统</li></ul><h3 id="时间和性能"><a href="#时间和性能" class="headerlink" title="时间和性能"></a>时间和性能</h3><ul><li>-T [0-6]：设置时序模板（更高更快）</li><li>–min-hostgroup / max-hostgroup <msec>：并行主机扫描组大小</msec></li><li>–min-parallelism / max-parallelism <msec>：探测并行化</msec></li><li>–min-rtt-timeout / max-rtt-timeout / initial-rtt -timeout <msec>：指定探测往返时间</msec></li><li>–host-timeout <msec>：在此长时间后放弃目标</msec></li><li>–scan-delay / - max-scan-delay <msec>：调整探测器之间的延迟</msec></li></ul><h3 id="防火墙-IDS逃逸和施法"><a href="#防火墙-IDS逃逸和施法" class="headerlink" title="防火墙/ IDS逃逸和施法"></a>防火墙/ IDS逃逸和施法</h3><ul><li>-f; –mtu <val>：片段包（可选择w /给定MTU）</val></li><li>-D &lt;decoy1，decoy2 [，ME]，…&gt;：用decoys</li><li>-S &lt;IP_Address&gt; 披露扫描：欺骗源地址</li><li>-e <iface>：使用指定的接口</iface></li><li>-g / - source-port <portnum>：使用给定的端口号–data-length <num>：将随机数据附加到已发送的数据包</num></portnum></li><li>–ttl <val>：设置IP生存时间字段</val></li><li>–spoof-mac &lt;mac地址，前缀或供应商名称&gt;：欺骗您的MAC地址</li></ul><h3 id="OUTPUT"><a href="#OUTPUT" class="headerlink" title="OUTPUT"></a>OUTPUT</h3><ul><li>-oN / -oX / -oS / -oG <file>：输出扫描分别生成给定文件名的普通，XML，s | &lt;rIptkIddi3 和Grepable格式</file></li><li>-oA <basename>：一次输出三种主要格式</basename></li><li>-v：增加详细级别（使用两次以获得更多效果）</li><li>-d [level]：设置或增加调试级别（最多9个是有意义的） - packet-trace ：显示发送和接收的所有数据包</li><li>–iflist：打印主机接口和路由（用于调试）</li><li>–append-output：追加而不是clobber指定的输出文件</li><li>–resume <filename>：恢复中止扫描</filename></li><li>–stylesheet &lt;path / URL&gt;：XSL样式表将XML输出转换为HTML </li><li>–no-stylesheet：Prevent Nmap从关联XSL样式表到XML输出</li></ul><h3 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h3><ul><li>-6：启用IPv6扫描</li><li>-A：启用OS检测和版本检测</li><li>–datadir <dirname>：指定自定义Nmap数据文件位置</dirname></li><li>–send-eth / - send-ip：使用原始以太网帧或IP数据包发送数据包</li><li>–privileged：假设用户具有完全权限</li><li>-V：打印版本号</li><li>-h：打印此帮助摘要页面。</li></ul><hr><h2 id="0x02-目标说明"><a href="#0x02-目标说明" class="headerlink" title="0x02 目标说明"></a>0x02 目标说明</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>除了选项，所有出现在Nmap命令行上的都被视为对目标主机的说明，最简单的情况是指定一个<strong>目标IP地址</strong>或<strong>主机名</strong></p><h3 id="扫描整个网络的相邻主机"><a href="#扫描整个网络的相邻主机" class="headerlink" title="扫描整个网络的相邻主机"></a>扫描整个网络的相邻主机</h3><h4 id="CIDR标志法"><a href="#CIDR标志法" class="headerlink" title="CIDR标志法"></a>CIDR标志法</h4><p>Nmap支持CIDR风格的地址，您可以附加 一个/<numbit>在一个IP地址或主机名后面， Nmap将会扫描所有和该参考IP地址具有 <numbit>相同比特的所有IP地址或主机。 例如，192.168.10.0/24将会扫描192.168.10.0 (二进制格式: 11000000 10101000 00001010 00000000)和192.168.10.255 (二进制格式: 11000000 10101000 00001010 11111111)之间的256台主机。 192.168.10.40/24 将会做同样的事情。假设主机 scanme.nmap.org的IP地址是205.217.153.62， scanme.nmap.org/16 将扫描205.217.0.0和205.217.255.255之间的65,536 个IP地址。 所允许的最小值是/1， 这将会扫描半个互联网。最大值是/32，这将会扫描该主机或IP地址， 因为所有的比特都固定了</numbit></numbit></p><h4 id="八位字节表示法"><a href="#八位字节表示法" class="headerlink" title="八位字节表示法"></a>八位字节表示法</h4><p>CIDR标志位很简洁但有时候不够灵活。例如，您也许想要扫描 192.168.0.0/16，但略过任何以.0或者.255 结束的IP地址，因为它们通常是广播地址。Nmap通过八位字节地址范围支持这样的扫描，您可以用逗号分开的数字或范围列表为IP地址的每个八位字节指定它的范围。 例如，192.168.0-255.1-254 将略过在该范围内以.0和.255结束的地址。 范围不必限于最后的8位：0-255.0-255.13.37 将在整个互联网范围内扫描所有以13.37结束的地址。 这种大范围的扫描对互联网调查研究也许有用</p><h4 id="IPv6-扫描"><a href="#IPv6-扫描" class="headerlink" title="IPv6 扫描"></a>IPv6 扫描</h4><p>IPv6地址只能用规范的IPv6地址或主机名指定。 CIDR 和八位字节范围不支持IPv6，因为它们对于IPv6几乎没什么用</p><p>Nmap命令行接受多个主机说明，它们不必是相同类型。命令nmap scanme.nmap.org 192.168.0.0/8 10.0.0，1，3-7.0-255将和您预期的一样执行</p><h3 id="常用选项"><a href="#常用选项" class="headerlink" title="常用选项"></a>常用选项</h3><h4 id="iL-从列表中输入"><a href="#iL-从列表中输入" class="headerlink" title="-iL  (从列表中输入)"></a>-iL <inputfilename> (从列表中输入)</inputfilename></h4><ul><li>从 <inputfilename>中读取目标说明。在命令行输入 一堆主机名显得很笨拙，然而经常需要这样。 例如，您的DHCP服务器可能导出10,000个当前租约的列表，而您希望对它们进行 扫描。如果您不是使用未授权的静态IP来定位主机，或许您想要扫描所有IP地址。 只要生成要扫描的主机的列表，用-iL 把文件名作为选项传给Nmap。列表中的项可以是Nmap在 命令行上接受的任何格式(IP地址，主机名，CIDR，IPv6，或者八位字节范围)。 每一项必须以一个或多个空格，制表符或换行符分开。 如果您希望Nmap从标准输入而不是实际文件读取列表， 您可以用一个连字符(-)作为文件名</inputfilename></li></ul><h4 id="iR-随机选择目标"><a href="#iR-随机选择目标" class="headerlink" title="-iR  (随机选择目标)"></a>-iR <hostnum> (随机选择目标)</hostnum></h4><ul><li>对于互联网范围内的调查和研究， 您也许想随机地选择目标。 <hostnum> 选项告诉 Nmap生成多少个IP。不合需要的IP如特定的私有，组播或者未分配的地址自动 略过。选项 0 意味着永无休止的扫描。</hostnum></li></ul><h4 id="–exclude-lt-host1-，host2-，host3-，…-gt-排除主机-网络"><a href="#–exclude-lt-host1-，host2-，host3-，…-gt-排除主机-网络" class="headerlink" title="–exclude &lt;host1[，host2][，host3]，…&gt; (排除主机/网络)"></a>–exclude &lt;host1[，host2][，host3]，…&gt; (排除主机/网络)</h4><ul><li>如果在指定的扫描范围有一些主机或网络不是您的目标， 那就用该选项加上以逗号分隔的列表排除它们。该列表用正常的Nmap语法， 因此它可以包括主机名，CIDR，八位字节范围等等。 当您希望扫描的网络包含执行关键任务的服务器，已知的对端口扫描反应强烈的 系统或者被其它人看管的子网时，这也许有用</li></ul><h4 id="–excludefile-排除文件中的列表"><a href="#–excludefile-排除文件中的列表" class="headerlink" title="–excludefile  (排除文件中的列表)"></a>–excludefile <excludefile> (排除文件中的列表)</excludefile></h4><ul><li>这和–exclude 选项的功能一样，只是所排除的目标是用以 换行符，空格，或者制表符分隔的 <excludefile>提供的，而不是在命令行上输入的</excludefile></li></ul><hr><h2 id="0x03-主机发现"><a href="#0x03-主机发现" class="headerlink" title="0x03 主机发现"></a>0x03 主机发现</h2><h3 id="探测范围缩小"><a href="#探测范围缩小" class="headerlink" title="探测范围缩小"></a>探测范围缩小</h3><p>任何网络探测任务的最初几个步骤之一就是把一组IP范围(有时该范围是巨大的)缩小为一列活动的或者您感兴趣的主机</p><h3 id="主机发现"><a href="#主机发现" class="headerlink" title="主机发现"></a>主机发现</h3><p>主机发现有时候也叫做ping扫描，但它远远超越用世人皆知的ping工具发送简单的ICMP回声请求报文。用户完全可以通过使用列表扫描(-sL)或者通过关闭ping (-P0)跳过ping的步骤，也可以使用多个端口把TCP SYN/ACK，UDP和ICMP 任意组合起来玩一玩</p><h3 id="探测目的"><a href="#探测目的" class="headerlink" title="探测目的"></a>探测目的</h3><p>获得响应以显示某个IP地址是否是活动的(正在被某 主机或者网络设备使用)。 在许多网络上，在给定的时间，往往只有小部分的IP地址是活动的。主机发现能够找到零星分布于IP地址海洋上的那些机器</p><h3 id="未发现主机情况"><a href="#未发现主机情况" class="headerlink" title="未发现主机情况"></a>未发现主机情况</h3><p>如果没有给出主机发现的选项，Nmap就发送一个TCP ACK报文到80端口和一个ICMP回声请求到每台目标机器。 一个例外是ARP扫描用于局域网上的任何目标机器。对于非特权UNIX shell用户，使用connect()系统调用会发送一个SYN报文而不是ACK 这些默认行为和使用-PA -PE选项的效果相同。 扫描局域网时，这种主机发现一般够用了，但是对于安全审核，建议进行更加全面的探测</p><h3 id="P-选项"><a href="#P-选项" class="headerlink" title="-P*选项"></a>-P*选项</h3><p>-P<em>选项(用于选择 ping的类型)可以被结合使用。 您可以通过使用不同的TCP端口/标志位和ICMP码发送许多探测报文 来增加穿透防守严密的防火墙的机会。另外要注意的是即使您指定了其它 -P</em>选项，ARP发现(-PR)对于局域网上的目标而言是默认行为，因为它总是更快更有效</p><h3 id="常用选项-1"><a href="#常用选项-1" class="headerlink" title="常用选项"></a>常用选项</h3><h4 id="sL-列表扫描"><a href="#sL-列表扫描" class="headerlink" title="-sL (列表扫描)"></a>-sL (列表扫描)</h4><ul><li><p>列表扫描是主机发现的退化形式，它仅仅列出指定网络上的每台主机， 不发送任何报文到目标主机。默认情况下，Nmap仍然对主机进行反向域名解析以获取 它们的名字，Nmap最后还会报告IP地址的总数。列表扫描可以很好的确保您拥有正确的目标IP。 </p></li><li><p>既然只是打印目标主机的列表，像其它一些高级功能如端口扫描，操作系统探测或者Ping扫描 的选项就没有了。</p></li></ul><h4 id="sP-Ping扫描"><a href="#sP-Ping扫描" class="headerlink" title="-sP (Ping扫描)"></a>-sP (Ping扫描)</h4><ul><li><p>该选项告诉Nmap仅仅 进行ping扫描 (主机发现)，然后打印出对扫描做出响应的那些主机。 没有进一步的测试 (如端口扫描或者操作系统探测)。 这比列表扫描更积极，常常用于 和列表扫描相同的目的。它可以得到些许目标网络的信息而不被特别注意到。 对于攻击者来说，了解多少主机正在运行比列表扫描提供的一列IP和主机名往往更有价值</p></li><li><p>系统管理员往往也很喜欢这个选项。 它可以很方便地得出 网络上有多少机器正在运行或者监视服务器是否正常运行。常常有人称它为 地毯式ping，它比ping广播地址更可靠，因为许多主机对广播请求不响应</p></li><li><p>-sP选项在默认情况下， 发送一个ICMP回声请求和一个TCP报文到80端口。如果非特权用户执行，就发送一个SYN报文 (用connect()系统调用)到目标机的80端口。 当特权用户扫描局域网上的目标机时，会发送ARP请求(-PR)， ，除非使用了–send-ip选项。 -sP选项可以和除-P0)之外的任何发现探测类型-P* 选项结合使用以达到更大的灵活性。 一旦使用了任何探测类型和端口选项，默认的探测(ACK和回应请求)就被覆盖了。 当防守严密的防火墙位于运行Nmap的源主机和目标网络之间时， 推荐使用那些高级选项。否则，当防火墙捕获并丢弃探测包或者响应包时，一些主机就不能被探测到</p></li></ul><h4 id="P0-无ping"><a href="#P0-无ping" class="headerlink" title="-P0 (无ping)"></a>-P0 (无ping)</h4><ul><li>该选项完全跳过Nmap发现阶段。 通常Nmap在进行高强度的扫描时用它确定正在运行的机器。 默认情况下，Nmap只对正在运行的主机进行高强度的探测如 端口扫描，版本探测，或者操作系统探测。用-P0禁止 主机发现会使Nmap对每一个指定的目标IP地址 进行所要求的扫描。所以如果在命令行指定一个B类目标地址空间(/16)， 所有 65,536 个IP地址都会被扫描。 -P0的第二个字符是数字0而不是字母O。 和列表扫描一样，跳过正常的主机发现，但不是打印一个目标列表， 而是继续执行所要求的功能，就好像每个IP都是活动的</li></ul><h4 id="PS-portlist-TCP-SYN-Ping"><a href="#PS-portlist-TCP-SYN-Ping" class="headerlink" title="-PS [portlist] (TCP SYN Ping)"></a>-PS [portlist] (TCP SYN Ping)</h4><ul><li><p>该选项发送一个设置了SYN标志位的空TCP报文。 默认目的端口为80 (可以通过改变nmap.h) 文件中的DEFAULT-TCP-PROBE-PORT值进行配置，但不同的端口也可以作为选项指定。 甚至可以指定一个以逗号分隔的端口列表(如 -PS22，23，25，80，113，1050，35000)， 在这种情况下，每个端口会被并发地扫描。</p></li><li><p>SYN标志位告诉对方您正试图建立一个连接。 通常目标端口是关闭的，一个RST (复位) 包会发回来。 如果碰巧端口是开放的，目标会进行TCP三步握手的第二步，回应 一个SYN/ACK TCP报文。然后运行Nmap的机器则会扼杀这个正在建立的连接， 发送一个RST而非ACK报文，否则，一个完全的连接将会建立。 RST报文是运行Nmap的机器而不是Nmap本身响应的，因为它对收到 的SYN/ACK感到很意外。</p></li><li><p>Nmap并不关心端口开放还是关闭。 无论RST还是SYN/ACK响应都告诉Nmap该主机正在运行。</p></li><li><p>在UNIX机器上，通常只有特权用户 root 能否发送和接收 原始的TCP报文。因此作为一个变通的方法，对于非特权用户， Nmap会为每个目标主机进行系统调用connect()，它也会发送一个SYN 报文来尝试建立连接。如果connect()迅速返回成功或者一个ECONNREFUSED 失败，下面的TCP堆栈一定已经收到了一个SYN/ACK或者RST，该主机将被 标志位为在运行。 如果连接超时了，该主机就标志位为down掉了。这种方法也用于IPv6 连接，因为Nmap目前还不支持原始的IPv6报文</p></li></ul><h4 id="PA-portlist-TCP-ACK-Ping"><a href="#PA-portlist-TCP-ACK-Ping" class="headerlink" title="-PA [portlist] (TCP ACK Ping)"></a>-PA [portlist] (TCP ACK Ping)</h4><ul><li><p>TCP ACK ping和刚才讨论的SYN ping相当类似。区别就是设置TCP的ACK标志位而不是SYN标志位。 ACK报文表示确认一个建立连接的尝试，但该连接尚未完全建立。 所以远程主机应该总是回应一个RST报文， 因为它们并没有发出过连接请求到运行Nmap的机器，如果它们正在运行的话。</p></li><li><p>-PA选项使用和SYN探测相同的默认端口(80)，也可以 用相同的格式指定目标端口列表。如果非特权用户尝试该功能， 或者指定的是IPv6目标，前面说过的connect()方法将被使用。 这个方法并不完美，因为它实际上发送的是SYN报文，而不是ACK报文。</p></li><li><p>提供SYN和ACK两种ping探测的原因是使通过防火墙的机会尽可能大。 许多管理员会配置他们的路由器或者其它简单的防火墙来封锁SYN报文，除非 连接目标是那些公开的服务器像公司网站或者邮件服务器。 这可以阻止其它进入组织的连接，同时也允许用户访问互联网。 这种无状态的方法几乎不占用防火墙/路由器的资源，因而被硬件和软件过滤器 广泛支持。Linux Netfilter/iptables 防火墙软件提供方便的 –syn选项来实现这种无状态的方法。 当这样的无状态防火墙规则存在时，发送到关闭目标端口的SYN ping探测 (-PS) 很可能被封锁。这种情况下，ACK探测格外有闪光点，因为它正好利用了 这样的规则。</p></li><li><p>另外一种常用的防火墙用有状态的规则来封锁非预期的报文。 这一特性已开始只存在于高端防火墙，但是这些年类它越来越普遍了。 Linux Netfilter/iptables 通过 –state选项支持这一特性，它根据连接状态把报文 进行分类。SYN探测更有可能用于这样的系统，由于没头没脑的ACK报文 通常会被识别成伪造的而丢弃。解决这个两难的方法是通过即指定 -PS又指定-PA来即发送SYN又发送ACK</p></li></ul><h4 id="PU-portlist-UDP-Ping"><a href="#PU-portlist-UDP-Ping" class="headerlink" title="-PU [portlist] (UDP Ping)"></a>-PU [portlist] (UDP Ping)</h4><ul><li><p>还有一个主机发现的选项是UDP ping，它发送一个空的(除非指定了–data-length UDP报文到给定的端口。端口列表的格式和前面讨论过的-PS和-PA选项还是一样。 如果不指定端口，默认是31338。该默认值可以通过在编译时改变nmap.h文件中的 DEFAULT-UDP-PROBE-PORT值进行配置。默认使用这样一个奇怪的端口是因为对开放端口 进行这种扫描一般都不受欢迎</p></li><li><p>如果目标机器的端口是关闭的，UDP探测应该马上得到一个ICMP端口无法到达的回应报文。 这对于Nmap意味着该机器正在运行。 许多其它类型的ICMP错误，像主机/网络无法到达或者TTL超时则表示down掉的或者不可到达的主机。 没有回应也被这样解释。如果到达一个开放的端口，大部分服务仅仅忽略这个 空报文而不做任何回应。这就是为什么默认探测端口是31338这样一个 极不可能被使用的端口。少数服务如chargen会响应一个空的UDP报文， 从而向Nmap表明该机器正在运行</p></li><li><p>该扫描类型的主要优势是它可以穿越只过滤TCP的防火墙和过滤器。 例如。我曾经有过一个Linksys BEFW11S4无线宽带路由器。默认情况下， 该设备对外的网卡过滤所有TCP端口，但UDP探测仍然会引发一个端口不可到达 的消息，从而暴露了它自己</p></li></ul><h4 id="PE-PP-PM-ICMP-Ping-Types"><a href="#PE-PP-PM-ICMP-Ping-Types" class="headerlink" title="-PE; -PP; -PM (ICMP Ping Types)"></a>-PE; -PP; -PM (ICMP Ping Types)</h4><ul><li><p>除了前面讨论的这些不常见的TCP和UDP主机发现类型， Nmap也能发送世人皆知的ping 程序所发送的报文。Nmap发送一个ICMP type 8 (回声请求)报文到目标IP地址， 期待从运行的主机得到一个type 0 (回声响应)报文。 对于网络探索者而言，不幸的是，许多主机和 防火墙现在封锁这些报文，而不是按期望的那样响应， 参见RFC 1122。因此，仅仅ICMP扫描对于互联网上的目标通常是不够的。 但对于系统管理员监视一个内部网络，它们可能是实际有效的途径。 使用-PE选项打开该回声请求功能。</p></li><li><p>虽然回声请求是标准的ICMP ping查询， Nmap并不止于此。ICMP标准 (RFC 792)还规范了时间戳请求，信息请求 request，和地址掩码请求，它们的代码分别是13，15和17。 虽然这些查询的表面目的是获取信息如地址掩码和当前时间， 它们也可以很容易地用于主机发现。 很简单，回应的系统就是在运行的系统。Nmap目前没有实现信息请求报文， 因为它们还没有被广泛支持。RFC 1122 坚持 “主机不应该实现这些消息”。 时间戳和地址掩码查询可以分别用-PP和-PM选项发送。 时间戳响应(ICMP代码14)或者地址掩码响应(代码18)表示主机在运行。 当管理员特别封锁了回声请求报文而忘了其它ICMP查询可能用于 相同目的时，这两个查询可能很有价值</p></li></ul><h4 id="PR-ARP-Ping"><a href="#PR-ARP-Ping" class="headerlink" title="-PR (ARP Ping)"></a>-PR (ARP Ping)</h4><ul><li><p>最常见的Nmap使用场景之一是扫描一个以太局域网。 在大部分局域网上，特别是那些使用基于 RFC1918私有地址范围的网络，在一个给定的时间绝大部分 IP地址都是不使用的。 当Nmap试图发送一个原始IP报文如ICMP回声请求时， 操作系统必须确定对应于目标IP的硬件 地址(ARP)，这样它才能把以太帧送往正确的地址。 这一般比较慢而且会有些问题，因为操作系统设计者认为一般不会在短时间内 对没有运行的机器作几百万次的ARP请求</p></li><li><p>当进行ARP扫描时，Nmap用它优化的算法管理ARP请求。 当它收到响应时， Nmap甚至不需要担心基于IP的ping报文，既然它已经知道该主机正在运行了。 这使得ARP扫描比基于IP的扫描更快更可靠。 所以默认情况下，如果Nmap发现目标主机就在它所在的局域网上，它会进行ARP扫描。 即使指定了不同的ping类型(如 -PI或者 -PS) ，Nmap也会对任何相同局域网上的目标机使用ARP。 如果您真的不想要ARP扫描，指定 –send-ip</p></li></ul><h4 id="n-不用域名解析"><a href="#n-不用域名解析" class="headerlink" title="-n (不用域名解析)"></a>-n (不用域名解析)</h4><ul><li>告诉Nmap永不对它发现的活动IP地址进行反向域名解析。 既然DNS一般比较慢，这可以让事情更快些</li></ul><h4 id="R-为所有目标解析域名"><a href="#R-为所有目标解析域名" class="headerlink" title="-R (为所有目标解析域名)"></a>-R (为所有目标解析域名)</h4><ul><li>告诉Nmap 永远 对目标IP地址作反向域名解析。 一般只有当发现机器正在运行时才进行这项操作</li></ul><h4 id="–system-dns-使用系统域名解析器"><a href="#–system-dns-使用系统域名解析器" class="headerlink" title="–system-dns (使用系统域名解析器)"></a>–system-dns (使用系统域名解析器)</h4><ul><li>默认情况下，Nmap通过直接发送查询到您的主机上配置的域名服务器 来解析域名。为了提高性能，许多请求 (一般几十个 ) 并发执行。如果您希望使用系统自带的解析器，就指定该选项 (通过getnameinfo()调用一次解析一个IP)。 一般不使用该选项，因为它慢多了。系统解析器总是用于IPv6扫描</li></ul><hr><h2 id="0x04-端口扫描"><a href="#0x04-端口扫描" class="headerlink" title="0x04 端口扫描"></a>0x04 端口扫描</h2><h3 id="端口状态"><a href="#端口状态" class="headerlink" title="端口状态"></a>端口状态</h3><h4 id="open-开放的"><a href="#open-开放的" class="headerlink" title="open(开放的)"></a>open(开放的)</h4><ul><li>应用程序正在该端口接收TCP 连接或者UDP报文。发现这一点常常是端口扫描 的主要目标。安全意识强的人们知道每个开放的端口 都是攻击的入口。攻击者或者入侵测试者想要发现开放的端口。 而管理员则试图关闭它们或者用防火墙保护它们以免妨碍了合法用户。 非安全扫描可能对开放的端口也感兴趣，因为它们显示了网络上那些服务可供使用。</li></ul><h4 id="closed-关闭的"><a href="#closed-关闭的" class="headerlink" title="closed(关闭的)"></a>closed(关闭的)</h4><ul><li>关闭的端口对于Nmap也是可访问的(它接受Nmap的探测报文并作出响应)， 但没有应用程序在其上监听。 它们可以显示该IP地址上(主机发现，或者ping扫描)的主机正在运行up 也对部分操作系统探测有所帮助。 因为关闭的关口是可访问的，也许过会儿值得再扫描一下，可能一些又开放了。 系统管理员可能会考虑用防火墙封锁这样的端口，那样他们就会被显示为被过滤的状态</li></ul><h4 id="filtered-被过滤的"><a href="#filtered-被过滤的" class="headerlink" title="filtered(被过滤的)"></a>filtered(被过滤的)</h4><ul><li>由于包过滤阻止探测报文到达端口， Nmap无法确定该端口是否开放。过滤可能来自专业的防火墙设备，路由器规则 或者主机上的软件防火墙。这样的端口让攻击者感觉很挫折，因为它们几乎不提供 任何信息有时候它们响应ICMP错误消息如类型3代码13 (无法到达目标: 通信被管理员禁止)，但更普遍的是过滤器只是丢弃探测帧，不做任何响应。这迫使Nmap重试若干次以访万一探测包是由于网络阻塞丢弃的。这使得扫描速度明显变慢。</li></ul><h4 id="unfiltered-未被过滤的"><a href="#unfiltered-未被过滤的" class="headerlink" title="unfiltered(未被过滤的)"></a>unfiltered(未被过滤的)</h4><ul><li>未被过滤状态意味着端口可访问，但Nmap不能确定它是开放还是关闭。 只有用于映射防火墙规则集的ACK扫描才会把端口分类到这种状态。 用其它类型的扫描如窗口扫描，SYN扫描，或者FIN扫描来扫描未被过滤的端口可以帮助确定 端口是否开放。</li></ul><h4 id="open-filtered-开放或者被过滤的"><a href="#open-filtered-开放或者被过滤的" class="headerlink" title="open|filtered(开放或者被过滤的)**"></a>open|filtered(开放或者被过滤的)**</h4><ul><li>当无法确定端口是开放还是被过滤的，Nmap就把该端口划分成 这种状态。开放的端口不响应就是一个例子。没有响应也可能意味着报文过滤器丢弃 了探测报文或者它引发的任何响应。因此Nmap无法确定该端口是开放的还是被过滤的。 UDP，IP协议， FIN，Null，和Xmas扫描可能把端口归入此类。</li></ul><h4 id="closed-filtered-关闭或者被过滤的"><a href="#closed-filtered-关闭或者被过滤的" class="headerlink" title="closed|filtered(关闭或者被过滤的)"></a>closed|filtered(关闭或者被过滤的)</h4><ul><li>该状态用于Nmap不能确定端口是关闭的还是被过滤的。 它只可能出现在IPID Idle扫描中</li></ul><h3 id="端口扫描技术"><a href="#端口扫描技术" class="headerlink" title="端口扫描技术"></a>端口扫描技术</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><ul><li><p>大部分扫描类型只对特权用户可用。 这是因为他们发送接收原始报文，这在Unix系统需要root权限。 在Windows上推荐使用administrator账户，但是当WinPcap已经被加载到操作系统时， 非特权用户也可以正常使用Nmap。当Nmap在1997年发布时，需要root权限是一个严重的 局限，因为很多用户只有共享的shell账户。现在，世界变了，计算机便宜了，更多人拥有互联网连接 ，桌面UNIX系统 (包括Linux和MAC OS X)很普遍了。Windows版本的Nmap现在也有了，这使它可以运行在更多的桌面上。 由于所有这些原因，用户不再需要用有限的共享shell账户运行Nmap。 这是很幸运的，因为特权选项让Nmap强大得多也灵活得多。</p></li><li><p>虽然Nmap努力产生正确的结果，但请记住所有结果都是基于目标机器(或者它们前面的防火墙)返回的报文的。 这些主机也许是不值得信任的，它们可能响应以迷惑或误导Nmap的报文。 更普遍的是非RFC兼容的主机以不正确的方式响应Nmap探测。FIN，Null和Xmas扫描 特别容易遇到这个问题。这些是特定扫描类型的问题，因此我们在个别扫描类型里讨论它们。</p></li><li><p>这一节讨论Nmap支持的大约十几种扫描技术。 一般一次只用一种方法， 除了UDP扫描(-sU)可能和任何一种TCP扫描类型结合使用。 友情提示一下，端口扫描类型的选项格式是-s<c>， 其中<c> 是个显眼的字符，通常是第一个字符。一个例外是deprecated FTP bounce扫描(-b)。默认情况下，Nmap执行一个 SYN扫描，但是如果用户没有权限发送原始报文(在UNIX上需要root权限)或者如果指定的是IPv6目标，Nmap调用connect()。 本节列出的扫描中，非特权用户只能执行connect()和ftp bounce扫描</c></c></p></li></ul><h4 id="常用选项-2"><a href="#常用选项-2" class="headerlink" title="常用选项"></a>常用选项</h4><h4 id="sS-TCP-SYN扫描"><a href="#sS-TCP-SYN扫描" class="headerlink" title="-sS (TCP SYN扫描)"></a>-sS (TCP SYN扫描)</h4><ul><li><p>SYN扫描作为默认的也是最受欢迎的扫描选项，是有充分理由的。 它执行得很快，在一个没有入侵防火墙的快速网络上，每秒钟可以扫描数千个端口。 SYN扫描相对来说不张扬，不易被注意到，因为它从来不完成TCP连接。 它也不像Fin/Null/Xmas，Maimon和Idle扫描依赖于特定平台，而可以应对任何兼容的 TCP协议栈。 它还可以明确可靠地区分open(开放的)， closed(关闭的)，和filtered(被过滤的) 状态</p></li><li><p>它常常被称为半开放扫描， 因为它不打开一个完全的TCP连接。它发送一个SYN报文， 就像您真的要打开一个连接，然后等待响应。 SYN/ACK表示端口在监听 (开放)，而 RST (复位)表示没有监听者。如果数次重发后仍没响应， 该端口就被标记为被过滤。如果收到ICMP不可到达错误 (类型3，代码1，2，3，9，10，或者13)，该端口也被标记为被过滤。</p></li></ul><h4 id="sT-TCP-connect-扫描"><a href="#sT-TCP-connect-扫描" class="headerlink" title="-sT (TCP connect()扫描)"></a>-sT (TCP connect()扫描)</h4><ul><li><p>当SYN扫描不能用时，CP Connect()扫描就是默认的TCP扫描。 当用户没有权限发送原始报文或者扫描IPv6网络时，就是这种情况。 Instead of writing raw packets as most other scan types do，Nmap通过创建connect() 系统调用要求操作系统和目标机以及端口建立连接，而不像其它扫描类型直接发送原始报文。 这是和Web浏览器，P2P客户端以及大多数其它网络应用程序用以建立连接一样的 高层系统调用。它是叫做Berkeley Sockets API编程接口的一部分。Nmap用 该API获得每个连接尝试的状态信息，而不是读取响应的原始报文。</p></li><li><p>当SYN扫描可用时，它通常是更好的选择。因为Nmap对高层的 connect()调用比对原始报文控制更少， 所以前者效率较低。 该系统调用完全连接到开放的目标端口而不是像SYN扫描进行 半开放的复位。这不仅花更长时间，需要更多报文得到同样信息，目标机也更可能 记录下连接。IDS(入侵检测系统)可以捕获两者，但大部分机器没有这样的警报系统。 当Nmap连接，然后不发送数据又关闭连接， 许多普通UNIX系统上的服务会在syslog留下记录，有时候是一条加密的错误消息。 此时，有些真正可怜的服务会崩溃，虽然这不常发生。如果管理员在日志里看到来自同一系统的 一堆连接尝试，她应该知道她的系统被扫描了。</p></li></ul><h4 id="sU-UDP扫描"><a href="#sU-UDP扫描" class="headerlink" title="-sU (UDP扫描)"></a>-sU (UDP扫描)</h4><ul><li><p>虽然互联网上很多流行的服务运行在TCP 协议上，UDP服务也不少。 DNS，SNMP，和DHCP (注册的端口是53，161/162，和67/68)是最常见的三个。 因为UDP扫描一般较慢，比TCP更困难，一些安全审核人员忽略这些端口。 这是一个错误，因为可探测的UDP服务相当普遍，攻击者当然不会忽略整个协议。 所幸，Nmap可以帮助记录并报告UDP端口。</p></li><li><p>UDP扫描用-sU选项激活。它可以和TCP扫描如 SYN扫描 (-sS)结合使用来同时检查两种协议。</p></li><li><p>UDP扫描发送空的(没有数据)UDP报头到每个目标端口。 如果返回ICMP端口不可到达错误(类型3，代码3)， 该端口是closed(关闭的)。 其它ICMP不可到达错误(类型3， 代码1，2，9，10，或者13)表明该端口是filtered(被过滤的)。 偶尔地，某服务会响应一个UDP报文，证明该端口是open(开放的)。 如果几次重试后还没有响应，该端口就被认为是 open|filtered(开放|被过滤的)。 这意味着该端口可能是开放的，也可能包过滤器正在封锁通信。 可以用版本扫描(-sV)帮助区分真正的开放端口和被过滤的端口。</p></li><li><p>UDP扫描的巨大挑战是怎样使它更快速。 开放的和被过滤的端口很少响应，让Nmap超时然后再探测，以防探测帧或者 响应丢失。关闭的端口常常是更大的问题。 它们一般发回一个ICMP端口无法到达错误。但是不像关闭的TCP端口响应SYN或者Connect 扫描所发送的RST报文，许多主机在默认情况下限制ICMP端口不可到达消息。 Linux和Solaris对此特别严格。例如， Linux 2.4.20内核限制一秒钟只发送一条目标不可到达消息 (见net/ipv4/icmp。c)。</p></li><li><p>Nmap探测速率限制并相应地减慢来避免用那些目标机会丢弃的无用报文来阻塞 网络。不幸的是，Linux式的一秒钟一个报文的限制使65,536个端口的扫描要花 18小时以上。加速UDP扫描的方法包括并发扫描更多的主机，先只对主要端口进行快速 扫描，从防火墙后面扫描，使用–host-timeout跳过慢速的 主机。</p></li></ul><h4 id="sN-sF-sX-TCP-Null，FIN，and-Xmas扫描"><a href="#sN-sF-sX-TCP-Null，FIN，and-Xmas扫描" class="headerlink" title="-sN; -sF; -sX (TCP Null，FIN，and Xmas扫描)"></a>-sN; -sF; -sX (TCP Null，FIN，and Xmas扫描)</h4><ul><li><p>这三种扫描类型 (甚至用下一节描述的 –scanflags 选项的更多类型) 在TCP RFC 中发掘了一个微妙的方法来区分open(开放的)和 closed(关闭的)端口。第65页说“如果 [目标]端口状态是关闭的…. 进入的不含RST的报文导致一个RST响应。” 接下来的一页 讨论不设置SYN，RST，或者ACK位的报文发送到开放端口: “理论上，这不应该发生，如果您确实收到了，丢弃该报文，返回。 ”</p></li><li><p>如果扫描系统遵循该RFC，当端口关闭时，任何不包含SYN，RST，或者ACK位的报文会导致 一个RST返回，而当端口开放时，应该没有任何响应。只要不包含SYN，RST，或者ACK， 任何其它三种(FIN，PSH，and URG)的组合都行。Nmap有三种扫描类型利用这一点：</p></li></ul><p><strong>Null扫描 (-sN)</strong>　不设置任何标志位(tcp标志头是0)</p><p><strong>FIN扫描 (-sF)</strong>　只设置TCP FIN标志位。</p><p><strong>Xmas扫描 (-sX)</strong>　设置FIN，PSH，和URG标志位，就像点亮圣诞树上所有的灯一样。</p><ul><li><p>除了探测报文的标志位不同，这三种扫描在行为上完全一致。 如果收到一个RST报文，该端口被认为是 closed(关闭的)，而没有响应则意味着 端口是open|filtered(开放或者被过滤的)。 如果收到ICMP不可到达错误(类型 3，代号 1，2，3，9，10，或者13)，该端口就被标记为 被过滤的。</p></li><li><p>这些扫描的关键优势是它们能躲过一些无状态防火墙和报文过滤路由器。 另一个优势是这些扫描类型甚至比SYN扫描还要隐秘一些。但是别依赖它 – 多数 现代的IDS产品可以发现它们。一个很大的不足是并非所有系统都严格遵循RFC 793。 许多系统不管端口开放还是关闭，都响应RST。 这导致所有端口都标记为closed(关闭的)。 这样的操作系统主要有Microsoft Windows，许多Cisco设备，BSDI，以及IBM OS/400。 但是这种扫描对多数UNIX系统都能工作。这些扫描的另一个不足是 它们不能辨别open(开放的)端口和一些特定的 filtered(被过滤的)端口，从而返回 open|filtered(开放或者被过滤的)。</p></li></ul><h4 id="sA-TCP-ACK扫描"><a href="#sA-TCP-ACK扫描" class="headerlink" title="-sA (TCP ACK扫描)"></a>-sA (TCP ACK扫描)</h4><ul><li><p>这种扫描与目前为止讨论的其它扫描的不同之处在于 它不能确定open(开放的)或者 open|filtered(开放或者过滤的))端口。 它用于发现防火墙规则，确定它们是有状态的还是无状态的，哪些端口是被过滤的。</p></li><li><p>ACK扫描探测报文只设置ACK标志位(除非您使用 –scanflags)。当扫描未被过滤的系统时， open(开放的)和closed(关闭的) 端口 都会返回RST报文。Nmap把它们标记为 unfiltered(未被过滤的)，意思是 ACK报文不能到达，但至于它们是open(开放的)或者 closed(关闭的) 无法确定。不响应的端口 或者发送特定的ICMP错误消息(类型3，代号1，2，3，9，10， 或者13)的端口，标记为 filtered(被过滤的)。</p></li></ul><h4 id="sW-TCP窗口扫描"><a href="#sW-TCP窗口扫描" class="headerlink" title="-sW (TCP窗口扫描)"></a>-sW (TCP窗口扫描)</h4><ul><li><p>除了利用特定系统的实现细节来区分开放端口和关闭端口，当收到RST时不总是打印unfiltered， 窗口扫描和ACK扫描完全一样。 它通过检查返回的RST报文的TCP窗口域做到这一点。 在某些系统上，开放端口用正数表示窗口大小(甚至对于RST报文) 而关闭端口的窗口大小为0。因此，当收到RST时，窗口扫描不总是把端口标记为 unfiltered， 而是根据TCP窗口值是正数还是0，分别把端口标记为open或者 closed</p></li><li><p>该扫描依赖于互联网上少数系统的实现细节， 因此您不能永远相信它。不支持它的系统会通常返回所有端口closed。 当然，一台机器没有开放端口也是有可能的。 如果大部分被扫描的端口是 closed，而一些常见的端口 (如 22， 25，53) 是 filtered，该系统就非常可疑了。 偶尔地，系统甚至会显示恰恰相反的行为。 如果您的扫描显示1000个开放的端口和3个关闭的或者被过滤的端口， 那么那3个很可能也是开放的端口。</p></li></ul><h4 id="sM-TCP-Maimon扫描"><a href="#sM-TCP-Maimon扫描" class="headerlink" title="-sM (TCP Maimon扫描)"></a>-sM (TCP Maimon扫描)</h4><ul><li>Maimon扫描是用它的发现者Uriel Maimon命名的。他在 Phrack Magazine issue #49 (November 1996)中描述了这一技术。 Nmap在两期后加入了这一技术。 这项技术和Null，FIN，以及Xmas扫描完全一样，除了探测报文是FIN/ACK。 根据RFC 793 (TCP)，无论端口开放或者关闭，都应该对这样的探测响应RST报文。 然而，Uriel注意到如果端口开放，许多基于BSD的系统只是丢弃该探测报文。</li></ul><h4 id="–scanflags-定制的TCP扫描"><a href="#–scanflags-定制的TCP扫描" class="headerlink" title="–scanflags (定制的TCP扫描)"></a>–scanflags (定制的TCP扫描)</h4><ul><li><p>真正的Nmap高级用户不需要被这些现成的扫描类型束缚。 –scanflags选项允许您通过指定任意TCP标志位来设计您自己的扫描。 让您的创造力流动，躲开那些仅靠本手册添加规则的入侵检测系统！</p></li><li><p>–scanflags选项可以是一个数字标记值如9 (PSH和FIN)， 但使用字符名更容易些。 只要是URG， ACK，PSH， RST，SYN，and FIN的任何组合就行。例如，–scanflags URGACKPSHRSTSYNFIN设置了所有标志位，但是这对扫描没有太大用处。 标志位的顺序不重要。</p></li><li><p>除了设置需要的标志位，您也可以设置 TCP扫描类型(如-sA或者-sF)。 那个基本类型告诉Nmap怎样解释响应。例如， SYN扫描认为没有响应意味着 filtered端口，而FIN扫描则认为是 open|filtered。 除了使用您指定的TCP标记位，Nmap会和基本扫描类型一样工作。 如果您不指定基本类型，就使用SYN扫描。</p></li></ul><h4 id="sI-Idlescan"><a href="#sI-Idlescan" class="headerlink" title="-sI  (Idlescan)"></a>-sI <zombie host[:probeport]=""> (Idlescan)</zombie></h4><ul><li><p>这种高级的扫描方法允许对目标进行真正的TCP端口盲扫描 (意味着没有报文从您的真实IP地址发送到目标)。相反，side-channel攻击 利用zombie主机上已知的IP分段ID序列生成算法来窥探目标上开放端口的信息。 IDS系统将显示扫描来自您指定的zombie机(必须运行并且符合一定的标准)。 这种奇妙的扫描类型太复杂了，不能在此完全描述，所以我写一篇非正式的论文， 发布在<a href="https://nmap.org/book/idlescan.html。" target="_blank" rel="noopener">https://nmap.org/book/idlescan.html。</a></p></li><li><p>除了极端隐蔽(由于它不从真实IP地址发送任何报文)， 该扫描类型可以建立机器间的基于IP的信任关系。 端口列表从zombie 主机的角度。显示开放的端口。 因此您可以尝试用您认为(通过路由器/包过滤规则)可能被信任的 zombies扫描目标。</p></li><li><p>如果您由于IPID改变希望探测zombie上的特定端口， 您可以在zombie 主机后加上一个冒号和端口号。 否则Nmap会使用默认端口(80)。</p></li></ul><h4 id="sO-IP协议扫描"><a href="#sO-IP协议扫描" class="headerlink" title="-sO (IP协议扫描)"></a>-sO (IP协议扫描)</h4><ul><li><p>IP 协议扫描可以让您确定目标机支持哪些IP协议 (TCP，ICMP，IGMP，等等)。从技术上说，这不是端口扫描 ，既然它遍历的是IP协议号而不是TCP或者UDP端口号。 但是它仍使用 -p选项选择要扫描的协议号， 用正常的端口表格式报告结果，甚至用和真正的端口扫描一样 的扫描引擎。因此它和端口扫描非常接近，也被放在这里讨论。</p></li><li><p>除了本身很有用，协议扫描还显示了开源软件的力量。 尽管基本想法非常简单，我过去从没想过增加这一功能也没收到任何对它的请求。 在2000年夏天，Gerhard Rieger孕育了这个想法，写了一个很棒的补丁程序，发送到nmap-hackers邮件列表。 我把那个补丁加入了Nmap，第二天发布了新版本。 几乎没有商业软件会有用户有足够的热情设计并贡献他们的改进。</p></li><li><p>协议扫描以和UDP扫描类似的方式工作。它不是在UDP报文的端口域上循环， 而是在IP协议域的8位上循环，发送IP报文头。 报文头通常是空的，不包含数据，甚至不包含所申明的协议的正确报文头 TCP，UDP，和ICMP是三个例外。它们三个会使用正常的协议头，因为否则某些系 统拒绝发送，而且Nmap有函数创建它们。协议扫描不是注意ICMP端口不可到达消息， 而是ICMP 协议不可到达消息。如果Nmap从目标主机收到 任何协议的任何响应，Nmap就把那个协议标记为open。 ICMP协议不可到达 错误(类型 3，代号 2) 导致协议被标记为 closed。其它ICMP不可到达协议(类型 3，代号 1，3，9，10，或者13) 导致协议被标记为 filtered (虽然同时他们证明ICMP是 open )。如果重试之后仍没有收到响应， 该协议就被标记为open|filtered</p></li></ul><h4 id="b-FTP弹跳扫描"><a href="#b-FTP弹跳扫描" class="headerlink" title="-b  (FTP弹跳扫描)"></a>-b <ftp relay="" host=""> (FTP弹跳扫描)</ftp></h4><ul><li><p>FTP协议的一个有趣特征(RFC 959) 是支持所谓代理ftp连接。它允许用户连接到一台FTP服务器，然后要求文件送到一台第三方服务器。 这个特性在很多层次上被滥用，所以许多服务器已经停止支持它了。其中一种就是导致FTP服务器对其它主机端口扫描。 只要请求FTP服务器轮流发送一个文件到目标主机上的所感兴趣的端口。 错误消息会描述端口是开放还是关闭的。 这是绕过防火墙的好方法，因为FTP服务器常常被置于可以访问比Web主机更多其它内部主机的位置。 Nmap用-b选项支持ftp弹跳扫描。参数格式是 <username>:<password>@<server>:<port>。 <server> 是某个脆弱的FTP服务器的名字或者IP地址。 您也许可以省略<username>:<password>， 如果服务器上开放了匿名用户(user:anonymous password:-wwwuser@)。 端口号(以及前面的冒号) 也可以省略，如果<server>使用默认的FTP端口(21)。</server></password></username></server></port></server></password></username></p></li><li><p>当Nmap1997年发布时，这个弱点被广泛利用，但现在大部分已经被fix了。 脆弱的服务器仍然存在，所以如果其它都失败了，这也值得一试。 如果您的目标是绕过防火墙，扫描目标网络上的开放的21端口(或者 甚至任何ftp服务，如果您用版本探测扫描所有端口)， 然后对每个尝试弹跳扫描。Nmap会告诉您该主机脆弱与否。 如果您只是试着玩Nmap，您不必(事实上，不应该)限制您自己。 在您随机地在互联网上寻找脆弱的FTP服务器时，考虑一下系统管理员不太喜欢您这样滥用他们的服务器</p></li></ul><h3 id="扫描说明及顺序"><a href="#扫描说明及顺序" class="headerlink" title="扫描说明及顺序"></a>扫描说明及顺序</h3><h4 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h4><ul><li>除了所有前面讨论的扫描方法， Nmap提供选项说明那些端口被扫描以及扫描是随机还是顺序进行。 默认情况下，Nmap用指定的协议对端口1到1024以及nmap-services 文件中列出的更高的端口在扫描</li></ul><h4 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h4><h5 id="p-只扫描指定的端口"><a href="#p-只扫描指定的端口" class="headerlink" title="-p  (只扫描指定的端口)"></a>-p <port ranges=""> (只扫描指定的端口)</port></h5><ul><li>该选项指明您想扫描的端口，覆盖默认值。 单个端口和用连字符表示的端口范围(如 1-1023)都可以。 范围的开始以及/或者结束值可以被省略， 分别导致Nmap使用1和65535。所以您可以指定 -p-从端口1扫描到65535。 如果您特别指定，也可以扫描端口0。 对于IP协议扫描(-sO)，该选项指定您希望扫描的协议号 (0-255)。</li></ul><ul><li>当既扫描TCP端口又扫描UDP端口时，您可以通过在端口号前加上T: 或者U:指定协议。 协议限定符一直有效您直到指定另一个。 例如，参数 -p U:53，111，137，T:21-25，80，139，8080 将扫描UDP 端口53，111，和137，同时扫描列出的TCP端口。注意，要既扫描 UDP又扫描TCP，您必须指定 -sU ，以及至少一个TCP扫描类型(如 -sS，-sF，或者 -sT)。如果没有给定协议限定符， 端口号会被加到所有协议列表。</li></ul><h5 id="F-快速-有限的端口-扫描"><a href="#F-快速-有限的端口-扫描" class="headerlink" title="-F (快速 (有限的端口) 扫描)"></a>-F (快速 (有限的端口) 扫描)</h5><ul><li>在nmap的nmap-services 文件中(对于-sO，是协议文件)指定您想要扫描的端口。 这比扫描所有65535个端口快得多。 因为该列表包含如此多的TCP端口(1200多)，这和默认的TCP扫描 scan (大约1600个端口)速度差别不是很大。如果您用–datadir选项指定您自己的 小小的nmap-services文件 ，差别会很惊人。</li></ul><h5 id="r-不要按随机顺序扫描端口"><a href="#r-不要按随机顺序扫描端口" class="headerlink" title="-r (不要按随机顺序扫描端口)"></a>-r (不要按随机顺序扫描端口)</h5><ul><li>默认情况下，Nmap按随机顺序扫描端口 (除了出于效率的考虑，常用的端口前移)。这种随机化通常都是受欢迎的， 但您也可以指定-r来顺序端口扫描</li></ul><hr><h2 id="0x05-服务和版本探测"><a href="#0x05-服务和版本探测" class="headerlink" title="0x05 服务和版本探测"></a>0x05 服务和版本探测</h2><h3 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h3><ul><li><p>把Nmap指向一个远程机器，它可能告诉您 端口25/tcp，80/tcp，和53/udp是开放的。使用包含大约2,200个著名的服务的 nmap-services数据库， Nmap可以报告那些端口可能分别对应于一个邮件服务器 (SMTP)，web服务器(HTTP)，和域名服务器(DNS)。 这种查询通常是正确的 – 事实上，绝大多数在TCP端口25监听的守护进程是邮件 服务器。然而，您不应该把赌注押在这上面! 人们完全可以在一些奇怪的端口上运行服务。</p></li><li><p>即使Nmap是对的，假设运行服务的确实是 SMTP，HTTP和DNS，那也不是特别多的信息。 当为您的公司或者客户作安全评估(或者甚至简单的网络明细清单)时， 您确实想知道正在运行什么邮件和域名服务器以及它们的版本。 有一个精确的版本号对了解服务器有什么漏洞有巨大帮助。 版本探测可以帮您获得该信息。</p></li><li><p>在用某种其它类型的扫描方法发现TCP 和/或者UDP端口后， 版本探测会询问这些端口，确定到底什么服务正在运行。 nmap-service-probes 数据库包含查询不同服务的探测报文 和解析识别响应的匹配表达式。 Nmap试图确定服务协议 (如 ftp，ssh，telnet，http)，应用程序名(如ISC Bind，Apache httpd，Solaris telnetd)，版本号， 主机名，设备类型(如 打印机，路由器)，操作系统家族 (如Windows，Linux)以及其它的细节，如 如是否可以连接X server，SSH协议版本 ，或者KaZaA用户名)。当然，并非所有服务都提供所有这些信息。 如果Nmap被编译成支持OpenSSL， 它将连接到SSL服务器，推测什么服务在加密层后面监听。 当发现RPC服务时， Nmap RPC grinder (-sR)会自动被用于确定RPC程序和它的版本号。 如果在扫描某个UDP端口后仍然无法确定该端口是开放的还是被过滤的，那么该端口状态就 被标记为open|filtered。 版本探测将试图从这些端口引发一个响应(就像它对开放端口做的一样)， 如果成功，就把状态改为开放。 open|filtered TCP端口用同样的方法对待。 注意Nmap -A选项在其它情况下打开版本探测。 </p></li><li><p>当Nmap从某个服务收到响应，但不能在数据库中找到匹配时， 它就打印一个特殊的fingerprint和一个URL给您提交，如果您确实知道什么服务运行在端口。 请花两分钟提交您的发现，让每个人受益。由于这些提交， Nmap有350种以上协议如smtp，ftp，http等的大约3，000条模式匹配</p></li></ul><h3 id="常用选项-3"><a href="#常用选项-3" class="headerlink" title="常用选项"></a>常用选项</h3><h4 id="sV-版本探测"><a href="#sV-版本探测" class="headerlink" title="-sV (版本探测)"></a>-sV (版本探测)</h4><ul><li>打开版本探测。 您也可以用-A同时打开操作系统探测和版本探测。</li></ul><h4 id="–allports-不为版本探测排除任何端口"><a href="#–allports-不为版本探测排除任何端口" class="headerlink" title="–allports (不为版本探测排除任何端口)"></a>–allports (不为版本探测排除任何端口)</h4><ul><li>默认情况下，Nmap版本探测会跳过9100 TCP端口，因为一些打印机简单地打印送到该端口的 任何数据，这回导致数十页HTTP get请求，二进制 SSL会话请求等等被打印出来。这一行为可以通过修改或删除nmap-service-probes 中的Exclude指示符改变， 您也可以不理会任何Exclude指示符，指定–allports扫描所有端口</li></ul><h4 id="–version-intensity-设置版本扫描强度"><a href="#–version-intensity-设置版本扫描强度" class="headerlink" title="–version-intensity  (设置版本扫描强度)"></a>–version-intensity <intensity> (设置版本扫描强度)</intensity></h4><ul><li>当进行版本扫描(-sV)时，nmap发送一系列探测报文 ，每个报文都被赋予一个1到9之间的值。 被赋予较低值的探测报文对大范围的常见服务有效，而被赋予较高值的报文 一般没什么用。强度水平说明了应该使用哪些探测报文。数值越高， 服务越有可能被正确识别。 然而，高强度扫描花更多时间。强度值必须在0和9之间。 默认是7。当探测报文通过nmap-service-probes ports指示符 注册到目标端口时，无论什么强度水平，探测报文都会被尝试。这保证了DNS 探测将永远在任何开放的53端口尝试， SSL探测将在443端口尝试，等等。</li></ul><h4 id="–version-light-打开轻量级模式"><a href="#–version-light-打开轻量级模式" class="headerlink" title="–version-light (打开轻量级模式)"></a>–version-light (打开轻量级模式)</h4><ul><li>这是 –version-intensity 2的方便的别名。轻量级模式使 版本扫描快许多，但它识别服务的可能性也略微小一点。</li></ul><h4 id="–version-all-尝试每个探测"><a href="#–version-all-尝试每个探测" class="headerlink" title="–version-all (尝试每个探测)"></a>–version-all (尝试每个探测)</h4><ul><li>–version-intensity 9的别名， 保证对每个端口尝试每个探测报文。</li></ul><p>–version-trace (跟踪版本扫描活动)<br>这导致Nmap打印出详细的关于正在进行的扫描的调试信息。 它是您用–packet-trace所得到的信息的子集。</p><h4 id="sR-RPC扫描"><a href="#sR-RPC扫描" class="headerlink" title="-sR (RPC扫描)"></a>-sR (RPC扫描)</h4><ul><li>这种方法和许多端口扫描方法联合使用。 它对所有被发现开放的TCP/UDP端口执行SunRPC程序NULL命令，来试图 确定它们是否RPC端口，如果是， 是什么程序和版本号。因此您可以有效地获得和rpcinfo -p一样的信息， 即使目标的端口映射在防火墙后面(或者被TCP包装器保护)。Decoys目前不能和RPC scan一起工作。 这作为版本扫描(-sV)的一部分自动打开。 由于版本探测包括它并且全面得多，-sR很少被需要</li></ul><hr><h2 id="0x06-操作系统探测"><a href="#0x06-操作系统探测" class="headerlink" title="0x06 操作系统探测"></a>0x06 操作系统探测</h2><h3 id="概述-3"><a href="#概述-3" class="headerlink" title="概述"></a>概述</h3><ul><li><p>Nmap最著名的功能之一是用TCP/IP协议栈fingerprinting进行远程操作系统探测。 Nmap发送一系列TCP和UDP报文到远程主机，检查响应中的每一个比特。 在进行一打测试如TCP ISN采样，TCP选项支持和排序，IPID采样，和初始窗口大小检查之后， Nmap把结果和数据库nmap-os-fingerprints中超过 1500个已知的操作系统的fingerprints进行比较，如果有匹配，就打印出操作系统的详细信息。 每个fingerprint包括一个自由格式的关于OS的描述文本， 和一个分类信息，它提供供应商名称(如Sun)，下面的操作系统(如Solaris)，OS版本(如10)， 和设备类型(通用设备，路由器，switch，游戏控制台， 等)。</p></li><li><p>如果Nmap不能猜出操作系统，并且有些好的已知条件(如 至少发现了一个开放端口和一个关闭端口)，Nmap会提供一个 URL，如果您确知运行的操作系统，您可以把fingerprint提交到那个URL。 这样您就扩大了Nmap的操作系统知识库，从而让每个Nmap用户都受益。</p></li><li><p>操作系统检测可以进行其它一些测试，这些测试可以利用处理 过程中收集到的信息。例如运行时间检测，使用TCP时间戳选项(RFC 1323) 来估计主机上次重启的时间，这仅适用于提供这类信息的主机。另一种 是TCP序列号预测分类，用于测试针对远程主机建立一个伪造的TCP连接 的可能难度。这对于利用基于源IP地址的可信关系(rlogin，防火墙过滤等) 或者隐含源地址的攻击非常重要。这一类哄骗攻击现在很少见，但一些 主机仍然存在这方面的漏洞。实际的难度值基于统计采样，因此可能会有 一些波动。通常采用英国的分类较好，如“worthy challenge”或者 “trivial joke”。在详细模式(-v)下只以 普通的方式输出，如果同时使用-O，还报告IPID序列产生号。 很多主机的序列号是“增加”类别，即在每个发送包的IP头中 增加ID域值， 这对一些先进的信息收集和哄骗攻击来说是个漏洞</p></li></ul><h3 id="常用选项-4"><a href="#常用选项-4" class="headerlink" title="常用选项"></a>常用选项</h3><h4 id="O-启用操作系统检测"><a href="#O-启用操作系统检测" class="headerlink" title="-O (启用操作系统检测)"></a>-O (启用操作系统检测)</h4><ul><li>也可以使用-A来同时启用操作系统检测和版本检测。</li></ul><h4 id="–osscan-limit-针对指定的目标进行操作系统检测"><a href="#–osscan-limit-针对指定的目标进行操作系统检测" class="headerlink" title="–osscan-limit (针对指定的目标进行操作系统检测)"></a>–osscan-limit (针对指定的目标进行操作系统检测)</h4><ul><li>如果发现一个打开和关闭的TCP端口时，操作系统检测会更有效。 采用这个选项，Nmap只对满足这个条件的主机进行操作系统检测，这样可以 节约时间，特别在使用-P0扫描多个主机时。这个选项仅在使用 -O或-A 进行操作系统检测时起作用。</li></ul><h4 id="–osscan-guess-–fuzzy-推测操作系统检测结果"><a href="#–osscan-guess-–fuzzy-推测操作系统检测结果" class="headerlink" title="–osscan-guess; –fuzzy (推测操作系统检测结果)"></a>–osscan-guess; –fuzzy (推测操作系统检测结果)</h4><ul><li>当Nmap无法确定所检测的操作系统时，会尽可能地提供最相近的匹配，Nmap默认 进行这种匹配，使用上述任一个选项使得Nmap的推测更加有效</li></ul><hr><h2 id="0x07-时间和性能"><a href="#0x07-时间和性能" class="headerlink" title="0x07 时间和性能"></a>0x07 时间和性能</h2><h3 id="概述-4"><a href="#概述-4" class="headerlink" title="概述"></a>概述</h3><ul><li><p>Nmap开发的最高优先级是性能。在本地网络对一个主机的默认扫描(nmap <hostname>)需要1/5秒。而仅仅眨眼的 时间，就需要扫描上万甚至几十万的主机。此外，一些特定的扫描选项会明显增 加扫描时间，如UDP扫描和版本检测。同样，防火墙配置以及特殊的响应速度限制也会 增加时间。Nmap使用了并行算法和许多先进的算法来加速扫描，用户对Nmap如何 工作有最终的控制权。高级用户可以仔细地调整Nmap命令，在满足时间要求的同时获得他们所关心的信息。</hostname></p></li><li><p>改善扫描时间的技术有：忽略非关键的检测、升级最新版本的Nmap(性能增强不断改善)</p></li></ul><h3 id="常用选项-5"><a href="#常用选项-5" class="headerlink" title="常用选项"></a>常用选项</h3><h4 id="–min-hostgroup-–max-hostgroup-调整并行扫描组的大小"><a href="#–min-hostgroup-–max-hostgroup-调整并行扫描组的大小" class="headerlink" title="–min-hostgroup ; –max-hostgroup  (调整并行扫描组的大小)"></a>–min-hostgroup <milliseconds>; –max-hostgroup <milliseconds> (调整并行扫描组的大小)</milliseconds></milliseconds></h4><ul><li><p>Nmap具有并行扫描多主机端口或版本的能力，Nmap将多个目标IP地址 空间分成组，然后在同一时间对一个组进行扫描。通常，大的组更有效。缺 点是只有当整个组扫描结束后才会提供主机的扫描结果。如果组的大小定义 为50，则只有当前50个主机扫描结束后才能得到报告(详细模式中的补充信息 除外)。</p></li><li><p>默认方式下，Nmap采取折衷的方法。开始扫描时的组较小， 最小为5，这样便于尽快产生结果；随后增长组的大小，最大为1024。确切的 大小依赖于所给定的选项。为保证效率，针对UDP或少量端口的TCP扫描，Nmap 使用大的组。</p></li><li><p>–max-hostgroup选项用于说明使用最大的组，Nmap不 会超出这个大小。–min-hostgroup选项说明最小的组，Nmap 会保持组大于这个值。如果在指定的接口上没有足够的目标主机来满足所 指定的最小值，Nmap可能会采用比所指定的值小的组。这两个参数虽然很少使用， 但都用于保持组的大小在一个指定的范围之内。</p></li><li><p>这些选项的主要用途是说明一个最小组的大小，使得整个扫描更加快速。通常 选择256来扫描C类网段。对于端口数较多的扫描，超出该值没有意义。对于 端口数较少的扫描，2048或更大的组大小是有帮助的。</p></li></ul><h4 id="–min-parallelism-–max-parallelism-调整探测报文的并行度"><a href="#–min-parallelism-–max-parallelism-调整探测报文的并行度" class="headerlink" title="–min-parallelism ; –max-parallelism  (调整探测报文的并行度)"></a>–min-parallelism <milliseconds>; –max-parallelism <milliseconds> (调整探测报文的并行度)</milliseconds></milliseconds></h4><ul><li><p>这些选项控制用于主机组的探测报文数量，可用于端口扫描和主机发现。默认状态下， Nmap基于网络性能计算一个理想的并行度，这个值经常改变。如果报文被丢弃， Nmap降低速度，探测报文数量减少。随着网络性能的改善，理想的探测报文数量会缓慢增加。 这些选项确定这个变量的大小范围。默认状态下，当网络不可靠时，理想的并行度值 可能为1，在好的条件下，可能会增长至几百。</p></li><li><p>最常见的应用是–min-parallelism值大于1，以加快 性能不佳的主机或网络的扫描。这个选项具有风险，如果过高则影响准确度，同时 也会降低Nmap基于网络条件动态控制并行度的能力。这个值设为10较为合适， 这个值的调整往往作为最后的手段。</p></li><li><p>–max-parallelism选项通常设为1，以防止Nmap在同一时间 向主机发送多个探测报文，和选择–scan-delay同时使用非常有用，虽然 这个选项本身的用途已经很好。</p></li></ul><h4 id="–min-rtt-timeout-，-–max-rtt-timeout-，-–initial-rtt-timeout-调整探测报文超时"><a href="#–min-rtt-timeout-，-–max-rtt-timeout-，-–initial-rtt-timeout-调整探测报文超时" class="headerlink" title="–min-rtt-timeout ， –max-rtt-timeout ， –initial-rtt-timeout  (调整探测报文超时)"></a>–min-rtt-timeout <milliseconds>， –max-rtt-timeout <milliseconds>， –initial-rtt-timeout <milliseconds> (调整探测报文超时)</milliseconds></milliseconds></milliseconds></h4><ul><li><p>Nmap使用一个运行超时值来确定等待探测报文响应的时间，随后会放弃或重新 发送探测报文。Nmap基于上一个探测报文的响应时间来计算超时值，如果网络延迟比较显著 和不定，这个超时值会增加几秒。初始值的比较保守(高)，而当Nmap扫描无响应 的主机时，这个保守值会保持一段时间。</p></li><li><p>这些选项以毫秒为单位，采用小的–max-rtt-timeout值，使 –initial-rtt-timeout值大于默认值可以明显减少扫描时间，特别 是对不能ping通的扫描(-P0)以及具有严格过滤的网络。如果使用太 小的值，使得很多探测报文超时从而重新发送，而此时可能响应消息正在发送，这使得整个扫描的时 间会增加。</p></li><li><p>如果所有的主机都在本地网络，对于–max-rtt-timeout值来 说，100毫秒比较合适。如果存在路由，首先使用ICMP ping工具ping主机，或使用其 它报文工具如hpings，可以更好地穿透防火墙。查看大约10个包的最大往返时间，然后将 –initial-rtt-timeout设成这个时间的2倍，–max-rtt-timeout 可设成这个时间值的3倍或4倍。通常，不管ping的时间是多少，最大的rtt值不得小于100ms， 不能超过1000ms。</p></li><li><p>–min-rtt-timeout这个选项很少使用，当网络不可靠时， Nmap的默认值也显得过于强烈，这时这个选项可起作用。当网络看起来不可靠时，Nmap仅将 超时时间降至最小值，这个情况是不正常的，需要向nmap-dev邮件列表报告bug。</p></li></ul><h4 id="–host-timeout-放弃低速目标主机"><a href="#–host-timeout-放弃低速目标主机" class="headerlink" title="–host-timeout  (放弃低速目标主机)"></a>–host-timeout <milliseconds> (放弃低速目标主机)</milliseconds></h4><ul><li>由于性能较差或不可靠的网络硬件或软件、带宽限制、严格的防火墙等原因， 一些主机需要很长的时间扫描。这些极少数的主机扫描往往占 据了大部分的扫描时间。因此，最好的办法是减少时间消耗并且忽略这些主机，使用 –host-timeout选项来说明等待的时间(毫秒)。通常使用1800000 来保证Nmap不会在单个主机上使用超过半小时的时间。需要注意的是，Nmap在这半小时中可以 同时扫描其它主机，因此并不是完全放弃扫描。超时的主机被忽略，因此也没有针对该主机的 端口表、操作系统检测或版本检测结果的输出。</li></ul><h4 id="–scan-delay-–max-scan-delay-调整探测报文的时间间隔"><a href="#–scan-delay-–max-scan-delay-调整探测报文的时间间隔" class="headerlink" title="–scan-delay ; –max-scan-delay  (调整探测报文的时间间隔)"></a>–scan-delay <milliseconds>; –max-scan-delay <milliseconds> (调整探测报文的时间间隔)</milliseconds></milliseconds></h4><ul><li><p>这个选项用于Nmap控制针对一个主机发送探测报文的等待时间(毫秒)，在带宽 控制的情况下这个选项非常有效。Solaris主机在响应UDP扫描探测报文报文时，每秒 只发送一个ICMP消息，因此Nmap发送的很多数探测报文是浪费的。–scan-delay 设为1000，使Nmap低速运行。Nmap尝试检测带宽控制并相应地调整扫描的延迟，但 并不影响明确说明何种速度工作最佳。</p></li><li><p>–scan-delay的另一个用途是躲闭基于阈值的入侵检测和预防 系统(IDS/IPS)。</p></li></ul><h4 id="T-lt-Paranoid-Sneaky-Polite-Normal-Aggressive-Insane-gt-设置时间模板"><a href="#T-lt-Paranoid-Sneaky-Polite-Normal-Aggressive-Insane-gt-设置时间模板" class="headerlink" title="-T &lt;Paranoid|Sneaky|Polite|Normal|Aggressive|Insane&gt; (设置时间模板)"></a>-T &lt;Paranoid|Sneaky|Polite|Normal|Aggressive|Insane&gt; (设置时间模板)</h4><ul><li><p>上述优化时间控制选项的功能很强大也很有效，但有些用户会被迷惑。此外， 往往选择合适参数的时间超过了所需优化的扫描时间。因此，Nmap提供了一些简单的 方法，使用6个时间模板，使用时采用-T选项及数字(0 - 5) 或名称。模板名称有paranoid (0)、sneaky (1)、polite (2)、normal(3)、 aggressive (4)和insane (5)。前两种模式用于IDS躲避，Polite模式降低了扫描 速度以使用更少的带宽和目标主机资源。默认模式为Normal，因此-T3 实际上是未做任何优化。Aggressive模式假设用户具有合适及可靠的网络从而加速 扫描。Insane模式假设用户具有特别快的网络或者愿意为获得速度而牺牲准确性。</p></li><li><p>用户可以根据自己的需要选择不同的模板，由Nmap负责选择实际的时间值。 模板也会针对其它的优化控制选项进行速度微调。例如，-T4 针对TCP端口禁止动态扫描延迟超过10ms，-T5对应的值为5ms。 模板可以和优化调整控制选项组合使用，但模板必须首先指定，否则模板的标准值 会覆盖用户指定的值。建议在扫描可靠的网络时使用 -T4，即使 在自己要增加优化控制选项时也使用(在命令行的开始)，从而从这些额外的较小的优化 中获益。</p></li><li><p>如果用于有足够的带宽或以太网连接，仍然建议使用-T4选项。 有些用户喜欢-T5选项，但这个过于强烈。有时用户考虑到避免使主机 崩溃或者希望更礼貌一些会采用-T2选项。他们并没意识到-T Polite选项是如何的慢，这种模式的扫描比默认方式实际上要多花10倍的时间。默认时间 选项(-T3)很少有主机崩溃和带宽问题，比较适合于谨慎的用户。不进行 版本检测比进行时间调整能更有效地解决这些问题。</p></li><li><p>虽然-T0和-T1选项可能有助于避免IDS告警，但 在进行上千个主机或端口扫描时，会显著增加时间。对于这种长时间的扫描，宁可设定确切的时间 值，而不要去依赖封装的-T0和-T1选项。</p></li><li><p>T0选项的主要影响是对于连续扫描，在一个时间只能扫描一个端口， 每个探测报文的发送间隔为5分钟。T1和T2选项比较类似， 探测报文间隔分别为15秒和0.4秒。T3是Nmap的默认选项，包含了并行扫描。 T4选项与 –max-rtt-timeout 1250 –initial-rtt-timeout 500 等价，最大TCP扫描延迟为10ms。T5等价于 –max-rtt-timeout 300 –min-rtt-timeout 50 –initial-rtt-timeout 250 –host-timeout 900000，最大TCP扫描延迟为5ms</p></li></ul><hr><h2 id="0x08-防火墙-IDS躲避和哄骗"><a href="#0x08-防火墙-IDS躲避和哄骗" class="headerlink" title="0x08 防火墙/IDS躲避和哄骗"></a>0x08 防火墙/IDS躲避和哄骗</h2><h3 id="概述-5"><a href="#概述-5" class="headerlink" title="概述"></a>概述</h3><ul><li><p>很多Internet先驱们设想了一个全球开放的网络，使用全局的IP 地址空间，使得任何两个节点之间都有虚拟连接。这使得主机间可以作为真 正的对等体，相互间提供服务和获取信息。人们可以在工作时访问家里所 有的系统、调节空调温度、为提前到来的客人开门。随后，这些全球连接的设想 受到了地址空间短缺和安全考虑的限制。在90年代早期，各种机构开始部 署防火墙来实现减少连接的目的，大型网络通过代理、NAT和包过滤器与未 过滤的Internet隔离。不受限的信息流被严格控制的可信通信通道信息流所替代。</p></li><li><p>类似防火墙的网络隔离使得对网络的搜索更加困难，随意的搜 索变得不再简单。然而，Nmap提供了很多特性用于理解这些复杂的网 络，并且检验这些过滤器是否正常工作。此外，Nmap提供了绕过某些较弱的 防范机制的手段。检验网络安全状态最有效的方法之一是尝试哄骗网络，将 自己想象成一个攻击者，使用本节提供的技术来攻击自己的网络。如使用FTP bounce扫描、Idle扫描、分片攻击或尝试穿透自己的代理。</p></li><li><p>除限止网络的行为外，使用入侵检测系统(IDS)的公司也不断增加。由于Nmap 常用于攻击前期的扫描，因此所有主流的IDS都包含了检测Nmap扫描的规则。 现在，这些产品变形为入侵预防系统(IPS)，可以主 动地阻止可疑的恶意行为。不幸的是，网络管理员和IDS厂商通过分析报文 来检测恶意行为是一个艰苦的工作，有耐心和技术的攻击者，在特定Nmap选项 的帮助下，常常可以不被IDS检测到。同时，管理员必须应付大量的误报结果， 正常的行为被误判而被改变或阻止。</p></li><li><p>有时，人们建议Nmap不应该提供躲闭防火墙规则或哄骗IDS的功能， 这些功能可能会被攻击者滥用，然而管理员却可以利用这些功能来增强安全性。 实际上，攻击的方法仍可被攻击者利用，他们可以发现其它工具或Nmap的补丁程 序。同时，管理员发现攻击者的工作更加困难，相比较采取措施来预防执 行FTP Bounce攻击的工具而言，部署先进的、打过补丁的FTP服务器更 加有效</p></li></ul><h3 id="常用选项-6"><a href="#常用选项-6" class="headerlink" title="常用选项"></a>常用选项</h3><h4 id="f-报文分段-–mtu-使用指定的MTU"><a href="#f-报文分段-–mtu-使用指定的MTU" class="headerlink" title="-f (报文分段); –mtu (使用指定的MTU)"></a>-f (报文分段); –mtu (使用指定的MTU)</h4><ul><li>-f选项要求扫描时(包挺ping扫描)使用 小的IP包分段。其思路是将TCP头分段在几个包中，使得包过滤器、 IDS以及其它工具的检测更加困难。必须小心使用这个选项，有些系 统在处理这些小包时存在问题，例如旧的网络嗅探器Sniffit在接收 到第一个分段时会立刻出现分段错误。该选项使用一次，Nmap在IP 头后将包分成8个字节或更小。因此，一个20字节的TCP头会被分成3个 包，其中2个包分别有TCP头的8个字节，另1个包有TCP头的剩下4个字 节。当然，每个包都有一个IP头。再次使用-f可使用 16字节的分段(减少分段数量)。使用–mtu选项可 以自定义偏移的大小，使用时不需要-f，偏移量必须 是8的倍数。包过滤器和防火墙对所有的IP分段排队，如Linux核心中的 CONFIG-IP-ALWAYS-DEFRAG配置项，分段包不会直接使用。一些网络无法 承受这样所带来的性能冲击，会将这个配置禁止。其它禁止的原因有分段 包会通过不同的路由进入网络。一些源系统在内核中对发送的报文进行 分段，使用iptables连接跟踪模块的Linux就是一个例子。当使用类似Ethereal 的嗅探器时，扫描必须保证发送的报文要分段。如果主机操作系统会产 生问题，尝试使用–send-eth选项以避开IP层而直接 发送原始的以太网帧。</li></ul><h4 id="D-使用诱饵隐蔽扫描"><a href="#D-使用诱饵隐蔽扫描" class="headerlink" title="-D  (使用诱饵隐蔽扫描)"></a>-D <decoy1 [，decoy2][，me]，...=""> (使用诱饵隐蔽扫描)</decoy1></h4><ul><li><p>为使诱饵扫描起作用，需要使远程主机认为是诱饵在扫描目标网络。 IDS可能会报个某个IP的5-10个端口扫描，但并不知道哪个IP在扫描以及 哪些不是诱饵。但这种方式可以通过路由跟踪、响应丢弃以及其它主动 机制在解决。这是一种常用的隐藏自身IP地址的有效技术。</p></li><li><p>使用逗号分隔每个诱饵主机，也可用自己的真实IP作为诱饵，这时可使用 ME选项说明。如果在第6个位置或 更后的位置使用ME选项，一些常用 端口扫描检测器(如Solar Designer’s excellent scanlogd)就不会报告 这个真实IP。如果不使用ME选项，Nmap 将真实IP放在一个随机的位置</p></li><li><p>注意，作为诱饵的主机须在工作状态，否则会导致目标主机的SYN洪水攻击。 如果在网络中只有一个主机在工作，那就很容易确定哪个主机在扫描。也可 使用IP地址代替主机名(被诱骗的网络就不可能在名字服务器日志中发现)。</p></li><li><p>诱饵可用在初始的ping扫描(ICMP、SYN、ACK等)阶段或真正的端口扫描 阶段。诱饵也可以用于远程操作系统检测(-O)。在进行版 本检测或TCP连接扫描时，诱饵无效。</p></li><li><p>使用过多的诱饵没有任何价值，反而导致扫描变慢并且结果不准确。 此外，一些ISP会过滤哄骗的报文，但很多对欺骗IP包没有任何限制。</p></li></ul><h4 id="S-lt-IP-Address-gt-源地址哄骗"><a href="#S-lt-IP-Address-gt-源地址哄骗" class="headerlink" title="-S &lt;IP_Address&gt; (源地址哄骗)"></a>-S &lt;IP_Address&gt; (源地址哄骗)</h4><ul><li><p>在某些情况下，Nmap可能无法确定你的源地址(如果这样，Nmap会给出 提示)。此时，使用-S选项并说明所需发送包的接口IP地址。</p></li><li><p>这个标志的另一个用处是哄骗性的扫描，使得目标认为是另 一个地址在进行扫描。可以想象某一个竞争对手在不断扫描某个公司！ -e选项常在这种情况下使用，也可采用-P0选项。</p></li></ul><h4 id="e-使用指定的接口"><a href="#e-使用指定的接口" class="headerlink" title="-e  (使用指定的接口)"></a>-e <interface> (使用指定的接口)</interface></h4><ul><li>告诉Nmap使用哪个接口发送和接收报文，Nmap可以进行自动检测， 如果检测不出会给出提示。</li></ul><h4 id="–source-port-portnumber-g-portnumber-源端口哄骗"><a href="#–source-port-portnumber-g-portnumber-源端口哄骗" class="headerlink" title="–source-port (portnumber); -g (portnumber) (源端口哄骗)"></a>–source-port (portnumber); -g (portnumber) (源端口哄骗)</h4><ul><li><p>仅依赖于源端口号就信任数据流是一种常见的错误配置，这个问题非常 好理解。例如一个管理员部署了一个新的防火墙，但招来了很多用户的不满，因为 他们的应用停止工作了。可能是由于外部的UDP DNS服务器响应无法进入网络，而导致 DNS的崩溃。FTP是另一个常见的例子，在FTP传输时，远程服务器尝试和内部用 建立连接以传输数据。</p></li><li><p>对这些问题有安全解决方案，通常是应用级代理或协议分析防火墙模块。 但也存在一些不安全的方案。注意到DNS响应来自于53端口，FTP连接 来自于20端口，很多管理员会掉入一个陷阱，即允许来自于这些端口的数据进入 网络。他们认为这些端口里不会有值得注意的攻击和漏洞利用。此外，管理员 或许认为这是一个短期的措施，直至他们采取更安全的方案。但他们忽视了安全的 升级。</p></li><li><p>不仅仅是工作量过多的网络管理员掉入这种陷阱，很多产品本身也会有这类 不安全的隐患，甚至是微软的产品。Windows 2000和Windows XP中包含的IPsec过滤 器也包含了一些隐含规则，允许所有来自88端口(Kerberos)的TCP和UDP数据流。另 一个常见的例子是Zone Alarm个人防火墙到2.1.25版本仍然允许源端口53(DNS)或 67(DHCP)的UDP包进入。</p></li><li><p>Nmap提供了-g和–source-port选项(它们是 等价的)，用于利用上述弱点。只需要提供一个端口号，Nmap就可以从这些 端口发送数据。为使特定的操作系统正常工作，Nmap必须使用不同的端口号。 DNS请求会忽略–source-port选项，这是因为Nmap依靠系 统库来处理。大部分TCP扫描，包括SYN扫描，可以完全支持这些选项，UDP扫 描同样如此。</p></li></ul><h4 id="–data-length-number-发送报文时-附加随机数据"><a href="#–data-length-number-发送报文时-附加随机数据" class="headerlink" title="–data-length (number) (发送报文时 附加随机数据)"></a>–data-length (number) (发送报文时 附加随机数据)</h4><ul><li>正常情况下，Nmap发送最少的报文，只含一个包头。因此TCP包通常 是40字节，ICMP ECHO请求只有28字节。这个选项告诉Nmap在发送的报文上 附加指定数量的随机字节。操作系统检测(-O)包不受影响， 但大部分ping和端口扫描包受影响，这会使处理变慢，但对扫描的影响较小。</li></ul><h4 id="–ttl-设置IP-time-to-live域"><a href="#–ttl-设置IP-time-to-live域" class="headerlink" title="–ttl  (设置IP time-to-live域)"></a>–ttl <value> (设置IP time-to-live域)</value></h4><ul><li>设置IPv4报文的time-to-live域为指定的值。</li></ul><h4 id="–randomize-hosts-对目标主机的顺序随机排列"><a href="#–randomize-hosts-对目标主机的顺序随机排列" class="headerlink" title="–randomize-hosts (对目标主机的顺序随机排列)"></a>–randomize-hosts (对目标主机的顺序随机排列)</h4><ul><li>告诉Nmap在扫描主机前对每个组中的主机随机排列，最多可达 8096个主机。这会使得扫描针对不同的网络监控系统来说变得不是很 明显，特别是配合值较小的时间选项时更有效。如果需要对一个较大 的组进行随机排列，需要增大nmap.h文件中 PING-GROUP-SZ的值，并重新编译。另一种方法是使用列表扫描 (-sL -n -oN <filename>)，产生目标IP的列表， 使用Perl脚本进行随机化，然后使用-iL提供给Nmap。</filename></li></ul><h4 id="–spoof-mac-MAC地址哄骗"><a href="#–spoof-mac-MAC地址哄骗" class="headerlink" title="–spoof-mac  (MAC地址哄骗)"></a>–spoof-mac <mac address，prefix，or="" vendor="" name=""> (MAC地址哄骗)</mac></h4><ul><li>要求Nmap在发送原以太网帧时使用指定的MAC地址，这个选项隐含了 –send-eth选项，以保证Nmap真正发送以太网包。MAC地址有几 种格式。如果简单地使用字符串“0”，Nmap选择一个完全随机的MAC 地址。如果给定的字符品是一个16进制偶数(使用:分隔)，Nmap将使用这个MAC地址。 如果是小于12的16进制数字，Nmap会随机填充剩下的6个字节。如果参数不是0或16进 制字符串，Nmap将通过nmap-mac-prefixes查找 厂商的名称(大小写区分)，如果找到匹配，Nmap将使用厂商的OUI(3字节前缀)，然后 随机填充剩余的3个节字。正确的–spoof-mac参数有， Apple， 0，01:02:03:04:05:06， deadbeefcafe，0020F2， 和Cisco</li></ul><hr><h2 id="0x09-输出"><a href="#0x09-输出" class="headerlink" title="0x09 输出"></a>0x09 输出</h2><h3 id="概述-6"><a href="#概述-6" class="headerlink" title="概述"></a>概述</h3><ul><li><p>任何安全工具只有在输出结果时才是有价值的，如果没有通过组织和 易于理解的方式来表达，复杂的测试和算法几乎没有意义。Nmap提供了一些 方式供用户和其它软件使用，实际上，没有一种方式可以使所有人满意。 因此Nmap提供了一些格式，包含了方便直接查看的交互方式和方便软件处理 的XML格式。</p></li><li><p>除了提供输出格式外，Nmap还提供了选项来控制输出的细节以及调试 信息。输出内容可发送给标准输出或命名文件，可以追加或覆盖。输出文件还可 被用于继续中断的扫描。</p></li><li><p>Nmap提供5种不同的输出格式。默认的方式是interactive output， 发送给标准输出(stdout)。normal output方式类似于 interactive，但显示较少的运行时间信息 和告警信息，这是由于这些信息是在扫描完全结束后用于分析，而不是交互式的。</p></li><li><p>XML输出是最重要的输出类型，可被转换成HTML，对于程序处理非常方便， 如用于Nmap图形用户接口或导入数据库。</p></li><li><p>另两种输出类型比较简单，grepable output格式，在一行中包含目标主机最多的信息；sCRiPt KiDDi3 0utPUt 格式，用于考虑自己的用户 |&lt;-r4d。</p></li><li><p>交互式输出是默认方式，没有相应的命令行选项，其它四种格式选项 使用相同的语法，采用一个参数，即存放结果的文件名。多种格式可同时 使用，但一种格式只能使用一次。例如，在标准输出用于查看的同时，可将结 果保存到XML文件用于程序分析，这时可以使用选项-oX myscan.xml -oN myscan.nmap。 为便于描述的简化，本章使用类似于myscan.xml的简单文件名， 建议采用更具有描述性的文件名。文件名的选择与个人喜好有关，建议增加 扫描日期以及一到两个单词来描述，并放置于一个目录中。</p></li><li><p>在将结果输出到文件的同时，Nmap仍将结果发送给标准输出。例如， 命令nmap -oX myscan.xml target将 输出XML至myscan.xml，并在stdout 上打印相同的交互式结果，而此时-oX选项没有采用。可以 使用连字符作为选项来改变，这使得Nmap禁止交互式输出，而是将结果打印到 所指定的标准输出流中。因此，命令nmap -oX - target只 输出XML至标准输出stdout。严重错误仍然是输出到标准错误流stderr中。</p></li><li><p>与其它Nmap参数不同，日志文件选项的空格(如-oX)和 文件名或连字符是必需的。如果省略了标记，例如-oG-或 -oXscan.xml，Nmap的向后兼容特点将建立 标准格式的输出文件，相应的文件名为G-和 Xscan.xml。</p></li><li><p>Nmap还提供了控制扫描细节以及输出文件的添加或覆盖的选项</p></li></ul><h3 id="Nmap输出格式"><a href="#Nmap输出格式" class="headerlink" title="Nmap输出格式"></a>Nmap输出格式</h3><h4 id="oN-标准输出"><a href="#oN-标准输出" class="headerlink" title="-oN  (标准输出)"></a>-oN <filespec> (标准输出)</filespec></h4><p>要求将标准输出直接写入指定 的文件。如上所述，这个格式与交互式输出 略有不同。</p><h4 id="oX-XML输出"><a href="#oX-XML输出" class="headerlink" title="-oX  (XML输出)"></a>-oX <filespec> (XML输出)</filespec></h4><ul><li><p>要求XML输出直接写入指定 的文件。Nmap包含了一个文档类型定义(DTD)，使XML解析器有效地 进行XML输出。这主要是为了程序应用，同时也可以协助人工解释 Nmap的XML输出。DTD定义了合法的格式元素，列举可使用的属性和 值。最新的版本可在 <a href="http://www.insecure.org/nmap/data/nmap.dtd获取。" target="_blank" rel="noopener">http://www.insecure.org/nmap/data/nmap.dtd获取。</a></p></li><li><p>XML提供了可供软件解析的稳定格式输出，主要的计算机 语言都提供了免费的XML解析器，如C/C++，Perl，Python和Java。 针对这些语言有一些捆绑代码用于处理Nmap的输出和特定的执行程序。 例如perl CPAN中的Nmap::Scanner 和Nmap::Parser。 对几乎所有与Nmap有接口的主要应用来说，XML是首选的格式。</p></li><li><p>XML输出引用了一个XSL样式表，用于格式化输出结果，类似于 HTML。最方便的方法是将XML输出加载到一个Web浏览器，如Firefox 或IE。由于nmap.xsl文件的绝对 路径，因此通常只能在运行了Nmap的机器上工作(或类似配置的机器)。 类似于任何支持Web机器的HTML文件，–stylesheet 选项可用于建立可移植的XML文件。</p></li></ul><h4 id="oS-ScRipT-KIdd-3-oUTpuT"><a href="#oS-ScRipT-KIdd-3-oUTpuT" class="headerlink" title="-oS  (ScRipT KIdd|3 oUTpuT)"></a>-oS <filespec> (ScRipT KIdd|3 oUTpuT)</filespec></h4><ul><li>脚本小子输出类似于交互工具输出，这是一个事后处理，适合于 ‘l33t HaXXorZ， 由于原来全都是大写的Nmap输出。这个选项和脚本小子开了玩笑，看上去似乎是为了 “帮助他们”。</li></ul><h4 id="oG-Grep输出"><a href="#oG-Grep输出" class="headerlink" title="-oG  (Grep输出)"></a>-oG <filespec> (Grep输出)</filespec></h4><ul><li><p>这种方式最后介绍，因为不建议使用。XML输格式很强大，便于有经验 的用户使用。XML是一种标准，由许多解析器构成，而Grep输届更简化。XML 是可扩展的，以支持新发布的Nmap特点。使用Grep输出的目的是忽略这些 特点，因为没有足够的空间。</p></li><li><p>然面，Grep输出仍然很常使用。它是一种简单格式，每行一个主机，可以 通过UNIX工具(如grep、awk、cut、sed、diff)和Perl方便地查找和分解。常可 用于在命令行上进行一次性测式。查找ssh端口打开或运行Sloaris的主机，只需 要一个简单的grep主机说明，使用通道并通过awk或cut命令打印所需的域。</p></li><li><p>Grep输出可以包含注释(每行由#号开始)。每行由6个标记的域组成，由制表符及 冒号分隔。这些域有主机，端口， 协议，忽略状态， 操作系统，序列号， IPID和状态。</p></li><li><p>这些域中最重要的是Ports，它提供 了所关注的端口的细节，端口项由逗号分隔。每个端口项代表一个所关注的端口， 每个子域由/分隔。这些子域有：端口号， 状态，协议， 拥有者，服务， SunRPCinfo和版本信息。</p></li><li><p>对于XML输出，本手册无法列举所有的格式，有关Nmap Grep输出的更详细信息可 查阅<a href="http://www.unspecific.com/nmap-oG-output。" target="_blank" rel="noopener">http://www.unspecific.com/nmap-oG-output。</a></p></li></ul><h4 id="oA-输出至所有格式"><a href="#oA-输出至所有格式" class="headerlink" title="-oA  (输出至所有格式)"></a>-oA <basename> (输出至所有格式)</basename></h4><ul><li>为使用方便，利用-oA<basename>选项 可将扫描结果以标准格式、XML格式和Grep格式一次性输出。分别存放在 <basename>.nmap，<basename>.xml和 <basename>.gnmap文件中。也可以在文件名前 指定目录名，如在UNIX中，使用~/nmaplogs/foocorp/， 在Window中，使用c:\hacking\sco on Windows</basename></basename></basename></basename></li></ul><h3 id="细节和调试选项"><a href="#细节和调试选项" class="headerlink" title="细节和调试选项"></a>细节和调试选项</h3><h4 id="v-提高输出信息的详细度"><a href="#v-提高输出信息的详细度" class="headerlink" title="-v (提高输出信息的详细度)"></a>-v (提高输出信息的详细度)</h4><ul><li><p>通过提高详细度，Nmap可以输出扫描过程的更多信息。 输出发现的打开端口，若Nmap认为扫描需要更多时间会显示估计 的结束时间。这个选项使用两次，会提供更详细的信息。这个选 项使用两次以上不起作用。</p></li><li><p>大部分的变化仅影响交互式输出，也有一些影响标准和脚本 小子输出。其它输出类型由机器处理，此时Nmap默认提供详细的信 息，不需要人工干预。然而，其它模式也会有一些变化，省略一些 细节可以减小输出大小。例如，Grep输出中的注释行提供所有扫描 端口列表，但由于这些信息过长，因此只能在细节模式中输出。</p></li></ul><h4 id="d-level-提高或设置调试级别"><a href="#d-level-提高或设置调试级别" class="headerlink" title="-d [level] (提高或设置调试级别)"></a>-d [level] (提高或设置调试级别)</h4><ul><li><p>当详细模式也不能为用户提供足够的数据时，使用调试可以得到更 多的信息。使用细节选项(-v)时，可启用命令行参数 (-d)，多次使用可提高调试级别。也可在-d 后面使用参数设置调试级别。例如，-d9设定级别9。这是 最高的级别，将会产生上千行的输出，除非只对很少的端口和目标进行简单扫描。</p></li><li><p>如果Nmap因为Bug而挂起或者对Nmap的工作及原理有疑问，调试输出 非常有效。主要是开发人员用这个选项，调试行不具备自我解释的特点。 例如，Timeoutvals: srtt: -1 rttvar: -1 to: 1000000 delta 14987 ==&gt; srtt: 14987 rttvar: 14987 to: 100000。如果对某行输出不明白， 可以忽略、查看源代码或向开发列表(nmap-dev)求助。有些输出行会有自 我解释的特点，但随着调试级别的升高，会越来越含糊。</p></li></ul><h4 id="–packet-trace-跟踪发送和接收的报文"><a href="#–packet-trace-跟踪发送和接收的报文" class="headerlink" title="–packet-trace (跟踪发送和接收的报文)"></a>–packet-trace (跟踪发送和接收的报文)</h4><ul><li>要求Nmap打印发送和接收的每个报文的摘要，通常用于 调试，有助于新用户更好地理解Nmap的真正工作。为避免输出过 多的行，可以限制扫描的端口数，如-p20-30。 如果只需进行版本检测，使用–version-trace。</li></ul><h4 id="–iflist-列举接口和路由"><a href="#–iflist-列举接口和路由" class="headerlink" title="–iflist (列举接口和路由)"></a>–iflist (列举接口和路由)</h4><ul><li>输出Nmap检测到的接口列表和系统路由，用于调试路由 问题或设备描述失误(如Nmap把PPP连接当作以太网对待)</li></ul><h3 id="其它输出选项"><a href="#其它输出选项" class="headerlink" title="其它输出选项"></a>其它输出选项</h3><h4 id="–append-output-在输出文件中添加"><a href="#–append-output-在输出文件中添加" class="headerlink" title="–append-output (在输出文件中添加)"></a>–append-output (在输出文件中添加)</h4><ul><li>当使用文件作为输出格式，如-oX或-oN， 默认该文件被覆盖。如果希望文件保留现有内容，将结果添加在现 有文件后面，使用–append-output选项。所有指 定的输出文件都被添加。但对于XML(-oX)扫描输出 文件无效，无法正常解析，需要手工修改。</li></ul><h4 id="–resume-继续中断的扫描"><a href="#–resume-继续中断的扫描" class="headerlink" title="–resume  (继续中断的扫描)"></a>–resume <filename> (继续中断的扫描)</filename></h4><ul><li>一些扩展的Nmap运行需要很长的时间 – 以天计算，这类扫描 往往不会结束。可以进行一些限制，禁止Nmap在工作时间运行，导致 网络中断、运行Nmap的主机计划或非计划地重启、或者Nmap自己中断。 运行Nmap的管理员可以因其它原因取消运行，按下ctrl-C 即可。从头开始启动扫描可能令人不快，幸运的是，如果标准扫描 (-oN)或Grep扫描(-oG)日志 被保留，用户可以要求Nmap恢复终止的扫描，只需要简单地使用选项 –resume并说明标准/Grep扫描输出文件，不允许 使用其它参数，Nmap会解析输出文件并使用原来的格式输出。使用方式 如nmap –resume <logfilename>。 Nmap将把新地结果添加到文件中，这种方式不支持XML输出格式，原因是 将两次运行结果合并至一个XML文件比较困难。</logfilename></li></ul><h4 id="–stylesheet-设置XSL样式表，转换XML输出"><a href="#–stylesheet-设置XSL样式表，转换XML输出" class="headerlink" title="–stylesheet  (设置XSL样式表，转换XML输出)"></a>–stylesheet <path or="" url=""></path> (设置XSL样式表，转换XML输出)</h4><ul><li>Nmap提从了XSL样式表nmap.xsl，用于查看 或转换XML输出至HTML。XML输出包含了一个xml-stylesheet， 直接指向nmap.xml文件， 该文件由Nmap安装(或位于Windows当前工作目录)。在Web浏览器 中打开Nmap的XML输出时，将会在文件系统中寻找nmap.xsl文件， 并使用它输出结果。如果希望使用不同的样式表，将它作为 –stylesheet的参数，必段指明完整的路 径或URL，常见的调用方式是–stylesheet <a href="http://www.insecure.org/nmap/data/nmap.xsl。" target="_blank" rel="noopener">http://www.insecure.org/nmap/data/nmap.xsl。</a> 这告诉浏览器从Insecire.Org中加载最新的样式表。这使得 没安装Nmap(和nmap.xsl) 的机器中可以方便地查看结果。因此，URL更方便使用，本地文件系统 的nmap.xsl用于默认方式。</li></ul><h4 id="–no-stylesheet-忽略XML声明的XSL样式表"><a href="#–no-stylesheet-忽略XML声明的XSL样式表" class="headerlink" title="–no-stylesheet (忽略XML声明的XSL样式表)"></a>–no-stylesheet (忽略XML声明的XSL样式表)</h4><ul><li>使用该选项禁止Nmap的XML输出关联任何XSL样式表。 xml-stylesheet指示被忽略</li></ul><hr><h2 id="0x0A-其他选项"><a href="#0x0A-其他选项" class="headerlink" title="0x0A 其他选项"></a>0x0A 其他选项</h2><h3 id="6-启用IPv6扫描"><a href="#6-启用IPv6扫描" class="headerlink" title="-6 (启用IPv6扫描)"></a>-6 (启用IPv6扫描)</h3><ul><li><p>从2002年起，Nmap提供对IPv6的一些主要特征的支持。ping扫描(TCP-only)、 连接扫描以及版本检测都支持IPv6。除增加-6选项外， 其它命令语法相同。当然，必须使用IPv6地址来替换主机名，如 3ffe:7501:4819:2000:210:f3ff:fe03:14d0。 除“所关注的端口”行的地址部分为IPv6地址。</p></li><li><p>IPv6目前未在全球广泛采用，目前在一些国家(亚洲)应用较多， 一些高级操作系统支持IPv6。使用Nmap的IPv6功能，扫描的源和目 的都需要配置IPv6。如果ISP(大部分)不分配IPv6地址，Nmap可以采用 免费的隧道代理。一种较好的选择是BT Exact，位于<a href="https://tb.ipv6.btexact.com/。" target="_blank" rel="noopener">https://tb.ipv6.btexact.com/。</a> 此外，还有Hurricane Electric，位于<a href="http://ipv6tb.he.net/。6to4隧道是" target="_blank" rel="noopener">http://ipv6tb.he.net/。6to4隧道是</a> 另一种常用的免费方法。</p></li></ul><h3 id="A-激烈扫描模式选项"><a href="#A-激烈扫描模式选项" class="headerlink" title="-A (激烈扫描模式选项)"></a>-A (激烈扫描模式选项)</h3><ul><li>这个选项启用额外的高级和高强度选项，目前还未确定代表 的内容。目前，这个选项启用了操作系统检测(-O) 和版本扫描(-sV)，以后会增加更多的功能。 目的是启用一个全面的扫描选项集合，不需要用户记忆大量的 选项。这个选项仅仅启用功能，不包含用于可能所需要的 时间选项(如-T4)或细节选项(-v)。</li></ul><h3 id="–datadir-说明用户Nmap数据文件位置"><a href="#–datadir-说明用户Nmap数据文件位置" class="headerlink" title="–datadir  (说明用户Nmap数据文件位置)"></a>–datadir <directoryname> (说明用户Nmap数据文件位置)</directoryname></h3><ul><li>Nmap在运行时从文件中获得特殊的数据，这些文件有 nmap-service-probes， nmap-services， nmap-protocols， nmap-rpc， nmap-mac-prefixes和 nmap-os-fingerprints。Nmap首先 在–datadir选项说明的目录中查找这些文件。 未找到的文件，将在BMAPDIR环境变量说明的目录中查找。 接下来是用于真正和有效UID的~/.nmap 或Nmap可执行代码的位置(仅Win32)；然后是是编译位置， 如/usr/local/share/nmap 或/usr/share/nmap。 Nmap查找的最后一个位置是当前目录。</li></ul><h3 id="–send-eth-使用原以太网帧发送"><a href="#–send-eth-使用原以太网帧发送" class="headerlink" title="–send-eth (使用原以太网帧发送)"></a>–send-eth (使用原以太网帧发送)</h3><ul><li>要求Nmap在以太网(数据链路)层而不是IP(网络层)发送 报文。默认方式下，Nmap选择最适合其运行平台的方式，原套接 字(IP层)是UNIX主机最有效的方式，而以太网帧最适合Windows操作 系统，因为Microsoft禁用了原套接字支持。在UNIX中，如果没有其 它选择(如无以太网连接)，不管是否有该选项，Nmap都使用原IP包。</li></ul><h3 id="–send-ip-在原IP层发送"><a href="#–send-ip-在原IP层发送" class="headerlink" title="–send-ip (在原IP层发送)"></a>–send-ip (在原IP层发送)</h3><ul><li>要求Nmap通过原IP套接字发送报文，而不是低层的以 太网帧。这是–send-eth选项的补充。</li></ul><h3 id="–privileged-假定用户具有全部权限"><a href="#–privileged-假定用户具有全部权限" class="headerlink" title="–privileged (假定用户具有全部权限)"></a>–privileged (假定用户具有全部权限)</h3><ul><li>告诉Nmap假定其具有足够的权限进行源套接字包发送、 报文捕获和类似UNIX系统中根用户操作的权限。默认状态下， 如果由getuid()请求的类似操作不为0，Nmap将退出。 –privileged在具有Linux内核性能的类似 系统中使用非常有效，这些系统配置允许非特权用户可以进行 原报文扫描。需要明确的是，在其它选项之前使用这些需要权 限的选项(SYN扫描、操作系统检测等)。Nmap-PRIVILEGED变量 设置等价于–privileged选项。</li></ul><h3 id="V-–version-打印版本信息"><a href="#V-–version-打印版本信息" class="headerlink" title="-V; –version (打印版本信息)"></a>-V; –version (打印版本信息)</h3><ul><li>打印Nmap版本号并退出。</li></ul><h3 id="h-–help-打印帮助摘要面"><a href="#h-–help-打印帮助摘要面" class="headerlink" title="-h; –help (打印帮助摘要面)"></a>-h; –help (打印帮助摘要面)</h3><ul><li>打印一个短的帮助屏幕，列出大部分常用的 命令选项，这个功能与不带参数运行Nmap是相同的</li></ul><hr><h2 id="0xFF-拓展学习"><a href="#0xFF-拓展学习" class="headerlink" title="0xFF 拓展学习"></a>0xFF 拓展学习</h2><ul><li><a href="https://nmap.org/book/toc.html" title="Nmap Network Scanning" target="_blank" rel="noopener">Nmap Network Scanning</a> 　— Nmap官方参考指南</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://nmap.org/&quot; title=&quot;Nmap&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Nmap&lt;/a&gt;（网络映射器）是一款用于网络发现和安全审计的开源扫描工具，集主机发现，端口扫描，版本探测等诸多功能于一身，是信息收集不可或缺的扫描神器，以本文是关于Nmap扫描原理及基本用法的分析与总结（参考自&lt;a href=&quot;https://nmap.org/man/zh/index.html&quot; title=&quot;Nmap参考指南&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Nmap参考指南&lt;/a&gt;，kali 平台下键入&lt;code&gt;man nmap&lt;/code&gt;亦可阅览）&lt;br&gt;
    
    </summary>
    
      <category term="0x02 安全技术" scheme="http://yoursite.com/categories/0x02-%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/"/>
    
      <category term="安全工具" scheme="http://yoursite.com/categories/0x02-%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/%E5%AE%89%E5%85%A8%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="SecTools" scheme="http://yoursite.com/tags/SecTools/"/>
    
      <category term="Nmap" scheme="http://yoursite.com/tags/Nmap/"/>
    
  </entry>
  
  <entry>
    <title>渗透测试标准</title>
    <link href="http://yoursite.com/2018/07/10/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A0%87%E5%87%86/"/>
    <id>http://yoursite.com/2018/07/10/渗透测试标准/</id>
    <published>2018-07-10T06:43:56.000Z</published>
    <updated>2018-08-18T03:55:45.539Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文参考<a href="http://www.pentest-standard.org/index.php/Main_Page" title="Penetrastion Testing Execution Standard" target="_blank" rel="noopener">PTES</a>渗透测试执行标准标准，对渗透测试七大阶段：（前期交互，情报收集，威胁建模，漏洞分析，渗透攻击，后期开发，报告撰写），进行简要梳理，以下为详细内容<br><a id="more"></a></p></blockquote><hr><p><img src="http://pbn1aeam2.bkt.clouddn.com/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A0%87%E5%87%86.png" alt="pentest"></p><hr><p><strong>拓展学习</strong></p><ul><li><p><a href="http://www.vulnerabilityassessment.co.uk/Penetration%20Test.html#" title="渗透测试框架" target="_blank" rel="noopener">Penetration Testing Framework</a></p></li><li><p><a href="http://www.pentest-standard.org/index.php/PTES_Technical_Guidelines" title="PTES技术指南" target="_blank" rel="noopener">PTES Technical Guidelines</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文参考&lt;a href=&quot;http://www.pentest-standard.org/index.php/Main_Page&quot; title=&quot;Penetrastion Testing Execution Standard&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;PTES&lt;/a&gt;渗透测试执行标准标准，对渗透测试七大阶段：（前期交互，情报收集，威胁建模，漏洞分析，渗透攻击，后期开发，报告撰写），进行简要梳理，以下为详细内容&lt;br&gt;
    
    </summary>
    
      <category term="0x02 安全技术" scheme="http://yoursite.com/categories/0x02-%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/"/>
    
      <category term="渗透测试" scheme="http://yoursite.com/categories/0x02-%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="Pentest" scheme="http://yoursite.com/tags/Pentest/"/>
    
  </entry>
  
  <entry>
    <title>Web攻防系列（三）：HTTP协议详解</title>
    <link href="http://yoursite.com/2018/07/08/HTTP%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2018/07/08/HTTP协议详解/</id>
    <published>2018-07-08T01:28:44.000Z</published>
    <updated>2018-08-18T04:01:11.005Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>HTTP(HyperText Transfer Protocol)是访问万维网使用的核心通信协议，也是服务器与客户端之间交换URL引用文档的首选方式，想要深入了解Web传输机制，需对HTTP协议有一全面而深入的理解，下面让我们一起揭开HTTP神秘的面纱，一探究竟<br><a id="more"></a></p></blockquote><h3 id="HTTP简介"><a href="#HTTP简介" class="headerlink" title="HTTP简介"></a>HTTP简介</h3><p><strong>工作原理</strong></p><p><img src="http://pbegz2k88.bkt.clouddn.com/HTTP%E6%B5%81%E7%A8%8B1.png" alt="HTTP流程"></p><p>HTTP使用一种基于消息的模型：客户端送出一条请求消息，而后由服务器返回一条响应消息。该协议不需要连接，虽然HTTP使用有状态的TCP协议作为传输机制（默认为80端口），但每次请求与响应交换都自动完成，并且可能使用不同的TCP连接</p><p><img src="http://pbegz2k88.bkt.clouddn.com/HTTP%E6%B5%81%E7%A8%8B2.png" alt="HTTP2"></p><p><strong>注意事项</strong></p><ul><li><p><strong>HTTP是无连接：</strong>无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间</p></li><li><p><strong>HTTP是媒体独立的：</strong>这意味着，只要客户端和服务器知道如何处理的数据内容，任何类型的数据都可以通过HTTP发送。客户端以及服务器指定使用适合的MIME-type内容类型</p></li><li><p><strong>HTTP是无状态：</strong>HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快</p></li></ul><h3 id="HTTP请求"><a href="#HTTP请求" class="headerlink" title="HTTP请求"></a>HTTP请求</h3><p>HTTP 协议是以 ASCII 码传输，建立在 TCP/IP 协议之上的应用层规范，HTTP请求消息分为三部分：状态行，请求头，消息主体</p><p><img src="http://pbegz2k88.bkt.clouddn.com/%E8%AF%B7%E6%B1%82.png" alt="请求"></p><p>以下是一个典型的HTTP请求&lt;进入Google浏览器开发模式-&gt;Network-&gt;Headers-&gt;Request Headers:此处以访问OWASP为例&gt;</p><p><img src="http://pbegz2k88.bkt.clouddn.com/http%E8%AF%B7%E6%B1%82.png" alt="HTTP请求"></p><p>每个HTTP请求的第一行一般由三个以空格间隔的项目组成</p><ul><li><strong>说明HTTP方法的动词 (mothod)</strong></li></ul><p>最常用的方法为GET，主要作用是从Web服务器获取一个请求，GET请求并没有消息主体，因此消息头后的空白行没有其它数据</p><ul><li><strong>所请求的URL</strong></li></ul><p>求该URL通常由所请求得资源，以及一个由客户端向该资源提交的参数的可选查询字符串组成</p><ul><li><strong>使用的HTTP版本</strong></li></ul><p>常用的HTTP版本为1.0和1.1，多数浏览器默认使用1.1版本，两个版本规范之间存在一些差异，1.1版本必须使用Host请求头</p><p>HTTP请求消息头</p><ul><li><strong>Host：</strong>用于指定出现在所请求的的完整URL中的主机名称</li><li><strong>Accept：</strong>用于告诉服务器客户端愿意接受哪些内容</li><li><strong>Accept-Encoding：</strong>用于告诉服务器客户端愿意接受哪些内容编码</li><li><strong>User-Agent：</strong>提供与浏览器或其他生成请求的客户端软件有关的信息（大多数浏览器都包含Mozilla前缀）</li><li><strong>Referer：</strong>用于指示提出当前请求的原始URL</li><li><strong>Cookie：</strong>用于向服务器提交它以前发布的cookie</li><li><strong>Authorization：</strong>用于为一种内置HTTP身份验证向服务器提交证书</li><li><strong>Origion：</strong>用在跨域请求Ajax请求中，指示提出请求的域名</li><li><strong>If-Modified-Since：</strong>用于说明浏览器最后一次收到所请求的资源的时间</li><li><strong>If-None-Match：</strong>用于指定一个实体标签（说明消息主体内容的标识符）</li></ul><h3 id="HTTP响应"><a href="#HTTP响应" class="headerlink" title="HTTP响应"></a>HTTP响应</h3><p>每个HTTP响应的第一行一般由三个以空格间隔的项目组成</p><ul><li>使用的HTTP版本</li><li>表示请求结果的数字状态码</li><li>一段文本形式的“原因短语”，进一步说明响应状态</li></ul><p><img src="http://pbegz2k88.bkt.clouddn.com/%E5%93%8D%E5%BA%94.png" alt="响应"></p><p>&lt;进入Google浏览器开发模式-&gt;Network-&gt;Headers-&gt;Response Headers：访问任意网站，等待服务器响应&gt;</p><p> <img src="http://pbegz2k88.bkt.clouddn.com/Http%E5%93%8D%E5%BA%94.png" alt="响应"></p><p>HTTP响应消息头</p><ul><li><strong>Server：</strong>提供所使用的Web服务器软件的相关信息</li><li><strong>Pragma：</strong>用于向浏览器传送缓存指令（如no-cache）</li><li><strong>Expires：</strong>用于向浏览器说明消息主体内容的有效时间</li><li><strong>Cache-Control：</strong>用于向浏览器传送缓存指令（如no-cache）</li><li><strong>Location：</strong>用于在重定向响应中说明重定向的目标</li><li><strong>Set-Cookie</strong>:用于向浏览器发布cookie,浏览器会在随后的请求中将其返回给服务器</li><li><strong>WWW-Authenticate：</strong>用在带401状态码的响应中，提供与服务器所支持的身份验证类型有关的信息</li><li><strong>X-Frame-Options：</strong>指示浏览器框架是否及ruhr加载当前响应</li><li><strong>Etag：</strong>制定一个实体标签（客户端可在将来请求中提交此标识符，获得和If-None-Match消息头中相同的资源，通知服务器浏览器当前缓冲中保存的是哪个版本的资源）</li></ul><p>HTTP常用消息头</p><ul><li><strong>Connection：</strong>用于告诉通信的另一端，在完成HTTP传输后是关闭TCP连接，还是保持连接开放</li><li><strong>Content-Encoding：</strong>为消息主体中的内容指定编码形式，亦可用于压缩响应以加快传输速度</li><li><strong>Content-Length：</strong>用于规定消息主题的字节长度</li><li><strong>Content-Type：</strong>用于规定消息主体的内容类型（HTML文档内容类型为text/html）</li><li><strong>Transfer-Encoding：</strong>指定为方便通过HTTP传输而对消息主体使用的任何编码（通常用于指定块编码）</li></ul><h3 id="HTTP方法"><a href="#HTTP方法" class="headerlink" title="HTTP方法"></a>HTTP方法</h3><p><strong>GET/POST方法</strong></p><ul><li><p><strong>Get方法：</strong>作用在于获取资源，以URL查询字符串的形式向所请求的资源发送参数</p></li><li><p><strong>Post方法：</strong>作用在于执行操作，查询字符串（名称/值对）是在POST请求的HTTP消息主体中发送请求参数</p></li></ul><p><img src="http://pbegz2k88.bkt.clouddn.com/GET-POST.png" alt="get-post"></p><p><strong>HTTP方法汇总</strong></p><p><img src="http://pbegz2k88.bkt.clouddn.com/HTTP%E6%96%B9%E6%B3%95.png" alt="http"></p><h3 id="HTTP状态码"><a href="#HTTP状态码" class="headerlink" title="HTTP状态码"></a>HTTP状态码</h3><p>每条HTTP响应消息必须在第一行中包含一个状态码，说明请求结果；根据状态码的第一位数字，可将其分为以下5类</p><ul><li><p><strong>1XX —— 提供信息</strong></p></li><li><p><strong>2XX —— 请求被成功提交</strong></p></li><li><p><strong>3XX —— 客户端被重定向到其它资源</strong></p></li><li><p><strong>4XX —— 请求包含某种错误</strong></p></li><li><p><strong>5XX —— 服务器执行请求时遇到错误</strong></p></li></ul><p>常用HTTP状态码</p><ul><li><p>200 - 请求成功</p></li><li><p>301 - 资源（网页等）被永久转移到其它URL</p></li><li><p>404 - 请求的资源（网页等）不存在</p></li><li><p>500 - 内部服务器错误</p></li></ul><p><img src="http://pbegz2k88.bkt.clouddn.com/%E7%8A%B6%E6%80%81%E7%A0%81.png" alt="状态码"></p><h3 id="cookie-session"><a href="#cookie-session" class="headerlink" title="cookie/session"></a>cookie/session</h3><p><strong>cookie</strong></p><ul><li><strong>概念：</strong>Cookie是Web服务器发送给客户端的一小段信息，客户端请求时可以读取该信息发送到服务器端，进而进行用户的识别。对于客户端的每次请求，服务器都会将Cookie发送到客户端,在客户端可以进行保存,以便下次使用</li></ul><ul><li><strong>保存方式：</strong>一种方式是保存在客户端内存中，称为<strong>临时Cookie</strong>，浏览器关闭后这个Cookie对象将消失。另外一种方式是保存在客户机的磁盘上，称为<strong>永久Cookie</strong>。以后客户端只要访问该网站，就会将这个Cookie再次发送到服务器上，前提是这个Cookie在有效期内，这样就实现了对客户的跟踪。</li></ul><p><strong>Set-Cookie可选项（处理cookie）</strong></p><ul><li><p><strong>expires：</strong>用于设定cookie的有效时间</p></li><li><p><strong>domain：</strong>用于指定cookie的有效域</p></li><li><p><strong>path：</strong>用于指定cookie的有效URLlujing</p></li><li><p><strong>secure：</strong>设置这个属性，则仅在HTTPS请求中提交cookie</p></li><li><p><strong>HttpOnly：</strong>设置此属性，将无法通过客户端JavaScipt直接访问cookie</p></li></ul><p><strong>session</strong></p><ul><li><p>客户端打开与服务器的连接发出请求到服务器响应客户端请求的全过程称之为会话</p></li><li><p>每一个用户都有一个不同的session，各个用户之间是不能共享的，是每个用户所独享的，在session中可以存放信息</p></li><li><p>在服务器端会创建一个session对象，产生一个sessionID来标识这个session对象，然后将这个sessionID放入到Cookie中发送到客户端，下一次访问时，sessionID会发送到服务器，在服务器端进行识别不同的用户。</p></li><li><p>Session的实现依赖于Cookie，如果Cookie被禁用，那么session也将失效</p></li></ul><h3 id="HTTP身份验证"><a href="#HTTP身份验证" class="headerlink" title="HTTP身份验证"></a>HTTP身份验证</h3><ul><li><p>身份验证是判断客户端是否有资格访问资源的过程，HTTP 协议支持将身份验证作为协商访问安全资源的一种方式</p></li><li><p>来自客户端的初始请求通常是匿名请求，不包含任何身份验证信息</p></li><li><p>HTTP 服务器应用程序可以拒绝匿名请求，而同时指示必须进行身份验证</p></li><li><p>服务器应用程序发送 WWW-Authentication 头来指示受支持的身份验证方案</p></li></ul><p><img src="http://pbegz2k88.bkt.clouddn.com/http%E8%AE%A4%E8%AF%81.png" alt="认证"></p><p><strong>验证方案选择</strong></p><ul><li>考虑是否需要保护资源。 使用 HTTP 身份验证需要传输更多数据，并可以限制与客户端的互操作性。 允许匿名访问不需要保护的资源。</li></ul><ul><li>如果资源需要保护，则要考虑哪种身份验证方案可以提供所需的安全级别。 此处讨论的安全级别最低的标准身份验证方案是基本身份验证。 基本身份验证不保护用户的凭据。 安全级别最高的标准身份验证方案是协商身份验证，它将使用 Kerberos 协议。</li></ul><ul><li>服务器不应（在 WWW-Authentication 头中）提供任何它不准备接受或不足以保护受保护资源安全的方案。 客户端可以在服务器提供的任何身份验证方案间自由选择。 某些客户端默认选择安全级别低的身份验证方案，或选择服务器列表中的第一个身份验证方案</li></ul><h3 id="HTTP内容类型"><a href="#HTTP内容类型" class="headerlink" title="HTTP内容类型"></a>HTTP内容类型</h3><p>Content-Type，内容类型，一般是指网页中存在的Content-Type，用于定义网络文件的类型和网页的编码，决定浏览器将以什么形式、什么编码读取这个文件</p><p><img src="http://pbegz2k88.bkt.clouddn.com/%E5%86%85%E5%AE%B9%E6%A0%BC%E5%BC%8F.png" alt="内容"></p><h3 id="参考资源"><a href="#参考资源" class="headerlink" title="参考资源"></a>参考资源</h3><ul><li><p><a href="https://pan.baidu.com/s/1SjYNWXZivqZPqf_-_N-Emw" title="HTTP权威指南" target="_blank" rel="noopener">HTTP权威指南</a></p></li><li><p><a href="https://hit-alibaba.github.io/interview/basic/network/HTTP.html" title="Http协议-Gitbook" target="_blank" rel="noopener">HTTP协议-GitBook</a></p></li><li><p><a href="http://www.runoob.com/http/http-tutorial.html" title="HTTP简述-RUNBOOT" target="_blank" rel="noopener">HTTP简述-RUNBOOT</a></p></li><li><p><a href="https://pan.baidu.com/s/1ckkllzRAJdnEOHLSdQfovA" title="《黑客攻防技术宝典：Web实战篇》" target="_blank" rel="noopener">《黑客攻防技术宝典：Web实战篇》</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;HTTP(HyperText Transfer Protocol)是访问万维网使用的核心通信协议，也是服务器与客户端之间交换URL引用文档的首选方式，想要深入了解Web传输机制，需对HTTP协议有一全面而深入的理解，下面让我们一起揭开HTTP神秘的面纱，一探究竟&lt;br&gt;
    
    </summary>
    
      <category term="0x02 安全技术" scheme="http://yoursite.com/categories/0x02-%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Web安全" scheme="http://yoursite.com/categories/0x02-%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/Web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="WebSecurity" scheme="http://yoursite.com/tags/WebSecurity/"/>
    
      <category term="HTTP" scheme="http://yoursite.com/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>Web攻防系列（二）：核心防御机制</title>
    <link href="http://yoursite.com/2018/07/07/Web%E6%A0%B8%E5%BF%83%E9%98%B2%E5%BE%A1%E6%9C%BA%E5%88%B6/"/>
    <id>http://yoursite.com/2018/07/07/Web核心防御机制/</id>
    <published>2018-07-07T07:04:26.000Z</published>
    <updated>2018-08-18T03:56:00.465Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Web应用程序的基本安全问题致使应用程序实施大量安全机制来抵御攻击，细节与执行效率虽千差万别，但其安全机制之概念大同小异，知己知彼是战争的首要法则，以下为web应用程序采用的核心防御机制<br><a id="more"></a></p></blockquote><h2 id="防御机制简述"><a href="#防御机制简述" class="headerlink" title="防御机制简述"></a>防御机制简述</h2><p><img src="http://pbegz2k88.bkt.clouddn.com/Web%E6%A0%B8%E5%BF%83%E9%98%B2%E5%BE%A1%E6%9C%BA%E5%88%B6.png" alt="防御"></p><p><strong>核心因素</strong></p><ul><li><p>处理用户访问应用程序的数据与功能，防止用户获得未授权访问</p></li><li><p>处理用户对应用程序功能的输入，防止错误输入造成不良行为</p></li><li><p>防范攻击者，确保应用程序在成为直接攻击目标时能够正常运转，并采取适当的防御与攻击措施挫败攻击者</p></li><li><p>管理应用程序本身，帮助管理员监控器行为，配置其功能</p></li></ul><hr><h2 id="处理用户访问"><a href="#处理用户访问" class="headerlink" title="处理用户访问"></a>处理用户访问</h2><h3 id="身份验证"><a href="#身份验证" class="headerlink" title="身份验证"></a>身份验证</h3><ul><li><p><strong>概念：</strong>身份验证机制是应用程序处理用户访问的最基本机制，验证用户是指确认用户的真实身份</p></li><li><p><strong>传统模型：</strong>用户提交用户名和密码，再由应用程序对其进行核实，确认其合法性</p></li><li><p><strong>安全性验证模型：</strong>使用其他证书与多阶段登录过程强化基本模型；基于客户端证书，智能卡，质询-响应令牌（challenge-response token）的身份验证模型</p></li><li><p><strong>功能支持：</strong>核心登录过程，自我注册，账户恢复，密码修改工具</p></li><li><p><strong>机制缺陷：</strong>如攻击者能够确定其他用户的用户名，推测其密码；可利用逻辑缺陷完全避开登录功能；存在的缺陷往往允许攻击者非法访问敏感数据与功能</p></li></ul><h3 id="会话管理"><a href="#会话管理" class="headerlink" title="会话管理"></a>会话管理</h3><ul><li><p><strong>概述：</strong>处理用户访问的下一项逻辑任务是管理通过验证用户的会话。成功登录应用程序后，用户会访问各种页面和功能，从浏览器提出一系列HTTP请求；与此同时应用程序还会收到各类用户发出的无数请求，为实施有效的访问控制，应用程序需要识别并处理每一名用户提交的各种请求</p></li><li><p><strong>会话机制：</strong>Web应用程序为每一名用户建立一个会话，并向用户发布一个标识会话的令牌。<strong>会话</strong>是一组保存在服务器上的数据结构，用于追踪用户与应用程序的交互状态。<strong>令牌</strong>是一个唯一的字符串，应用程序将其映射到会话中，当用户收到一个令牌时，浏览器会在随后的HTTP请求中将它返回给服务器，帮助应用程序将请求与该用户联系起来。</p></li><li><p><strong>会话令牌传送：</strong>HTTP cookie(常规方法)；使用隐藏表字段（hidden from field）；URL 查询字符串（query string）</p></li><li><p><strong>安全性：</strong>会话机制的安全性取决于其令牌的安全性，令牌被攻破，攻击者就可以伪装成被攻破的用户，冒充为通过验证的用户正常使用应用程序。令牌生成过程中存在的缺陷是主要的漏洞来源，使攻击者能够推测出发布给其他用户的令牌；随后，攻击者再利用令牌中的缺陷截获其他用户的令牌</p></li></ul><h3 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h3><ul><li>处理用户访问的最后一个逻辑步骤是做出并实施正确的决策，决定允许或拒绝每一个请求。在前面机制正常运作的基础上，应用程序需要决定是否授权用户执行其请求的操作或访问相关数据。访问控制一般需要实现某种精心设计的逻辑，并考虑各种相关应用程序领域与不同类型的功能</li></ul><hr><h2 id="处理用户的输入"><a href="#处理用户的输入" class="headerlink" title="处理用户的输入"></a>处理用户的输入</h2><h3 id="拒绝已知的不良输入"><a href="#拒绝已知的不良输入" class="headerlink" title="拒绝已知的不良输入"></a>拒绝已知的不良输入</h3>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Web应用程序的基本安全问题致使应用程序实施大量安全机制来抵御攻击，细节与执行效率虽千差万别，但其安全机制之概念大同小异，知己知彼是战争的首要法则，以下为web应用程序采用的核心防御机制&lt;br&gt;
    
    </summary>
    
      <category term="0x02 安全技术" scheme="http://yoursite.com/categories/0x02-%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Web安全" scheme="http://yoursite.com/categories/0x02-%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/Web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="WebSecurity" scheme="http://yoursite.com/tags/WebSecurity/"/>
    
      <category term="Defense" scheme="http://yoursite.com/tags/Defense/"/>
    
  </entry>
  
  <entry>
    <title>Web攻防系列（一）：Web攻防简述</title>
    <link href="http://yoursite.com/2018/07/05/web%E6%94%BB%E9%98%B2%E7%AE%80%E8%BF%B0/"/>
    <id>http://yoursite.com/2018/07/05/web攻防简述/</id>
    <published>2018-07-05T15:32:37.000Z</published>
    <updated>2018-08-18T03:56:12.836Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>有幸参阅安全领域巨擘经典之作《黑客攻防技术宝典-Web实战篇》，获益良多，书中所述web攻防技术之思想，原理，及实战，深入浅出，透彻而全面，故记录一二，便于理解，查阅<br><a id="more"></a><br><img src="http://pbegz2k88.bkt.clouddn.com/web%E5%AE%9E%E6%88%98%E7%AF%87.png" alt="web攻防"></p></blockquote><ul><li>参考书目：<a href="https://pan.baidu.com/s/1YgzzVx1NnnX4BOMLc2Fd7w" title="web实战篇" target="_blank" rel="noopener">黑客攻防技术宝典-web实战篇</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;有幸参阅安全领域巨擘经典之作《黑客攻防技术宝典-Web实战篇》，获益良多，书中所述web攻防技术之思想，原理，及实战，深入浅出，透彻而全面，故记录一二，便于理解，查阅&lt;br&gt;
    
    </summary>
    
      <category term="0x02 安全技术" scheme="http://yoursite.com/categories/0x02-%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Web安全" scheme="http://yoursite.com/categories/0x02-%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/Web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="WebSecurity" scheme="http://yoursite.com/tags/WebSecurity/"/>
    
  </entry>
  
  <entry>
    <title>mysql语法浅析</title>
    <link href="http://yoursite.com/2018/07/04/mysql%E8%AF%AD%E6%B3%95%E6%B5%85%E6%9E%90/"/>
    <id>http://yoursite.com/2018/07/04/mysql语法浅析/</id>
    <published>2018-07-04T15:44:00.000Z</published>
    <updated>2018-08-18T03:56:47.696Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://www.mysql.com/cn/" title="MySQL" target="_blank" rel="noopener">MySQL</a>是最流行的关系型数据库管理系统，在WEB应用方面 MySQL 是最好的RDBMS(Relational Database Management System：关系数据库管理系统)应用软件之一，以下是mysql常用语法</p></blockquote><a id="more"></a><hr><h2 id="REDBS（关系型数据库管理系统）术语"><a href="#REDBS（关系型数据库管理系统）术语" class="headerlink" title="REDBS（关系型数据库管理系统）术语"></a>REDBS（关系型数据库管理系统）术语</h2><ul><li>数据库: 数据库是一些关联表的集合。</li><li>数据表: 表是数据的矩阵。在一个数据库中的表看起来像一个简单的电子表格。</li><li>列: 一列(数据元素) 包含了相同的数据, 例如邮政编码的数据。</li><li>行：一行（=元组，或记录）是一组相关的数据，例如一条用户订阅的数据。</li><li>冗余：存储两倍数据，冗余降低了性能，但提高了数据的安全性。</li><li>主键：主键是唯一的。一个数据表中只能包含一个主键。你可以使用主键来查询数据。</li><li>外键：外键用于关联两个表。</li><li>复合键：复合键（组合键）将多个列作为一个索引键，一般用于复合索引。</li><li>索引：使用索引可快速访问数据库表中的特定信息。索引是对数据库表中一列或多列的值进行排序的一种结构。类似于书籍的目录。</li><li>参照完整性:参照的完整性要求关系中不允许引用不存在的实体。与实体完整性是关系模型必须满足的完整性约束条件，目的是保证数据的一致性。</li></ul><hr><h2 id="mysql安装"><a href="#mysql安装" class="headerlink" title="mysql安装"></a>mysql安装</h2><ul><li>安装前检测： rpm -qa | grep mysql</li><li>卸载及删除<ul><li>rpm -e mysql 　//普通删除</li><li>rpm -e –nodeps mysql 　//强力删除</li></ul></li><li>正式安装<ul><li>wget <a href="https://dev.mysql.com/get/mysql57-community-release-el7-9.noarch.rpm" target="_blank" rel="noopener">https://dev.mysql.com/get/mysql57-community-release-el7-9.noarch.rpm</a></li><li>rpm -ivh mysql57-community-release-el7-9.noarch.rpm</li><li>yum install mysql-server</li></ul></li><li>启动Mysql： systemctl start mysqld</li><li>查看运行状态：systemctl status mysqld</li><li>验证Mysql安装： mysqladmin –version</li></ul><hr><h2 id="mysql基本管理"><a href="#mysql基本管理" class="headerlink" title="mysql基本管理"></a>mysql基本管理</h2><ul><li>启动查看： ps -ef | grep mysqld</li><li>用户启动： mysql -u username -p</li><li>数据库选择： mysql&gt; use 数据库名;</li><li>展示所有数据库列： mysql&gt; SHOW DATABASES;</li><li>显示指定数据库的所有表<ul><li>mysql&gt; use 数据库名;</li><li>mysql&gt; SHOW TABLES;</li></ul></li><li>显示数据表的信息： SHOW COLUMNS FROM 数据表;</li><li>显示数据表的详细索引信息： SHOW INDEX FROM 数据表;</li></ul><hr><h2 id="mysql数据类型"><a href="#mysql数据类型" class="headerlink" title="mysql数据类型"></a>mysql数据类型</h2><ul><li><p>数值类型</p><p><img src="http://pals0a5g6.bkt.clouddn.com/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.PNG" alt="数值"></p></li><li><p>日期时间</p><p><img src="http://pals0a5g6.bkt.clouddn.com/%E6%97%A5%E6%9C%9F%E6%97%B6%E9%97%B4%E7%B1%BB%E5%9E%8B.PNG" alt="时间"></p></li><li><p>字符串类型</p><p><img src="http://pals0a5g6.bkt.clouddn.com/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B1%BB%E5%9E%8B.PNG" alt="字串"></p></li></ul><hr><h2 id="mysql数据库操作"><a href="#mysql数据库操作" class="headerlink" title="mysql数据库操作"></a>mysql数据库操作</h2><ul><li>创建数据库<ul><li>mysql -u username -p   </li><li>mysql&gt;CREATE DATABASE 数据库名;</li></ul></li><li>删除数据库<ul><li>mysql&gt; drop database 数据库名;</li></ul></li><li><p>创建数据表</p><p><img src="http://pals0a5g6.bkt.clouddn.com/%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%88%9B%E5%BB%BA.PNG" alt="数据表"></p></li><li>删除数据表<ul><li>mysql&gt; use 数据库名;</li><li>mysql&gt; DROP TABLE table_name;</li></ul></li><li><p>插入数据</p><p><img src="http://pals0a5g6.bkt.clouddn.com/%E6%95%B0%E6%8D%AE%E6%8F%92%E5%85%A5.PNG" alt="插入"></p></li><li><p>查询数据</p><p><img src="http://pals0a5g6.bkt.clouddn.com/%E6%9F%A5%E8%AF%A2.PNG" alt="查询"></p></li></ul><hr><h2 id="SQL常用语句"><a href="#SQL常用语句" class="headerlink" title="SQL常用语句"></a>SQL常用语句</h2><h3 id="MySQL-WHERE子句"><a href="#MySQL-WHERE子句" class="headerlink" title="MySQL WHERE子句"></a>MySQL WHERE子句</h3><ul><li><p>语法</p><p><img src="http://pals0a5g6.bkt.clouddn.com/where%E8%AF%AD%E6%B3%95.PNG" alt="where"></p></li><li><p>操作符</p><p><img src="http://pals0a5g6.bkt.clouddn.com/where%E6%93%8D%E4%BD%9C%E7%AC%A6.PNG" alt="1"></p></li></ul><h3 id="MySQL-UPDATE查询"><a href="#MySQL-UPDATE查询" class="headerlink" title="MySQL UPDATE查询"></a>MySQL UPDATE查询</h3><ul><li><p>语法</p><p><img src="http://pals0a5g6.bkt.clouddn.com/UPDATE%E8%AF%AD%E6%B3%95.PNG" alt="update"></p></li></ul><h3 id="MySQL-DELETE语句"><a href="#MySQL-DELETE语句" class="headerlink" title="MySQL DELETE语句"></a>MySQL DELETE语句</h3><ul><li><p>语法</p><p><img src="http://pals0a5g6.bkt.clouddn.com/delete%E8%AF%AD%E6%B3%95.PNG" alt="delete"></p></li></ul><h3 id="MySQL-LIKE子句"><a href="#MySQL-LIKE子句" class="headerlink" title="MySQL LIKE子句"></a>MySQL LIKE子句</h3><ul><li>通用语法</li></ul><p><img src="http://pals0a5g6.bkt.clouddn.com/link%E5%AD%97%E5%8F%A5.PNG" alt="like"></p><h3 id="MySQL-UNION操作符"><a href="#MySQL-UNION操作符" class="headerlink" title="MySQL UNION操作符"></a>MySQL UNION操作符</h3><ul><li><p>语法参数</p><p><img src="http://pals0a5g6.bkt.clouddn.com/UNION.PNG" alt="union"></p></li></ul><h3 id="ORDER-BY子句排序"><a href="#ORDER-BY子句排序" class="headerlink" title="ORDER BY子句排序"></a>ORDER BY子句排序</h3><ul><li><p>语法</p><p><img src="http://pals0a5g6.bkt.clouddn.com/%E6%8E%92%E5%BA%8F.PNG" alt="order"></p></li></ul><h3 id="GROUP-BY语句分组"><a href="#GROUP-BY语句分组" class="headerlink" title="GROUP BY语句分组"></a>GROUP BY语句分组</h3><ul><li><p>语法</p><p><img src="http://pals0a5g6.bkt.clouddn.com/%E5%88%86%E7%BB%84.PNG" alt="分组"></p></li></ul><h3 id="ALTER-命令修改"><a href="#ALTER-命令修改" class="headerlink" title="ALTER 命令修改"></a>ALTER 命令修改</h3><ul><li><p>删除/添加/修改表字段</p><p><img src="http://pals0a5g6.bkt.clouddn.com/%E5%88%A0%E9%99%A4%E4%BF%AE%E6%94%B9%E5%AD%97%E6%AE%B5.PNG" alt="表"></p></li><li><p>修改字段类型/名称</p><p><img src="http://pals0a5g6.bkt.clouddn.com/%E4%BF%AE%E6%94%B9%E5%AD%97%E6%AE%B5%E5%90%8D%E7%A7%B0.PNG" alt="字段"></p></li><li><p>对Null值和默认值的影响</p><p><img src="http://pals0a5g6.bkt.clouddn.com/Alter%E9%BB%98%E8%AE%A4%E5%AD%97%E6%AE%B5.PNG" alt="默认"></p></li><li><p>修改表名</p><p><img src="http://pals0a5g6.bkt.clouddn.com/Alter%E4%BF%AE%E6%94%B9%E8%A1%A8%E5%90%8D.PNG" alt="修改"></p></li></ul><hr><h2 id="MySQL高级操作"><a href="#MySQL高级操作" class="headerlink" title="MySQL高级操作"></a>MySQL高级操作</h2><h3 id="Mysql-连接的使用"><a href="#Mysql-连接的使用" class="headerlink" title="Mysql 连接的使用"></a>Mysql 连接的使用</h3><ul><li>连接类型<br><img src="http://pals0a5g6.bkt.clouddn.com/%E8%BF%9E%E6%8E%A5%E4%BD%BF%E7%94%A8.PNG" alt="alter"></li></ul><h3 id="MySQL-NULL值处理"><a href="#MySQL-NULL值处理" class="headerlink" title="MySQL NULL值处理"></a>MySQL NULL值处理</h3><ul><li><p>空值处理</p><p><img src="http://pals0a5g6.bkt.clouddn.com/%E7%A9%BA%E5%80%BC%E5%A4%84%E7%90%86.PNG" alt="NULL"></p></li></ul><h3 id="MySQL-正则表达式"><a href="#MySQL-正则表达式" class="headerlink" title="MySQL 正则表达式"></a>MySQL 正则表达式</h3><ul><li><p>操作符</p><p><img src="http://pals0a5g6.bkt.clouddn.com/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.PNG" alt="正则"></p></li><li><p>实例</p><p><img src="http://pals0a5g6.bkt.clouddn.com/%E6%AD%A3%E5%88%99%E5%AE%9E%E4%BE%8B.PNG" alt="实例"></p></li></ul><h3 id="MySQL-事务"><a href="#MySQL-事务" class="headerlink" title="MySQL 事务"></a>MySQL 事务</h3><ul><li><p>事务条件</p><p><img src="http://pals0a5g6.bkt.clouddn.com/%E4%BA%8B%E7%89%A9%E6%9D%A1%E4%BB%B6.PNG" alt="条件"></p></li><li><p>事务控制语句</p><p><img src="http://pals0a5g6.bkt.clouddn.com/%E4%BA%8B%E7%89%A9%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5.PNG" alt="控制"></p></li><li><p>事务处理方法</p><p><img src="http://pals0a5g6.bkt.clouddn.com/%E4%BA%8B%E5%8A%A1%E5%A4%84%E7%90%86%E6%96%B9%E6%B3%95.PNG" alt="处理"></p></li></ul><h3 id="MySQL-索引"><a href="#MySQL-索引" class="headerlink" title="MySQL 索引"></a>MySQL 索引</h3><ul><li><p>普通索引</p><p><img src="http://pals0a5g6.bkt.clouddn.com/%E6%99%AE%E9%80%9A%E7%B4%A2%E5%BC%95.PNG" alt="普通"></p></li><li><p>唯一索引</p><p><img src="http://pals0a5g6.bkt.clouddn.com/%E5%94%AF%E4%B8%80%E7%B4%A2%E5%BC%95.PNG" alt="唯一"></p></li><li><p>添加索引</p><p><img src="http://pals0a5g6.bkt.clouddn.com/ALTER%E6%B7%BB%E5%8A%A0%E7%B4%A2%E5%BC%95.PNG" alt="添加"></p></li><li><p>主键添加及删除</p><p><img src="http://pals0a5g6.bkt.clouddn.com/ALTER%E5%88%A0%E9%99%A4%E4%B8%BB%E9%94%AE.PNG" alt="主键"></p></li></ul><h3 id="MySQL-临时表"><a href="#MySQL-临时表" class="headerlink" title="MySQL 临时表"></a>MySQL 临时表</h3><ul><li><p>概念</p><p><img src="http://pals0a5g6.bkt.clouddn.com/Mysql%E4%B8%B4%E6%97%B6%E8%A1%A8.PNG" alt="临时表"></p></li><li><p>使用</p><p><img src="http://pals0a5g6.bkt.clouddn.com/%E4%B8%B4%E6%97%B6%E8%A1%A8%E5%AE%9E%E4%BE%8B.PNG" alt="使用"></p></li><li><p>删除</p><p><img src="http://pals0a5g6.bkt.clouddn.com/%E4%B8%B4%E6%97%B6%E8%A1%A8%E5%88%A0%E9%99%A4.PNG" alt="删除"></p></li></ul><h3 id="MySQL-复制表"><a href="#MySQL-复制表" class="headerlink" title="MySQL 复制表"></a>MySQL 复制表</h3><ul><li><p>复制表</p><p><img src="http://pals0a5g6.bkt.clouddn.com/mysql%E5%A4%8D%E5%88%B6%E8%A1%A8.PNG" alt="复制"></p></li></ul><h3 id="MySQL-元数据"><a href="#MySQL-元数据" class="headerlink" title="MySQL 元数据"></a>MySQL 元数据</h3><ul><li><p>元数据类型</p><p><img src="http://pals0a5g6.bkt.clouddn.com/%E5%85%83%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.PNG" alt="类型"></p></li><li><p>获取查询语句影响的记录数</p><p><img src="http://pals0a5g6.bkt.clouddn.com/%E5%85%83%E6%95%B0%E6%8D%AE%E8%AE%B0%E5%BD%95.PNG" alt="记录"></p></li><li><p>数据库和数据表列表获取</p><p><img src="http://pals0a5g6.bkt.clouddn.com/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E8%8E%B7%E5%8F%96.PNG" alt="获取"></p></li><li><p>获取服务器元数据</p><p><img src="http://pals0a5g6.bkt.clouddn.com/%E8%8E%B7%E5%8F%96%E5%85%83%E6%95%B0%E6%8D%AE.PNG" alt="获取"></p></li></ul><h3 id="MySQL-序列使用"><a href="#MySQL-序列使用" class="headerlink" title="MySQL 序列使用"></a>MySQL 序列使用</h3><ul><li><p>使用AUTO_INCREMENT</p><p><img src="http://pals0a5g6.bkt.clouddn.com/%E4%BD%BF%E7%94%A8auto.PNG" alt="AUTO"></p></li><li><p>获取AUTO_INCREMENT值</p><p><img src="http://pals0a5g6.bkt.clouddn.com/%E8%8E%B7%E5%8F%96auto.PNG" alt="1"></p></li><li><p>重置序列</p><p><img src="http://pals0a5g6.bkt.clouddn.com/%E9%87%8D%E7%BD%AE%E5%BA%8F%E5%88%97.PNG" alt="重置"></p></li><li><p>设置序列的开始值</p><p><img src="http://pals0a5g6.bkt.clouddn.com/%E5%BA%8F%E5%88%97%E5%BC%80%E5%A7%8B.PNG" alt="开始"></p></li></ul><h3 id="MySQL-处理重复数据"><a href="#MySQL-处理重复数据" class="headerlink" title="MySQL 处理重复数据"></a>MySQL 处理重复数据</h3><ul><li><p>防止表中出现重复数据</p><p><img src="http://pals0a5g6.bkt.clouddn.com/%E9%98%B2%E6%AD%A2%E9%87%8D%E5%A4%8D1.PNG" alt="防止"></p><p><img src="http://pals0a5g6.bkt.clouddn.com/%E9%98%B2%E6%AD%A2%E9%87%8D%E5%A4%8D2.PNG" alt="防止2"></p></li><li><p>统计重复数据</p><p><img src="http://pals0a5g6.bkt.clouddn.com/%E7%BB%9F%E8%AE%A1%E9%87%8D%E5%A4%8D.PNG" alt="统计"></p></li><li><p>过滤重复数据</p><p><img src="http://pals0a5g6.bkt.clouddn.com/%E8%BF%87%E6%BB%A4%E9%87%8D%E5%A4%8D.PNG" alt="过滤"></p></li><li><p>删除重复数据</p><p><img src="http://pals0a5g6.bkt.clouddn.com/%E5%88%A0%E9%99%A4%E9%87%8D%E5%A4%8D.PNG" alt="删除"></p></li></ul><h3 id="MySQL-导出数据"><a href="#MySQL-导出数据" class="headerlink" title="MySQL 导出数据"></a>MySQL 导出数据</h3><ul><li><p>使用SELECT…INTO OUTFILE导出数据</p><p><img src="http://pals0a5g6.bkt.clouddn.com/select%E5%AF%BC%E5%87%BA%E6%95%B0%E6%8D%AE.PNG" alt="s导出"></p></li><li><p>SELECT…INTO OUTFILE语句属性</p><p><img src="http://pals0a5g6.bkt.clouddn.com/SELECT-OUFILE%E5%B1%9E%E6%80%A7.PNG" alt="导出"></p></li><li><p>导出表作为原始数据</p><p><img src="http://pals0a5g6.bkt.clouddn.com/%E5%AF%BC%E5%87%BA%E8%A1%A8%E5%8E%9F%E5%A7%8B%E6%95%B0%E6%8D%AE.PNG" alt="原始"></p></li><li><p>导出SQL格式的数据</p><p><img src="http://pals0a5g6.bkt.clouddn.com/%E5%AF%BC%E5%87%BASQL%E6%95%B0%E6%8D%AE.PNG" alt="sql导出"></p></li><li><p>将数据表及数据库拷贝至其他主机</p><p><img src="http://pals0a5g6.bkt.clouddn.com/%E5%AF%BC%E5%87%BA%E5%85%B6%E4%BB%96%E4%B8%BB%E6%9C%BA.PNG" alt="主机"></p></li></ul><h3 id="MySQL-导入数据"><a href="#MySQL-导入数据" class="headerlink" title="MySQL 导入数据"></a>MySQL 导入数据</h3><ul><li><p>使用LOAD DATA导入数据</p><p><img src="http://pals0a5g6.bkt.clouddn.com/%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE.PNG" alt="load"></p></li><li><p>使用mysqlimport导入数据</p><p><img src="http://pals0a5g6.bkt.clouddn.com/import%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE.PNG" alt="import"></p></li><li><p>mysqlimport的常用选项</p><p><img src="http://pals0a5g6.bkt.clouddn.com/myintofile%E7%94%A8%E6%B3%95.PNG" alt="导入"></p></li></ul><hr>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.mysql.com/cn/&quot; title=&quot;MySQL&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;MySQL&lt;/a&gt;是最流行的关系型数据库管理系统，在WEB应用方面 MySQL 是最好的RDBMS(Relational Database Management System：关系数据库管理系统)应用软件之一，以下是mysql常用语法&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="0x03 计算机科学" scheme="http://yoursite.com/categories/0x03-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"/>
    
      <category term="数据库技术" scheme="http://yoursite.com/categories/0x03-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>网络对抗简析</title>
    <link href="http://yoursite.com/2018/07/04/%E7%BD%91%E7%BB%9C%E5%AF%B9%E6%8A%97%E7%AE%80%E6%9E%90/"/>
    <id>http://yoursite.com/2018/07/04/网络对抗简析/</id>
    <published>2018-07-04T13:50:26.000Z</published>
    <updated>2018-08-18T03:55:36.204Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这学期的网络对抗原理课程，从企业与工程实践的的视角去看待与思考Web安全相关问题，以下是相关知识点简要归纳，便于查阅参考<br><a id="more"></a></p></blockquote><h2 id="0x01-渗透场景"><a href="#0x01-渗透场景" class="headerlink" title="0x01 渗透场景"></a>0x01 渗透场景</h2><p><img src="http://pb2h7gmlc.bkt.clouddn.com/%E6%B8%97%E9%80%8F%E5%9C%BA%E6%99%AF.PNG" alt="pentest"></p><hr><h2 id="0x02-扫描"><a href="#0x02-扫描" class="headerlink" title="0x02 扫描"></a>0x02 扫描</h2><h3 id="信息收集目标"><a href="#信息收集目标" class="headerlink" title="信息收集目标"></a>信息收集目标</h3><ul><li>域名</li><li>站点</li><li>IP</li><li>接口</li><li>OS</li><li>业务</li><li>端口</li><li>第三方</li><li>服务</li><li>数据</li></ul><h3 id="域名收集（业务承载）"><a href="#域名收集（业务承载）" class="headerlink" title="域名收集（业务承载）"></a>域名收集（业务承载）</h3><ul><li>访问 + 抓包</li><li>Google，github</li><li>遍历 + 暴力破解</li><li>利用DNS服务器配置缺陷</li><li>从公司获得</li></ul><h3 id="收集IP（目标基本粒度之一）"><a href="#收集IP（目标基本粒度之一）" class="headerlink" title="收集IP（目标基本粒度之一）"></a>收集IP（目标基本粒度之一）</h3><ul><li>域名</li><li>IP段反推</li><li>特征</li><li>从公司获得</li></ul><h3 id="端口扫描（缺陷基本粒度之一）"><a href="#端口扫描（缺陷基本粒度之一）" class="headerlink" title="端口扫描（缺陷基本粒度之一）"></a>端口扫描（缺陷基本粒度之一）</h3><ul><li>端口号</li><li>类型</li><li>服务版本</li></ul><h3 id="扫描工具"><a href="#扫描工具" class="headerlink" title="扫描工具"></a>扫描工具</h3><ul><li>Nmap（原理）</li><li>NSE（框架）<ul><li><a href="https://blog.csdn.net/aspirationflow/article/details/7956928" target="_blank" rel="noopener">NSE BLOG</a></li></ul></li><li>ping/hping<ul><li><a href="https://blog.csdn.net/zhuying_linux/article/details/6770730" target="_blank" rel="noopener">ping原理</a></li></ul></li><li>telnet</li></ul><h3 id="扫描过程（发，收，判断特征，结论）"><a href="#扫描过程（发，收，判断特征，结论）" class="headerlink" title="扫描过程（发，收，判断特征，结论）"></a>扫描过程（发，收，判断特征，结论）</h3><ul><li>准备工作</li><li>目标调度</li><li>IP存活检查</li><li>端口扫描</li><li>版本探测</li><li>OS检测</li><li>进一步探测</li><li>结果整理</li></ul><h3 id="主机存活"><a href="#主机存活" class="headerlink" title="主机存活"></a>主机存活</h3><ul><li>Ping 　　　　-PE</li><li>Other ICMP  　-PP -PM</li><li>TCP SYN　　　 -PS</li><li>TCP ACK  　　-PA</li><li>UDP  　　　　　-PU</li><li>不判断  　　　　-P0 -Pn</li></ul><h3 id="端口扫描（端口状态）"><a href="#端口扫描（端口状态）" class="headerlink" title="端口扫描（端口状态）"></a>端口扫描（端口状态）</h3><ul><li>open</li><li>close</li><li>filtered</li><li>组合</li></ul><hr><h2 id="0x03-嗅探（网络流量数据分析）"><a href="#0x03-嗅探（网络流量数据分析）" class="headerlink" title="0x03 嗅探（网络流量数据分析）"></a>0x03 嗅探（网络流量数据分析）</h2><h3 id="狭义嗅探"><a href="#狭义嗅探" class="headerlink" title="狭义嗅探"></a>狭义嗅探</h3><ul><li>混杂模式</li><li>libpcap</li></ul><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ul><li>嗅探未加密的敏感信息</li><li>被动探测/收集信息</li><li>逆向</li><li>排查故障</li></ul><h3 id="BPF语法"><a href="#BPF语法" class="headerlink" title="BPF语法"></a>BPF语法</h3><ul><li>Berkeley Packet Filter</li></ul><h3 id="嗅探工具"><a href="#嗅探工具" class="headerlink" title="嗅探工具"></a>嗅探工具</h3><ul><li>wireshark（GUI抓包/分析工具-本地）</li><li>tcpdump（CLI抓包工具-目标服务器</li></ul><h3 id="广义抓包（上层-细节-限制）"><a href="#广义抓包（上层-细节-限制）" class="headerlink" title="广义抓包（上层/细节/限制）"></a>广义抓包（上层/细节/限制）</h3><ul><li>tcpflow</li><li>代理抓包（Paros,ZAP,Fildder）</li><li>浏览器抓包工具/插件（FireBug，Chrome,HTTP Watch）</li><li>手机抓包（真机配代理，模拟器配代理，AP抓包）</li></ul><h3 id="发包"><a href="#发包" class="headerlink" title="发包"></a>发包</h3><ul><li>图形化HTTP发包工具</li><li>curl</li><li>ping telnet nc</li><li>Nmap NSE</li><li>scapy</li></ul><h3 id="流还原（发包-）"><a href="#流还原（发包-）" class="headerlink" title="流还原（发包++）"></a>流还原（发包++）</h3><ul><li>tcpreplay（tcpprep,tcprewrite）</li><li>tcpcopy</li></ul><hr><h2 id="0x04-漏洞"><a href="#0x04-漏洞" class="headerlink" title="0x04 漏洞"></a>0x04 漏洞</h2><h3 id="1-DDoS与抗D"><a href="#1-DDoS与抗D" class="headerlink" title="1. DDoS与抗D"></a>1. DDoS与抗D</h3><h4 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h4><ul><li>分布式</li><li>拒绝服务</li><li>攻击</li></ul><h4 id="动机（趋向现实）"><a href="#动机（趋向现实）" class="headerlink" title="动机（趋向现实）"></a>动机（趋向现实）</h4><ul><li>研究，挑战，炫耀</li><li>打击对手</li><li>勒索</li><li>商务拓展</li></ul><h4 id="攻击途径"><a href="#攻击途径" class="headerlink" title="攻击途径"></a>攻击途径</h4><ul><li>直接崩溃</li><li>大流量阻塞</li><li>耗尽计算资源</li></ul><h4 id="流量放大"><a href="#流量放大" class="headerlink" title="流量放大"></a>流量放大</h4><ul><li>条件<ul><li>不检验来源</li><li>返回比请求大</li></ul></li><li>实例<ul><li>DNS</li><li>NTP</li><li>BT</li></ul></li></ul><h4 id="攻击源（僵尸网络为主）"><a href="#攻击源（僵尸网络为主）" class="headerlink" title="攻击源（僵尸网络为主）"></a>攻击源（僵尸网络为主）</h4><ul><li>肉鸡，僵尸网络</li><li>恶意插件</li><li>自建机房</li></ul><h4 id="攻击类型"><a href="#攻击类型" class="headerlink" title="攻击类型"></a>攻击类型</h4><ul><li>和缺陷相关的攻击</li><li>CC攻击</li><li>流量攻击</li></ul><h4 id="CC-过量访问（低于带宽，高于处理能力）"><a href="#CC-过量访问（低于带宽，高于处理能力）" class="headerlink" title="CC/过量访问（低于带宽，高于处理能力）"></a>CC/过量访问（低于带宽，高于处理能力）</h4><ul><li>单机qps测试与优化 -RD</li><li>业务估算与集群容量规划 -OPS</li><li>限流保障 -SA</li><li>限流规则优化 -SEC</li></ul><h4 id="流量清洗"><a href="#流量清洗" class="headerlink" title="流量清洗"></a>流量清洗</h4><ul><li>带宽储备-&gt;清洗-&gt;回源</li><li>四层清洗<ul><li>支持非HTTP流量</li><li>不需要SSL证书</li></ul></li><li>七层清洗<ul><li>支持防 CC</li><li>细粒度清洗</li></ul></li></ul><h4 id="防御方案"><a href="#防御方案" class="headerlink" title="防御方案"></a>防御方案</h4><ul><li>准备备用 IP（回源IP）</li><li>配置回源 IP ACL,白名单</li><li>配置供应商高防IP与回源策略</li><li>测试真实IP透传</li><li>制定预案和响应策略</li><li>演练</li><li>供应商选择与商务谈判</li></ul><h3 id="2-漏洞"><a href="#2-漏洞" class="headerlink" title="2. 漏洞"></a>2. 漏洞</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><ul><li>软件漏洞 vs 缺陷</li><li>配置缺陷 vs 设计缺陷</li><li>通用软件漏洞 vs 应用漏洞</li></ul><h4 id="OWASP-TOP-10（13版）"><a href="#OWASP-TOP-10（13版）" class="headerlink" title="OWASP TOP 10（13版）"></a>OWASP TOP 10（13版）</h4><ul><li>注入</li><li>失效的身份认证和会话管理</li><li>跨站脚本（XSS）</li><li>不安全的直接对象引用</li><li>安全配置错误</li><li>敏感信息泄露</li><li>功能级访问控制缺失</li><li>跨站请求伪造（CSRF）</li><li>使用含有已知漏洞的组件</li><li>未验证的重定向和转发</li></ul><h4 id="注入"><a href="#注入" class="headerlink" title="注入"></a>注入</h4><ul><li>缓冲区溢出</li><li>命令行注入</li><li>Struts2的一系列OGNL注入</li><li>SQL注入</li><li>针对NoSQL的注入</li></ul><h4 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h4><ul><li>攻击向量<ul><li>闭合部分</li><li>注入部分</li><li>封闭部分</li></ul></li><li>注入技术<ul><li>Union query</li><li>boolean based</li><li>time base</li></ul></li><li>预防/避免<ul><li>过滤 / 转义</li><li>参数化 / Object Relation Mapping</li></ul></li></ul><h4 id="NoSQL注入"><a href="#NoSQL注入" class="headerlink" title="NoSQL注入"></a>NoSQL注入</h4><ul><li>结构溢出<ul><li>命令行注入</li></ul></li><li>与SQL注入类似<ul><li>缓冲区溢出</li><li>Struts2 OGNL</li></ul></li><li>直接从string到命令</li></ul><h4 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h4><ul><li>类型<ul><li>反射型</li><li>存储型</li><li>DOM Based XSS</li></ul></li><li>限制<ul><li>http_only</li><li>客户端限制</li><li>上下游的限制与弱化</li></ul></li><li>避免<ul><li>waf vs 代码</li><li>过滤 vs 转义</li><li>处理时 vs 展示时</li><li>拼 HTML 片段 vs 框架</li></ul></li></ul><h4 id="URL任意跳转（钓鱼）"><a href="#URL任意跳转（钓鱼）" class="headerlink" title="URL任意跳转（钓鱼）"></a>URL任意跳转（钓鱼）</h4><ul><li>白名单 VS 黑名单</li><li>绕过方法</li></ul><h4 id="未验证的转发（突破内网边界）"><a href="#未验证的转发（突破内网边界）" class="headerlink" title="未验证的转发（突破内网边界）"></a>未验证的转发（突破内网边界）</h4><ul><li>SSRF<ul><li>翻译 &amp; 解码</li><li>代理</li><li>服务路由</li></ul></li><li>任意文件读取</li><li>XXE</li></ul><h4 id="CSRF（跨站请求伪造）"><a href="#CSRF（跨站请求伪造）" class="headerlink" title="CSRF（跨站请求伪造）"></a>CSRF（跨站请求伪造）</h4><ul><li>投票刷票</li><li>转钱，蠕虫</li><li>不盗号而到达目的</li></ul><h4 id="水平权限漏洞"><a href="#水平权限漏洞" class="headerlink" title="水平权限漏洞"></a>水平权限漏洞</h4><ul><li>认为用户不会修改请求</li><li>修改密码</li><li>1元订单</li><li>测试利用简单，难以统一避免</li></ul><h4 id="访问控制缺失"><a href="#访问控制缺失" class="headerlink" title="访问控制缺失"></a>访问控制缺失</h4><ul><li>把钥匙藏在窗台下</li><li>未知路径</li><li>未知请求格式</li><li>各种空密码</li><li>开放目录访问</li></ul><h4 id="失效的身份认证和会话管理"><a href="#失效的身份认证和会话管理" class="headerlink" title="失效的身份认证和会话管理"></a>失效的身份认证和会话管理</h4><ul><li>被盗号</li><li>弱密码</li><li>无防爆破限制</li><li>Session伪造</li><li>Session泄露</li></ul><h4 id="其他安全问题"><a href="#其他安全问题" class="headerlink" title="其他安全问题"></a>其他安全问题</h4><ul><li>安全配置错误</li><li>使用含有已知漏洞的伪造</li></ul><h4 id="新型安全漏洞（TOP-10）"><a href="#新型安全漏洞（TOP-10）" class="headerlink" title="新型安全漏洞（TOP 10）"></a>新型安全漏洞（TOP 10）</h4><ul><li><a href="https://www.owasp.org/images/d/dc/OWASP_Top_10_2017_%E4%B8%AD%E6%96%87%E7%89%88v1.3.pdf" target="_blank" rel="noopener">2017 版</a></li><li>XXE（XML外部实体）</li><li>不安全的反序列化</li><li>不足的日志记录和监控</li></ul><hr><h2 id="0x05-防御体系"><a href="#0x05-防御体系" class="headerlink" title="0x05 防御体系"></a>0x05 防御体系</h2><h3 id="安全含义"><a href="#安全含义" class="headerlink" title="安全含义"></a>安全含义</h3><ul><li>Security vs Safety</li><li>Security vs Secrecy</li><li>Security vs Audit</li></ul><h3 id="两个维度"><a href="#两个维度" class="headerlink" title="两个维度"></a>两个维度</h3><ul><li>弱点<ul><li>漏洞</li><li>漏洞挖掘</li><li>配置不当</li><li>SDL</li><li>设计缺陷</li><li>ACL</li><li>防篡改</li></ul></li><li>攻击<ul><li>扫描</li><li>入侵检测</li><li>渗透</li><li>应急响应</li><li>DDoS / Anti-DDoS</li></ul></li></ul><h3 id="防御者优势"><a href="#防御者优势" class="headerlink" title="防御者优势"></a>防御者优势</h3><ul><li>输出大，量不足</li><li>更全更细致的信息</li><li>更强的控制权</li><li>改变系统 / 制定流程</li><li>专职工程师</li></ul><h3 id="防御体系构建"><a href="#防御体系构建" class="headerlink" title="防御体系构建"></a>防御体系构建</h3><ul><li>扬长避短</li><li>让系统更规范</li><li>加强对信息的掌握</li><li>安全评估</li><li>入侵检测</li><li>及时响应</li></ul><h3 id="企业架构"><a href="#企业架构" class="headerlink" title="企业架构"></a>企业架构</h3><ul><li>人员角色</li><li>网络架构与思维</li><li>应用架构与研发过程</li><li>业务与运营</li></ul><h3 id="威胁梳理"><a href="#威胁梳理" class="headerlink" title="威胁梳理"></a>威胁梳理</h3><ul><li>资产梳理</li><li>威胁建模</li></ul><h3 id="渗透路径的启示"><a href="#渗透路径的启示" class="headerlink" title="渗透路径的启示"></a>渗透路径的启示</h3><ul><li>网络访问的隔离与限制</li><li>漏洞的挖掘与利用</li><li>账号与权限</li></ul><h3 id="安全技术栈"><a href="#安全技术栈" class="headerlink" title="安全技术栈"></a>安全技术栈</h3><ul><li>客户端安全</li><li>网络与系统安全</li><li>应用安全</li><li>业务安全</li><li>数据安全</li></ul><hr><h2 id="0x06-网络安全域隔离与划分"><a href="#0x06-网络安全域隔离与划分" class="headerlink" title="0x06 网络安全域隔离与划分"></a>0x06 网络安全域隔离与划分</h2><h3 id="网络与系统安全"><a href="#网络与系统安全" class="headerlink" title="网络与系统安全"></a>网络与系统安全</h3><ul><li>安全域的隔离与划分</li><li>认证，授权与审计</li><li>边界入侵检测</li><li>主机安全与配置</li></ul><h3 id="安全域的划分与隔离"><a href="#安全域的划分与隔离" class="headerlink" title="安全域的划分与隔离"></a>安全域的划分与隔离</h3><p>   <img src="http://pb2h7gmlc.bkt.clouddn.com/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%9F%9F.PNG" alt="安全域"></p><h3 id="ACL与防火墙"><a href="#ACL与防火墙" class="headerlink" title="ACL与防火墙"></a>ACL与防火墙</h3><ul><li>五元组，N元组</li><li>包过滤防火墙与状态检测防火墙</li><li>黑名单与白名单</li><li>UTM 与 NGFW</li><li>四层负载均衡与Firewall</li></ul><h3 id="端口管理"><a href="#端口管理" class="headerlink" title="端口管理"></a>端口管理</h3><ul><li>规范-权限最小原则</li><li>端口扫描，配置梳理</li><li>维护和整改</li></ul><hr><h2 id="0x07-AAA与认证"><a href="#0x07-AAA与认证" class="headerlink" title="0x07 AAA与认证"></a>0x07 AAA与认证</h2><h3 id="AAA概念（城门的守卫者）"><a href="#AAA概念（城门的守卫者）" class="headerlink" title="AAA概念（城门的守卫者）"></a>AAA概念（城门的守卫者）</h3><ul><li>认证（Authentication）</li><li>授权（Authorization）</li><li>计费（Accounting）</li><li>审计（Audit）</li></ul><h3 id="应用场合（登陆，验证）"><a href="#应用场合（登陆，验证）" class="headerlink" title="应用场合（登陆，验证）"></a>应用场合（登陆，验证）</h3><ul><li>网络准入-有线，无限，VPN</li><li>服务器防伪</li><li>服务器访问</li><li>网站登录</li><li>远程服务器认证与登陆</li><li>设备使用</li><li>重要操作鉴权</li></ul><h3 id="认证"><a href="#认证" class="headerlink" title="认证"></a>认证</h3><ul><li>基于口令 </li><li>基于凭证</li><li>基于生物特征</li></ul><h3 id="口令（以哈希的形式存储在各种地方）"><a href="#口令（以哈希的形式存储在各种地方）" class="headerlink" title="口令（以哈希的形式存储在各种地方）"></a>口令（以哈希的形式存储在各种地方）</h3><ul><li>文本</li><li>数据库</li><li>Unix / Windows</li><li>LDAP / AD</li></ul><h3 id="凭证（没有口令的缺点，易丢失）"><a href="#凭证（没有口令的缺点，易丢失）" class="headerlink" title="凭证（没有口令的缺点，易丢失）"></a>凭证（没有口令的缺点，易丢失）</h3><ul><li>证书</li><li>Token</li><li>手机短信</li><li>邮箱</li><li>IP / MAC</li></ul><h3 id="生物特征（难以伪造，随身携带）"><a href="#生物特征（难以伪造，随身携带）" class="headerlink" title="生物特征（难以伪造，随身携带）"></a>生物特征（难以伪造，随身携带）</h3><ul><li>指纹</li><li>虹膜</li><li>人脸</li><li>习惯</li><li>步态</li></ul><h3 id="认证模式"><a href="#认证模式" class="headerlink" title="认证模式"></a>认证模式</h3><ul><li>PAP</li><li>CHAP</li></ul><h3 id="Kerberos认证协议"><a href="#Kerberos认证协议" class="headerlink" title="Kerberos认证协议"></a>Kerberos认证协议</h3><ul><li>认证</li><li>凭据</li><li>密钥交换</li></ul><h3 id="PKI（身份与公钥的绑定）"><a href="#PKI（身份与公钥的绑定）" class="headerlink" title="PKI（身份与公钥的绑定）"></a>PKI（身份与公钥的绑定）</h3><ul><li>CA</li><li>RA</li><li>证书库</li><li>CRL</li></ul><h3 id="EAP（可扩展认证协议）"><a href="#EAP（可扩展认证协议）" class="headerlink" title="EAP（可扩展认证协议）"></a>EAP（可扩展认证协议）</h3><ul><li>MD5</li><li>TLS</li><li>TTLS</li><li>PEAP</li><li>LEAP</li></ul><h3 id="RADIUS（认证方式的集成协议与服务）"><a href="#RADIUS（认证方式的集成协议与服务）" class="headerlink" title="RADIUS（认证方式的集成协议与服务）"></a>RADIUS（认证方式的集成协议与服务）</h3><ul><li>File</li><li>Unix</li><li>LDAP</li><li>OTP</li><li>EAP</li><li>TACACS</li></ul><h3 id="工具和软件"><a href="#工具和软件" class="headerlink" title="工具和软件"></a>工具和软件</h3><ul><li>OpenSSL</li><li>OpenLDAP</li><li>FreeRadius</li></ul><h3 id="双因子认证"><a href="#双因子认证" class="headerlink" title="双因子认证"></a>双因子认证</h3><ul><li>口令+</li><li>不同场合，不同选择与组合方式</li><li>双因子认证 vs 二次认证</li></ul><h3 id="认证典型场合"><a href="#认证典型场合" class="headerlink" title="认证典型场合"></a>认证典型场合</h3><ul><li>网络准入<ul><li>有线，无线，VPN</li><li>EAP</li><li>LDAP / AD</li><li>RADIUS</li><li>AC，交换机</li><li>WEP / WPA / WPA2</li></ul></li><li>SSH<ul><li>认证方式<ul><li>口令</li><li>PAM</li><li>证书</li><li>GSSAPI / Kerberos<ul><li>跳板机与堡垒机</li></ul></li></ul></li><li>网站登陆<ul><li>登陆验证</li><li>OPENID / OAUTH</li><li>SSO</li><li>Session共享</li></ul></li><li>二次认证<ul><li>业务安全</li><li>策略与应用场景</li><li>认证技术与方案</li><li>框架</li></ul></li></ul></li></ul><h3 id="口令相关的攻防"><a href="#口令相关的攻防" class="headerlink" title="口令相关的攻防"></a>口令相关的攻防</h3><ul><li>弱密码/暴力破解/刷库/钓鱼</li><li>防机器人 - 验证码</li><li>围绕次数做的限制</li><li>分析与检测</li><li>口令的存储与传输</li></ul><h3 id="验证码缺陷"><a href="#验证码缺陷" class="headerlink" title="验证码缺陷"></a>验证码缺陷</h3><ul><li>OCR</li><li>熵不够</li><li>触发时更新 vs 验证时更新</li><li>答案外泄</li><li>绑定session vs 绑定事物</li><li>使用错误导致验证码不起作用</li></ul><h3 id="鉴权"><a href="#鉴权" class="headerlink" title="鉴权"></a>鉴权</h3><ul><li>映射：账号-&gt;操作-&gt;Action</li><li>基于账号 vs 基于群组 / 角色</li></ul><h3 id="审计（发现-amp-追溯）"><a href="#审计（发现-amp-追溯）" class="headerlink" title="审计（发现 &amp; 追溯）"></a>审计（发现 &amp; 追溯）</h3><ul><li>事前：风险评估，资格评估</li><li>事中：入侵检测</li><li>事后：追溯 + 制度</li></ul><h3 id="日志记录"><a href="#日志记录" class="headerlink" title="日志记录"></a>日志记录</h3><ul><li>认证记录</li><li>鉴权记录</li><li>应用层 / 业务记录</li><li>异常记录</li></ul><h3 id="常见日志（配置-读取）"><a href="#常见日志（配置-读取）" class="headerlink" title="常见日志（配置/读取）"></a>常见日志（配置/读取）</h3><ul><li>syslog（syslog-ng,rsyslog）</li><li>audit（auditd）</li><li>access log / error log</li><li>应用日志：log4j</li></ul><h3 id="文本日志分析"><a href="#文本日志分析" class="headerlink" title="文本日志分析"></a>文本日志分析</h3><ul><li>awk</li><li>sed</li><li>grep</li><li>sort</li><li>uniq</li><li>wc</li></ul><h3 id="日志收集与预处理（收集，切割，格式化）"><a href="#日志收集与预处理（收集，切割，格式化）" class="headerlink" title="日志收集与预处理（收集，切割，格式化）"></a>日志收集与预处理（收集，切割，格式化）</h3><ul><li>Flume</li><li>Logstash</li></ul><h3 id="日志分析（查找，统计）"><a href="#日志分析（查找，统计）" class="headerlink" title="日志分析（查找，统计）"></a>日志分析（查找，统计）</h3><ul><li>ElasticSearch Logstash Kibana</li><li>Splunk</li><li>Hadoop + Hive</li><li>Storm</li></ul><hr><h2 id="0x08-入侵检测"><a href="#0x08-入侵检测" class="headerlink" title="0x08 入侵检测"></a>0x08 入侵检测</h2><h3 id="入侵检测（识别-amp-发现）"><a href="#入侵检测（识别-amp-发现）" class="headerlink" title="入侵检测（识别 &amp; 发现）"></a>入侵检测（识别 &amp; 发现）</h3><ul><li>攻击</li><li>潜在威胁</li></ul><h3 id="与安全体系的关系（受益-amp-补充）"><a href="#与安全体系的关系（受益-amp-补充）" class="headerlink" title="与安全体系的关系（受益 &amp; 补充）"></a>与安全体系的关系（受益 &amp; 补充）</h3><ul><li>收敛</li><li>规范</li></ul><h3 id="部署位置"><a href="#部署位置" class="headerlink" title="部署位置"></a>部署位置</h3><ul><li>流量汇聚处</li><li>AAA</li><li>主机</li><li>日志汇聚处</li></ul><h3 id="检测方式（黑白名单）"><a href="#检测方式（黑白名单）" class="headerlink" title="检测方式（黑白名单）"></a>检测方式（黑白名单）</h3><ul><li>误用检测 - 黑明白</li><li>异常检测 - 白名单</li></ul><h3 id="检测技术"><a href="#检测技术" class="headerlink" title="检测技术"></a>检测技术</h3><ul><li>规则 - 经验转化，专家系统</li><li>模型 - 科学与玄学</li></ul><h3 id="实时性（权衡与妥协）"><a href="#实时性（权衡与妥协）" class="headerlink" title="实时性（权衡与妥协）"></a>实时性（权衡与妥协）</h3><ul><li>实时</li><li>准实时</li><li>事后</li></ul><h3 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h3><ul><li>联动</li><li>告警（工单，线索）</li></ul><h3 id="实例（典型与广义的）"><a href="#实例（典型与广义的）" class="headerlink" title="实例（典型与广义的）"></a>实例（典型与广义的）</h3><ul><li>Snort</li><li>WAF - Modsecurity Lua</li><li>Agent - OSSEC</li><li>日志分析系统</li></ul><h3 id="ModSecurity"><a href="#ModSecurity" class="headerlink" title="ModSecurity"></a>ModSecurity</h3><ul><li>5个阶段<ul><li>Phase Request Headers</li><li>Phase Request Body</li><li>Phase Response Headers</li><li>Phase Response Body</li><li>Phase Logging</li></ul></li><li>手册和CRS<ul><li>Configuration Directives</li><li>Variables</li><li>Transformation functions</li><li>Operators</li><li>Actions</li></ul></li></ul><h3 id="OSSEC"><a href="#OSSEC" class="headerlink" title="OSSEC"></a>OSSEC</h3><ul><li>安全Agent HIDS</li><li>配置手册<ul><li>Log monitoring/analysis</li><li>Syscheck</li><li>Rootcheck manual</li><li>Rules and Decoders</li><li>Active Response</li></ul></li></ul><h3 id="蜜罐（另辟蹊径）"><a href="#蜜罐（另辟蹊径）" class="headerlink" title="蜜罐（另辟蹊径）"></a>蜜罐（另辟蹊径）</h3><ul><li>与狭义IDS的区别<ul><li>谁迷惑谁</li><li>自带关键信息量</li></ul></li><li>面临问题<ul><li>部署</li><li>灵活性</li><li>响应</li></ul></li></ul><hr><h2 id="0x09-数据安全"><a href="#0x09-数据安全" class="headerlink" title="0x09 数据安全"></a>0x09 数据安全</h2><h3 id="问题现状"><a href="#问题现状" class="headerlink" title="问题现状"></a>问题现状</h3><ul><li>业务数据泄露<ul><li>投诉</li><li>案件</li><li>公关事件</li></ul></li><li>公司机密泄露<ul><li>员工通信录</li><li>内部邮件，论坛</li><li>战略机密，谈判底线，高管行踪</li></ul></li></ul><h3 id="解决（堵住缺口）"><a href="#解决（堵住缺口）" class="headerlink" title="解决（堵住缺口）"></a>解决（堵住缺口）</h3><ul><li>放渗透/防入侵</li><li>加密存储</li><li>增强AAA</li><li>水印</li><li>保密制度</li></ul><h3 id="实际情况"><a href="#实际情况" class="headerlink" title="实际情况"></a>实际情况</h3><h4 id="问题发生时"><a href="#问题发生时" class="headerlink" title="问题发生时"></a>问题发生时</h4><ul><li>猜疑</li><li>碰运气</li><li>抓垫背，波脏水</li><li>被动解释</li></ul><h4 id="问题发生前"><a href="#问题发生前" class="headerlink" title="问题发生前"></a>问题发生前</h4><ul><li>过度自信</li><li>过度保守</li><li>不愿意付出代价</li><li>拍脑袋，想当然</li></ul><h4 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h4><ul><li>不科学，不系统，不清晰</li><li>有什么数据？</li><li>数据的意义价值？</li><li>如何保护数据？</li><li>现有的安全措施和保护数据之间的关系？</li><li>必要性和代价？</li></ul><h4 id="特点和难点"><a href="#特点和难点" class="headerlink" title="特点和难点"></a>特点和难点</h4><ul><li>纵深防御</li><li>没有独当一面</li><li>没有立竿见影</li><li>大部分不是技术的坑</li><li>主要目标不是外部而是内部</li><li>建立在已有防御体系之上</li><li>独立于已有防御技术和手段</li></ul><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><ul><li>数据梳理</li><li>数据定级/打标</li><li>针对数据级别的安全规范矩阵</li><li>针对规则，控制增量</li><li>实例评估，整改，消化存量</li></ul><h4 id="数据级别（抽象数据划分）"><a href="#数据级别（抽象数据划分）" class="headerlink" title="数据级别（抽象数据划分）"></a>数据级别（抽象数据划分）</h4><ul><li>类型维度<ul><li>公司数据（B）</li><li>用户数据（C）</li></ul></li><li>级别维度<ul><li>公开（1）</li><li>共享（2）</li><li>秘密（3）</li><li>机密（4）</li></ul></li><li>数据生命周期<ul><li>生成/采集</li><li>传输</li><li>存储</li><li>读取</li><li>展示</li><li>转移</li><li>销毁</li></ul></li><li>典型场景<ul><li>用户机密数据不能存储</li><li>用户机密信息的采集必须加密</li><li>用户秘密数据不能在前台展示</li><li>用户机密数据不能在后台展示</li><li>用户秘密数据必须通过认证和授权后才能被用户自己访问</li><li>用户共享信息必须经过用户授权才能共享给其他用户</li><li>公司秘密信息必须经过认证和授权才能访问 , 且必须有记录</li><li>公司秘密信息的转移必须经过审批</li><li>公司共享信息在展示时要加水印</li><li>公司秘密数据不得存储在公司以外的网络或介质中</li><li>公司贡献数据必须经过审批才能对外公开    </li></ul></li></ul><h4 id="处置方式"><a href="#处置方式" class="headerlink" title="处置方式"></a>处置方式</h4><ul><li>手段<ul><li>明文，加密</li><li>哈希</li><li>水印</li><li>AAA</li></ul></li><li>级别变化<ul><li>打星，脱敏</li><li>聚合</li></ul></li></ul><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li>避免在具体细节处纠缠—— 自上而下推动</li><li>避免描述和现状不一致—— 控制权</li><li>考虑现状和可行性—— 不给自己挖坑  </li></ul><hr><h2 id="0x0A-应用安全"><a href="#0x0A-应用安全" class="headerlink" title="0x0A 应用安全"></a>0x0A 应用安全</h2><h3 id="应用开发（代码）"><a href="#应用开发（代码）" class="headerlink" title="应用开发（代码）"></a>应用开发（代码）</h3><ul><li>MVC<ul><li>View Controller Modle</li></ul></li><li>RESTful<ul><li>前端渲染</li></ul></li><li>J2EE<ul><li>客户层 表示层 业务逻辑层 数据层</li></ul></li></ul><h3 id="容器与Filter-安全逻辑点"><a href="#容器与Filter-安全逻辑点" class="headerlink" title="容器与Filter(安全逻辑点)"></a>容器与Filter(安全逻辑点)</h3><ul><li>http 服务器 - Module<ul><li>Apache 、 Nginx</li></ul></li><li>容器 - 容器 Filter<ul><li>JBoss 、 Tomcat 、 Jetty</li></ul></li><li>开发框架 Filter 、 Servlet Filter</li></ul><h3 id="其它关键点（针对性）"><a href="#其它关键点（针对性）" class="headerlink" title="其它关键点（针对性）"></a>其它关键点（针对性）</h3><ul><li>Web层渲染时</li><li>AJAX 请求生成，JSON结果生成</li><li>数据层 ORM</li></ul><h3 id="中间件（大型网站架构）"><a href="#中间件（大型网站架构）" class="headerlink" title="中间件（大型网站架构）"></a>中间件（大型网站架构）</h3><ul><li>远程同步调用</li><li>异步通知 、消息总线</li><li>分布式缓存</li><li>分布式数据库</li><li>集中配置管理</li><li>统一的应用日志采集方案</li><li>数据分析平台</li></ul><h3 id="开发框架（决定应用安全难度）"><a href="#开发框架（决定应用安全难度）" class="headerlink" title="开发框架（决定应用安全难度）"></a>开发框架（决定应用安全难度）</h3><ul><li>有的地方有、有的地方没有</li><li>有的就弄清楚</li><li>没有的要联合架构师来推动（然而 … ）</li><li>读懂框架，便于白盒检查和应急</li><li>将安全措施融入到框架中</li></ul><h3 id="常见框架-软件"><a href="#常见框架-软件" class="headerlink" title="常见框架/软件"></a>常见框架/软件</h3><ul><li>pring Struts Hibernate</li><li>Spring MVC</li><li>ASP.NET</li><li>Django</li><li>ThinkPHP 等一众PHP框架</li><li>AngularJS 等一众前端</li></ul><h3 id="漏洞挖掘（多信息）"><a href="#漏洞挖掘（多信息）" class="headerlink" title="漏洞挖掘（多信息）"></a>漏洞挖掘（多信息）</h3><ul><li>目标系统</li><li>文档</li><li>代码</li><li>测试环境</li><li>人</li><li>日志</li><li>攻击者提供的线索</li></ul><h3 id="Fuzz-替换为攻击向量"><a href="#Fuzz-替换为攻击向量" class="headerlink" title="Fuzz(替换为攻击向量)"></a>Fuzz(替换为攻击向量)</h3><ul><li>代理抓包</li><li>日志</li><li>测试代理</li></ul><h3 id="安全开发"><a href="#安全开发" class="headerlink" title="安全开发"></a>安全开发</h3><ul><li>安全框架 - 告诉开发该怎么做</li><li>安全编码规范 - 告诉开发必须这么做</li><li>白盒审计 - 找出不这么做的</li></ul><p><img src="http://par628i4r.bkt.clouddn.com/%E5%BA%94%E7%94%A8%E5%AE%89%E5%85%A8.png" alt="SDL"></p><h3 id="SDL（软件开发周期）"><a href="#SDL（软件开发周期）" class="headerlink" title="SDL（软件开发周期）"></a>SDL（软件开发周期）</h3><ul><li>需求评审</li><li>设计评审</li><li>技术评审</li><li>测试用例评审</li><li>开发阶段</li><li>测试阶段</li><li>上线阶段</li><li>运维运营阶段</li><li>下线</li></ul><hr><h2 id="0x0B-密码学应用"><a href="#0x0B-密码学应用" class="headerlink" title="0x0B 密码学应用"></a>0x0B 密码学应用</h2><h3 id="现代密码学"><a href="#现代密码学" class="headerlink" title="现代密码学"></a>现代密码学</h3><ul><li>安全性在于密钥</li><li>民科密码</li><li>现代密码</li></ul><h3 id="分类（区别-amp-差别）"><a href="#分类（区别-amp-差别）" class="headerlink" title="分类（区别&amp;差别）"></a>分类（区别&amp;差别）</h3><ul><li>密码 vs 哈希</li><li>对称密码 vs 非对称密码</li><li>流密码 vs 分组密码</li><li>RSA vs ECC</li></ul><h3 id="常见加密算法（缺陷-场景）"><a href="#常见加密算法（缺陷-场景）" class="headerlink" title="常见加密算法（缺陷/场景）"></a>常见加密算法（缺陷/场景）</h3><ul><li>RC4（不安全）</li><li>DES(不安全)，3DES</li><li>AES</li><li>RSA</li><li>商密</li></ul><h3 id="分组密码模式（解决什么问题-优缺点）"><a href="#分组密码模式（解决什么问题-优缺点）" class="headerlink" title="分组密码模式（解决什么问题/优缺点）"></a>分组密码模式（解决什么问题/优缺点）</h3><h4 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h4><ul><li>ECB</li><li>CBC</li><li>CFB</li><li>OFB</li><li>CTR</li></ul><h4 id="填充与IV"><a href="#填充与IV" class="headerlink" title="填充与IV"></a>填充与IV</h4><ul><li>填充<ul><li>ANSIX923，ISO10126，PKCS5/7</li></ul></li><li>IV使用原则<ul><li>不重复，不需要保密</li></ul></li></ul><h3 id="Padding-Oracle"><a href="#Padding-Oracle" class="headerlink" title="Padding Oracle"></a>Padding Oracle</h3><ul><li>CBC</li><li>IV可控</li><li>结果差异提供了1bit的信息</li></ul><h3 id="哈希算法（单向不可逆）"><a href="#哈希算法（单向不可逆）" class="headerlink" title="哈希算法（单向不可逆）"></a>哈希算法（单向不可逆）</h3><ul><li>MD5,SHA1(不安全)</li><li>SHA256,SHA512</li></ul><h3 id="消息认证码（MAC不等同签名）"><a href="#消息认证码（MAC不等同签名）" class="headerlink" title="消息认证码（MAC不等同签名）"></a>消息认证码（MAC不等同签名）</h3><ul><li>Epr(p)</li><li>Epsk(p)</li><li>H(p+k)</li><li>p = msg+timestamp(+rand)</li></ul><h3 id="加密传输"><a href="#加密传输" class="headerlink" title="加密传输"></a>加密传输</h3><ul><li>DH会话密钥协商</li><li>分组加密建立隧道</li><li>SSL</li><li>IPSec</li><li>SSH</li></ul><h3 id="身份认证"><a href="#身份认证" class="headerlink" title="身份认证"></a>身份认证</h3><ul><li>基于凭据的认证</li><li>基于挑战的认证</li><li>预共享密钥 &amp; 公钥算法</li></ul><hr><h2 id="0x0C-业务安全"><a href="#0x0C-业务安全" class="headerlink" title="0x0C 业务安全"></a>0x0C 业务安全</h2><h3 id="三类场景"><a href="#三类场景" class="headerlink" title="三类场景"></a>三类场景</h3><ul><li>军队 vs 军队<ul><li>渗透，扫描，DDOS</li><li>拼技术</li></ul></li><li>警察 vs 罪犯<ul><li>盗号，欺诈，黑帽SEO，刷榜刷量</li><li>拼规则</li></ul></li><li>城管 vs 小贩<ul><li>垃圾信息，爬取，薅羊毛</li><li>拼运营 </li></ul></li></ul><h3 id="基于规则（朴素方法）"><a href="#基于规则（朴素方法）" class="headerlink" title="基于规则（朴素方法）"></a>基于规则（朴素方法）</h3><ul><li>账号安全</li><li>资金风控</li><li>搜索反作弊</li><li>广告反作弊</li><li>反垃圾信息</li></ul><h3 id="基于模型（生成规则，升华规则）"><a href="#基于模型（生成规则，升华规则）" class="headerlink" title="基于模型（生成规则，升华规则）"></a>基于模型（生成规则，升华规则）</h3><ul><li>统计分析</li><li>模式识别</li><li>人工智能</li></ul><h3 id="逃逸机制"><a href="#逃逸机制" class="headerlink" title="逃逸机制"></a>逃逸机制</h3><ul><li>验证码</li><li>提高认证级别<ul><li>短信，邮件，电话，证件…</li></ul></li><li>降级降权</li><li>基于时间的解禁策略</li></ul><h3 id="系统实现（框架）"><a href="#系统实现（框架）" class="headerlink" title="系统实现（框架）"></a>系统实现（框架）</h3><ul><li>打点机制</li><li>规则引擎</li><li>分析引擎</li><li>处置模块</li><li>效果分析</li></ul><h3 id="对规则的保护（易忽视的点）"><a href="#对规则的保护（易忽视的点）" class="headerlink" title="对规则的保护（易忽视的点）"></a>对规则的保护（易忽视的点）</h3><ul><li>保密</li><li>组合使用</li><li>检测和出发分离</li></ul><h3 id="非典型业务安全"><a href="#非典型业务安全" class="headerlink" title="非典型业务安全"></a>非典型业务安全</h3><ul><li>客户端等效原则</li><li>用户挟持原则</li><li>新用户原则</li><li>鱼死网破法</li></ul><h3 id="迷惑（进一步保护规则）"><a href="#迷惑（进一步保护规则）" class="headerlink" title="迷惑（进一步保护规则）"></a>迷惑（进一步保护规则）</h3><ul><li>不中奖</li><li>假数据</li><li>细粒度的信息展示</li></ul><h3 id="评价指标（针对不同手段）"><a href="#评价指标（针对不同手段）" class="headerlink" title="评价指标（针对不同手段）"></a>评价指标（针对不同手段）</h3><ul><li>准确率</li><li>技术强度</li><li>迷惑程度</li><li>实施技术</li><li>灵活性</li></ul><h3 id="迷惑与陷阱（主动出击，人为制造差异）"><a href="#迷惑与陷阱（主动出击，人为制造差异）" class="headerlink" title="迷惑与陷阱（主动出击，人为制造差异）"></a>迷惑与陷阱（主动出击，人为制造差异）</h3><ul><li>js陷阱</li><li>位置信息</li><li>顺序与频率</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这学期的网络对抗原理课程，从企业与工程实践的的视角去看待与思考Web安全相关问题，以下是相关知识点简要归纳，便于查阅参考&lt;br&gt;
    
    </summary>
    
      <category term="0x02 安全技术" scheme="http://yoursite.com/categories/0x02-%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Web安全" scheme="http://yoursite.com/categories/0x02-%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/Web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="WebSecurity" scheme="http://yoursite.com/tags/WebSecurity/"/>
    
  </entry>
  
  <entry>
    <title>Web安全观</title>
    <link href="http://yoursite.com/2018/07/03/web%E5%AE%89%E5%85%A8%E8%A7%82/"/>
    <id>http://yoursite.com/2018/07/03/web安全观/</id>
    <published>2018-07-03T01:39:00.000Z</published>
    <updated>2018-08-18T03:51:34.157Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>安全学习如同武学修行，思维同于心法，技术似于招式，攻防方法层出不穷，千变万化，唯安全本质不离其宗，如何深刻理解安全，以何种思维去思索，看待安全问题，似乎是一次无止境的探索旅行，追随前辈的步伐，于古卷秘笈中窥知一二<br><a id="more"></a></p></blockquote><hr><h2 id="0x01-信息安全速览"><a href="#0x01-信息安全速览" class="headerlink" title="0x01 信息安全速览"></a>0x01 信息安全速览</h2><h3 id="关于安全的定义"><a href="#关于安全的定义" class="headerlink" title="关于安全的定义"></a>关于安全的定义</h3><p><strong>理想化定义</strong></p><ul><li>如果系统能按照既定的方式完成任务，不做额外的事情，那这套系统就是安全的&lt;现实中似乎无法实现&gt;</li></ul><p><strong>Bell-La padula security model</strong></p><ul><li>当且仅当系统开始于安全的状态，而且一直不会落入非安全状态，它才是安全的&lt;学术界知名规范，现实工程世界依旧无法实现&gt;</li></ul><p><strong>真实世界状况</strong></p><p>（1）对一个足够复杂的计算机系统来说，没有办法定义什么是正确的行为</p><p>（2）美好的想法无法自动转化成规范的约束条件</p><p>（3）很难令人信服地分析软件的行为</p><p><strong>Naval Research Lab定义</strong></p><ul><li>如果系统在处理信息时恰当地保护了数据，使其不会产生为授权的泄露，未授权的篡改以及能抵抗未授权的大规模压力，那系统就是安全的</li></ul><p><strong>结论思索</strong></p><ul><li>似乎无论如何去定义，总是很难系统而全面地理解和评估现实世界中的软件安全性，安全是一个动态的，发展的，不断变化的过程，只要存在于真实世界中，就会出现问题，就会存在漏洞，唯一不变的就是变化，如何预见，应对变化比安全问题本身重要而更有价值<strong>-&gt;进入风险管理</strong></li></ul><h3 id="进入风险管理"><a href="#进入风险管理" class="headerlink" title="进入风险管理"></a>进入风险管理</h3><p><strong>引用背景</strong></p><ul><li>漏洞必然存在，根据目标安排优先级，试图以数字量化真实世界安全问题的代价</li></ul><p><strong>风险 = 出现问题的可能性 X 最大损失</strong></p><p><strong>认识误区</strong></p><ul><li>不到位的措施只要被条理化了就能变得更合理，不足的金钱投入再加上风险管理，就能和充足的安全投入达到相似的安全成效</li></ul><p><strong>正确认识</strong></p><p>（1）在互联网的系统里，损失是没有上限的，范围也不会只固定在单个设备上</p><p>（2）健康系统的贡献实际上弥补不了系统被入侵后的非经济损失</p><p>（3）现有的数据对日后的风险也许完全没有意义</p><p>（4）基于统计数据的预测对独立事件来说并不值得</p><h3 id="分类学的启发"><a href="#分类学的启发" class="headerlink" title="分类学的启发"></a>分类学的启发</h3><p><strong>上述思想学派相通之处</strong></p><ul><li>把安全问题分解为若干可计算的目标，由此得到一套统一的安全体系理论或一套能接受的风险管理模型，进而抽象出一些经过优化的底层行为，然后借此设计出完美的应用</li></ul><p><strong>CWE-自然科学运用</strong></p><p>（1）通过收集足够多的实验数据进行底层抽象，对日益复杂的规律进行观察，重组和记录，以期获得某种安全运算的统一模型</p><p>（2）创建一套统一的漏洞理论，以改进对软件缺陷的研究，建模和分类；提供一套通用对话语言，以便于讨论，挖掘和处理软件安全漏洞的成因</p><p><strong>CVSS-自然科学运用</strong></p><p>（1）用一套只有机器能读懂的基本参数，精确量化已知的安全问题</p><p>（2）通过多项评估因子，根据不同的应用场景，严谨地对潜在漏洞的重要程度打分，精确量化已知的安全问题</p><h3 id="实际解决之道"><a href="#实际解决之道" class="headerlink" title="实际解决之道"></a>实际解决之道</h3><ul><li>从失败（最好是别人的失败）中学习</li><li>开发一些工具来检查和纠正问题</li><li>引入恰当的组件隔离，访问控制，数据冗余，监控和响应流程</li></ul><hr><h2 id="0x02-Web发展简史"><a href="#0x02-Web发展简史" class="headerlink" title="0x02 Web发展简史"></a>0x02 Web发展简史</h2><p><img src="http://pbegz2k88.bkt.clouddn.com/Web%E5%8F%91%E5%B1%95%E5%8E%86%E7%A8%8B.png" alt="web简史"></p><hr><h2 id="0x03-风险的演化"><a href="#0x03-风险的演化" class="headerlink" title="0x03 风险的演化"></a>0x03 风险的演化</h2><ul><li>用户作为安全风险的一个环节</li><li>难以隔离的Web运行环境</li><li>缺乏统一的格局</li><li>跨浏览器交互：失败的协同</li><li>客户端与服务器界限的日益模糊</li></ul><hr><h2 id="0x04-安全三要素（CIA）"><a href="#0x04-安全三要素（CIA）" class="headerlink" title="0x04 安全三要素（CIA）"></a>0x04 安全三要素（CIA）</h2><p><strong>机密性（Confidentiality）</strong></p><ul><li>保护数据不能泄露，加密是实现机密性要求的常见手段</li></ul><p><strong>完整性（Inetgrity）</strong> </p><ul><li>保护数据内容是否完整，没有被篡改，常见保证完整性的手段是数字签名</li></ul><p><strong>可用性（Availability）</strong></p><ul><li>保护资源是“随需而得”</li></ul><hr><h2 id="0x05-安全评估流程"><a href="#0x05-安全评估流程" class="headerlink" title="0x05 安全评估流程"></a>0x05 安全评估流程</h2><p><img src="http://pbegz2k88.bkt.clouddn.com/%E5%AE%89%E5%85%A8%E8%AF%84%E4%BC%B0%E6%B5%81%E7%A8%8B.png" alt="评估"></p><ul><li><strong>威胁建模-STRIDE模型</strong></li></ul><p><img src="http://pbegz2k88.bkt.clouddn.com/STRIDE.png" alt="STRIDE"></p><ul><li><strong>风险评估-DREAD模型</strong></li></ul><p><img src="http://pbegz2k88.bkt.clouddn.com/DEREAD.PNG" alt="DREAD"></p><hr><h2 id="0x06-安全防御原则"><a href="#0x06-安全防御原则" class="headerlink" title="0x06 安全防御原则"></a>0x06 安全防御原则</h2><h3 id="（1）Secure-By-Default原则-lt-总则-gt"><a href="#（1）Secure-By-Default原则-lt-总则-gt" class="headerlink" title="（1）Secure By Default原则&lt;总则&gt;"></a><strong>（1）Secure By Default原则&lt;总则&gt;</strong></h3><blockquote><p>默认情况下，在软件中，安全性意味着默认配置设置是最安全的设置，不一定是最友好的用户设置,在许多情况下，基于风险分析和可用性测试来评估安全性和用户友好性</p></blockquote><p><strong>白名单/黑名单</strong></p><ul><li>这个规范的制定，也可以选择白名单的思想来实现。按照白名单的思想，应该根据业务需求，列出一个允许使用的软件以及软件版本的清单，在此清单外的软件则禁止使用</li><li>通配符<em>，</em>代表来自任意域的Flash都能访问本域的数据，因此就造成了安全隐患。所以在选择使用白名单时，需要注意避免出现类似通配符<em>的问题 </em></li></ul><p><strong>最小权限原则</strong></p><ul><li>最小权限原则要求系统只授予主体必要的权限，而不要过度授权，这样能有效地减少系统、网络、应用、数据库出错的机会</li></ul><h3 id="（2）纵深防御原则-lt-全面正确看待问题-gt"><a href="#（2）纵深防御原则-lt-全面正确看待问题-gt" class="headerlink" title="（2）纵深防御原则&lt;全面正确看待问题&gt;"></a><strong>（2）纵深防御原则&lt;全面正确看待问题&gt;</strong></h3><blockquote><p>两层含义:首先，要在各个不同层面，不同方面试试安全方案，避免出现疏漏，不同方案之间需要相互配合；其次，要在正确的地方做正确的事情，在解决根本问题的地方实施针对性的安全方案</p></blockquote><ul><li><p>常见的入侵案例中，大多数是利用Web应用的漏洞，攻击者先获得一个低权限的webshell，然后通过低权限的webshell上传更多的文件，并尝试执行更高权限的系统命令，尝试在服务器上提升权限为root；接下来攻击者再进一步尝试渗透内网，比如数据库服务器所在的网段</p></li><li><p>对于XSS防御，对系统取得的用户输入进行过滤其实是不太合适的，因为XSS真正产生危害的场景是在用户的浏览器上，或者说服务器端输出的HTML页面，被注入了恶意代码。只有在拼装HTML时输出，系统才能获得HTML上下文的语义，才能判断出是否存在误杀等情况。所以“在正确的地方做正确的事情”，也是纵深防御的一种含义——必须把防御方案放到最合适的地方去解决</p></li></ul><h3 id="（3）数据与代码分离原则-lt-从漏洞成因上看待问题-gt"><a href="#（3）数据与代码分离原则-lt-从漏洞成因上看待问题-gt" class="headerlink" title="（3）数据与代码分离原则&lt;从漏洞成因上看待问题&gt;"></a><strong>（3）数据与代码分离原则&lt;从漏洞成因上看待问题&gt;</strong></h3><ul><li><p>实际上，缓冲区溢出，也可以认为是程序违背了这一原则的后果——程序在栈或者堆中，将用户数据当做代码执行，混淆了代码与数据的边界，从而导致安全问题的发生</p></li><li><p>在Web安全中，由“注入”引起的问题比比皆是，如XSS、SQL Injection、CRLF Injection、X-Path Injection等。此类问题均可以根据“数据与代码分离原则”设计出真正安全的解决方案，因为这个原则抓住了漏洞形成的本质原因</p></li></ul><h3 id="（4）不可预测性原则-lt-从克服攻击方法的角度看待问题-gt"><a href="#（4）不可预测性原则-lt-从克服攻击方法的角度看待问题-gt" class="headerlink" title="（4）不可预测性原则&lt;从克服攻击方法的角度看待问题&gt;"></a><strong>（4）不可预测性原则&lt;从克服攻击方法的角度看待问题&gt;</strong></h3><ul><li><p>微软的Windows系统用户多年来深受缓冲区溢出之苦，因此微软在Windows的新版本中增加了许多对抗缓冲区溢出等内存攻击的功能。微软无法要求运行在系统中的软件没有漏洞，因此它采取的做法是让漏洞的攻击方法失效。比如，使用DEP来保证堆栈不可执行，使用ASLR让进程的栈基址随机变化，从而使攻击程序无法准确地猜测到内存地址，大大提高了攻击的门槛</p></li><li><p>在ASLR的控制下，一个程序每次启动时，其进程的栈基址都不相同，具有一定的随机性，对于攻击者来说，这就是“不可预测性”</p></li></ul><hr><h2 id="0xFF-参考书目"><a href="#0xFF-参考书目" class="headerlink" title="0xFF 参考书目"></a>0xFF 参考书目</h2><ul><li><p><a href="https://pan.baidu.com/s/187jtIcu5zzbSPjTwjpsmTA" title="《Web之困-现代Web应用安全指南》" target="_blank" rel="noopener">《Web之困—现代Web应用安全指南》</a> -Web安全圣经</p></li><li><p><a href="https://pan.baidu.com/s/1ckkllzRAJdnEOHLSdQfovA" title="《黑客攻防技术宝典：Web实战篇》" target="_blank" rel="noopener">《黑客攻防技术宝典：Web实战篇》</a> -Web安全领域扛鼎之作</p></li><li><p><a href="https://pan.baidu.com/s/1lpIFKMVDbpJOyAggA3bwpg" title="《白帽子讲Web安全》" target="_blank" rel="noopener">《白帽子讲Web安全》</a> -国内为数不多的Web安全经典书籍</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;安全学习如同武学修行，思维同于心法，技术似于招式，攻防方法层出不穷，千变万化，唯安全本质不离其宗，如何深刻理解安全，以何种思维去思索，看待安全问题，似乎是一次无止境的探索旅行，追随前辈的步伐，于古卷秘笈中窥知一二&lt;br&gt;
    
    </summary>
    
      <category term="0X01 思维视角" scheme="http://yoursite.com/categories/0X01-%E6%80%9D%E7%BB%B4%E8%A7%86%E8%A7%92/"/>
    
      <category term="安全观" scheme="http://yoursite.com/categories/0X01-%E6%80%9D%E7%BB%B4%E8%A7%86%E8%A7%92/%E5%AE%89%E5%85%A8%E8%A7%82/"/>
    
    
      <category term="WebSecurity" scheme="http://yoursite.com/tags/WebSecurity/"/>
    
  </entry>
  
</feed>
